{"/home/travis/build/kaizhu256/node-utility2/test.js":"/* istanbul instrument in package utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2_rollup || local.global.local;\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('./lib.utility2.js'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local._serverLocalUrlTest = function (url) {\n        /*\n         * this function will test if the url is local\n         */\n            url = local.urlParse(url).pathname;\n            return local.modeJs === 'browser' && url.indexOf('/test.') === 0;\n        };\n\n        local._testCase_testRunDefault_failure = function (options, onError) {\n        /*\n         * this function will test testRunDefault's failure handling-behavior\n         */\n            // test failure from callback handling-behavior\n            onError(local.errorDefault);\n            // test failure from multiple-callback handling-behavior\n            onError();\n            // test failure from ajax handling-behavior\n            options = { url: '/undefined' };\n            local.ajax(options, onError);\n            // test failure from thrown error handling-behavior\n            throw local.errorDefault;\n        };\n\n        local.testCase_FormData_default = function (options, onError) {\n        /*\n         * this function will test FormData's default handling-behavior\n         */\n            options = {};\n            options.blob1 = new local.Blob(['aa', 'bb', '\\u1234 ', 0]);\n            options.blob2 = new local.Blob(['aa', 'bb', '\\u1234 ', 0], {\n                type: 'text/plain; charset=utf-8'\n            });\n            options.data = new local.FormData();\n            options.data.append('text1', 'aabb\\u1234 0');\n            // test file-upload handling-behavior\n            options.data.append('file1', options.blob1);\n            // test file-upload and filename handling-behavior\n            options.data.append('file2', options.blob2, 'filename2.txt');\n            options.method = 'POST';\n            options.url = '/test.echo';\n            local.ajax(options, function (error, xhr) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // validate responseText\n                local.assert(xhr.responseText.indexOf(\n                    '\\r\\nContent-Disposition: form-data; ' +\n                        'name=\"text1\"\\r\\n\\r\\naabb\\u1234 0\\r\\n'\n                ) >= 0, xhr.responseText);\n                local.assert(xhr.responseText.indexOf(\n                    '\\r\\nContent-Disposition: form-data; ' +\n                        'name=\"file1\"\\r\\n\\r\\naabb\\u1234 0\\r\\n'\n                ) >= 0, xhr.responseText);\n                local.assert(xhr.responseText.indexOf(\n                    '\\r\\nContent-Disposition: form-data; name=\"file2\"; ' +\n                        'filename=\"filename2.txt\"\\r\\nContent-Type: text/plain; ' +\n                        'charset=utf-8\\r\\n\\r\\naabb\\u1234 0\\r\\n'\n                ) >= 0, xhr.responseText);\n                onError();\n            });\n        };\n\n        local.testCase_FormData_error = function (options, onError) {\n        /*\n         * this function will test FormData's error handling-behavior\n         */\n            local.testMock([\n                [local.FormData.prototype, { read: function (onError) {\n                    onError(local.errorDefault);\n                } }]\n            ], function (onError) {\n                options = {};\n                options.data = new local.FormData();\n                options.method = 'POST';\n                options.url = '/test.echo';\n                local.ajax(options, function (error) {\n                    // validate error occurred\n                    local.assert(error, error);\n                    onError();\n                });\n            }, onError);\n        };\n\n        local.testCase_FormData_nullCase = function (options, onError) {\n        /*\n         * this function will test FormData's null-case handling-behavior\n         */\n            options = {};\n            options.data = new local.FormData();\n            options.method = 'POST';\n            options.url = '/test.echo';\n            local.ajax(options, function (error, xhr) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // validate responseText\n                local.assert((/\\r\\n\\r\\n$/).test(xhr.responseText), xhr.responseText);\n                onError();\n            });\n        };\n\n        local.testCase_ajaxProgressUpdate_misc = function (options, onError) {\n        /*\n         * this function will test ajaxProgressUpdate's misc handling-behavior\n         */\n            options = {};\n            options.ajaxProgressDiv1 = local.modeJs === 'browser' &&\n                document.querySelector('#ajaxProgressDiv1');\n            if (!options.ajaxProgressDiv1) {\n                onError();\n                return;\n            }\n            local.testMock([\n                // test testRunDefault's no modeTest handling-behavior\n                [local.global, { setTimeout: function (fnc) {\n                    fnc();\n                } }]\n            ], function (onError) {\n                options.ajaxProgressDiv1.style.background = 'transparent';\n                local.ajaxProgressCounter = 0;\n                local.ajaxProgressUpdate();\n                onError();\n            }, onError);\n        };\n\n        local.testCase_ajax_abort = function (options, onError) {\n        /*\n         * this function will test ajax's abort handling-behavior\n         */\n            options = local.ajax({ url: '/test.timeout' }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onError();\n            });\n            // test multiple-callback handling-behavior\n            options.onEvent({ type: 'abort' });\n            options.abort();\n            options.abort();\n        };\n\n        local.testCase_ajax_assets = function (options, onError) {\n        /*\n         * this function will test ajax's assets handling-behavior\n         */\n            options = { url: 'package.json' };\n            local.ajax(options, function (error, xhr) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // validate statusCode\n                local.assertJsonEqual(xhr.statusCode, 200);\n                onError();\n            });\n        };\n\n        local.testCase_ajax_error = function (options, onError) {\n        /*\n         * this function will test ajax's error handling-behavior\n         */\n            options = { list: [{\n                // test 404-not-found-error handling-behavior\n                url: '/test.error-404'\n            }, {\n                // test 500-internal-server-error handling-behavior\n                url: '/test.error-500'\n            }, {\n                // test undefined-error handling-behavior\n                url: '/test.error-undefined'\n            }, {\n                // test undefined https-url handling-behavior\n                timeout: 1,\n                url: 'https://undefined:0'\n            }] };\n            local.onParallelList(options, function (options, onParallel) {\n                options = options.element;\n                onParallel.counter += 1;\n                local.ajax(options, function (error, xhr) {\n                    // validate error occurred\n                    local.assert(error, error);\n                    // test getAllResponseHeaders' null-case handling-behavior\n                    xhr.getAllResponseHeaders();\n                    // test getResponseHeader' null-case handling-behavior\n                    xhr.getResponseHeader('undefined');\n                    onParallel();\n                });\n            }, onError);\n        };\n\n        local.testCase_ajax_post = function (options, onError) {\n        /*\n         * this function will test ajax's POST handling-behavior\n         */\n            options = {};\n            // test /test.body handling-behavior\n            local.onParallelList({ list: [\n                '',\n                'arraybuffer',\n                'stream',\n                'text'\n            ] }, function (responseType, onParallel) {\n                responseType = responseType.element;\n                onParallel.counter += 1;\n                local.ajax({\n                    data: responseType === 'arraybuffer'\n                        // test buffer post handling-behavior\n                        ? local.bufferCreate('aa')\n                        // test string post handling-behavior\n                        : 'aa',\n                    method: 'POST',\n                    // test nodejs response handling-behavior\n                    responseType: responseType === 'stream' && local.modeJs === 'node'\n                        ? responseType\n                        : '',\n                    url: '/test.body'\n                }, function (error, xhr) {\n                    // validate no error occurred\n                    local.assert(!error, error);\n                    // validate statusCode\n                    local.assertJsonEqual(xhr.statusCode, 200);\n                    // validate response\n                    switch (responseType) {\n                    case 'arraybuffer':\n                    case 'stream':\n                        // cleanup response\n                        local.streamListCleanup([xhr.response]);\n                        // validate response\n                        options.data = xhr.response;\n                        local.assert(options.data, options);\n                        break;\n                    default:\n                        // validate responseText\n                        options.data = xhr.responseText;\n                        local.assertJsonEqual(options.data, 'aa');\n                    }\n                    onParallel();\n                });\n            }, function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // test /test.echo handling-behavior\n                local.ajax({\n                    data:  'aa',\n                    // test request-header handling-behavior\n                    headers: { 'X-Request-Header-Test': 'aa' },\n                    method: 'POST',\n                    // test modeDebug handling-behavior\n                    modeDebug: true,\n                    url: '/test.echo'\n                }, function (error, xhr) {\n                    // validate no error occurred\n                    local.assert(!error, error);\n                    // validate statusCode\n                    local.assertJsonEqual(xhr.statusCode, 200);\n                    // validate response\n                    options.data = xhr.responseText;\n                    local.assert((/\\r\\naa$/).test(options.data), options.data);\n                    local.assert(\n                        (/\\r\\nx-request-header-test: aa\\r\\n/).test(options.data),\n                        options.data\n                    );\n                    // validate responseHeaders\n                    options.data = xhr.getAllResponseHeaders();\n                    local.assert(\n                        (/^X-Response-Header-Test: bb\\r\\n/im).test(options.data),\n                        options.data\n                    );\n                    options.data = xhr.getResponseHeader('x-response-header-test');\n                    local.assertJsonEqual(options.data, 'bb');\n                    options.data = xhr.getResponseHeader('undefined');\n                    local.assertJsonEqual(options.data, null);\n                    onError();\n                });\n            });\n        };\n\n        local.testCase_ajax_timeout = function (options, onError) {\n        /*\n         * this function will test ajax's timeout handling-behavior\n         */\n            options = { timeout: 1, url: '/test.timeout' };\n            setTimeout(function () {\n                local.ajax(options, function (error) {\n                    // validate error occurred\n                    local.assert(error, error);\n                    onError();\n                });\n            }, 1000);\n        };\n\n        local.testCase_assertXxx_default = function (options, onError) {\n        /*\n         * this function will test assertXxx's default handling-behavior\n         */\n            options = {};\n            // test assertion passed\n            local.assert(true, true);\n            // test assertion failed with undefined message\n            local.tryCatchOnError(function () {\n                local.assert(null);\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                // validate error-message\n                local.assertJsonEqual(error.message, '');\n            });\n            // test assertion failed with string message\n            local.tryCatchOnError(function () {\n                local.assert(null, 'aa');\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                // validate error-message\n                local.assertJsonEqual(error.message, 'aa');\n            });\n            // test assertion failed with error object\n            local.tryCatchOnError(function () {\n                local.assert(null, local.errorDefault);\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n            });\n            // test assertion failed with json object\n            local.tryCatchOnError(function () {\n                local.assert(null, { aa: 1 });\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                // validate error-message\n                local.assertJsonEqual(error.message, '{\"aa\":1}');\n            });\n            options.list = ['', 0, false, null, undefined];\n            options.list.forEach(function (aa, ii) {\n                options.list.forEach(function (bb, jj) {\n                    if (ii === jj) {\n                        // test assertJsonEqual's handling-behavior\n                        local.assertJsonEqual(aa, bb);\n                    } else {\n                        // test assertJsonNotEqual's handling-behavior\n                        local.assertJsonNotEqual(aa, bb);\n                    }\n                });\n            });\n            onError();\n        };\n\n        local.testCase_base64Xxx_default = function (options, onError) {\n        /*\n         * this function will test base64Xxx's default handling-behavior\n         */\n            options = {};\n            options.base64 = local.base64FromString(local.stringAsciiCharset + '\\u1234');\n            local.assertJsonEqual(\n                local.base64FromBuffer(local.base64ToBuffer(options.base64)),\n                options.base64\n            );\n            local.assertJsonEqual(\n                local.base64FromHex(local.base64ToHex(options.base64)),\n                options.base64\n            );\n            local.assertJsonEqual(\n                local.base64FromString(local.base64ToString(options.base64)),\n                options.base64\n            );\n            onError();\n        };\n\n        local.testCase_blobRead_default = function (options, onError) {\n        /*\n         * this function will test blobRead's default handling-behavior\n         */\n            options = { list: [\n                new local.Blob(['aa', 'bb', '\\u1234 ', 0]),\n                new local.Blob(['aa', 'bb', '\\u1234 ', 0], {\n                    type: 'text/plain; charset=utf-8'\n                })\n            ] };\n            local.onParallelList(options, function (options, onParallel) {\n                onParallel.counter += 1;\n                [null, 'dataURL', 'text'].forEach(function (encoding) {\n                    onParallel.counter += 1;\n                    local.blobRead(options.element, encoding, function (error, data) {\n                        // validate no error occurred\n                        local.assert(!error, error);\n                        // validate data\n                        switch (encoding) {\n                        case 'dataURL':\n                            if (options.ii === 0) {\n                                local.assertJsonEqual(data, 'data:;base64,YWFiYuGItCAw');\n                                break;\n                            }\n                            local.assertJsonEqual(\n                                data,\n                                'data:text/plain; charset=utf-8;base64,YWFiYuGItCAw'\n                            );\n                            break;\n                        case 'text':\n                            local.assertJsonEqual(data, 'aabb\\u1234 0');\n                            break;\n                        default:\n                            local.assertJsonEqual(\n                                local.bufferToString(data),\n                                'aabb\\u1234 0'\n                            );\n                        }\n                        onParallel();\n                    });\n                });\n                onParallel();\n            }, onError);\n        };\n\n        local.testCase_bufferCreate_default = function (options, onError) {\n        /*\n         * this function will test bufferCreate's default handling-behavior\n         */\n            options = {};\n            options.text1 = '';\n            for (options.ii = 0; options.ii < 0x10000; options.ii += 1) {\n                options.text1 += String.fromCodePoint(options.ii);\n            }\n            for (options.ii = 0x10000; options.ii < 0x110000; options.ii += 0x100) {\n                options.text1 += String.fromCodePoint(options.ii);\n            }\n            // test utf8 handling-behavior\n            options.bff1 = local.bufferCreate(options.text1);\n            options.text2 = local.bufferToString(options.bff1);\n            local.assertJsonEqual(options.text2, local.bufferToString(options.text2));\n            onError();\n        };\n\n        local.testCase_bufferCreate_polyfill = function (options, onError) {\n        /*\n         * this function will test bufferCreate's polyfill handling-behavior\n         */\n            options = [\n                [local.global, { TextDecoder: null, TextEncoder: null }]\n            ];\n            // test exit's default handling-behavior\n            local.testMock(options, function (onError) {\n                local.testCase_bufferCreate_default(null, onError);\n            }, onError);\n        };\n\n        local.testCase_bufferIndexOfSubBuffer_default = function (options, onError) {\n        /*\n         * this function will test bufferIndexOfSubBuffer's default handling-behavior\n         */\n            [\n                { buffer: '', subBuffer: '', validate: 0 },\n                { buffer: '', subBuffer: 'aa', validate: -1 },\n                { buffer: 'aa', subBuffer: '', validate: 0 },\n                { buffer: 'aa', subBuffer: 'aa', validate: 0 },\n                { buffer: 'aa', subBuffer: 'bb', validate: -1 },\n                { buffer: 'aaaa', subBuffer: 'aa', validate: 0 },\n                { buffer: 'aabb', subBuffer: 'aa', validate: 0 },\n                { buffer: 'aabb', subBuffer: 'bb', validate: 2 },\n                { buffer: 'aabbaa', subBuffer: 'aa', validate: 0 },\n                { buffer: 'aabbaa', subBuffer: 'bb', validate: 2 },\n                { buffer: 'aabbaa', subBuffer: 'ba', validate: 3 }\n            ].forEach(function (_) {\n                options = _;\n                options.data = local.bufferIndexOfSubBuffer(\n                    local.bufferCreate(options.buffer),\n                    local.bufferCreate(options.subBuffer),\n                    options.fromIndex\n                );\n                local.assertJsonEqual(options.data, options.validate);\n            });\n            onError();\n        };\n\n        local.testCase_dbTableTravisOrgUpdate_default = function (options, onError) {\n        /*\n         * this function will test dbTableTravisOrgUpdate's default handling-behavior\n         */\n            options = [\n                [local, {\n                    ajax: function (options, onError) {\n                        onError(null, {\n                            responseText: JSON.stringify({\n                                '@pagination': { count: 0 },\n                                repositories: [{\n                                    _id: '',\n                                    private: false,\n                                    slug: 'aa/node-aa-'\n                                }]\n                            })\n                        }, options);\n                    },\n                    db: {\n                        crudSetManyById: function (options, onError) {\n                            onError(null, options);\n                        },\n                        dbTableCreateOne: function (options, onError) {\n                            onError(null, local.db, options);\n                            return local.db;\n                        }\n                    },\n                    setTimeoutOnError: function (onError, error) {\n                        onError(error);\n                    }\n                }]\n            ];\n            local.testMock(options, function (onError) {\n                local.dbTableTravisOrgUpdate({ githubOrg: 'aa' }, onError);\n            }, onError);\n        };\n\n        local.testCase_debug_inline_default = function (options, onError) {\n        /*\n         * this function will test debug_inline's default handling-behavior\n         */\n            options = {};\n            local.testMock([\n                // suppress console.error\n                [console, { error: function (arg) {\n                    options.data += (arg || '') + '\\n';\n                } }]\n            ], function (onError) {\n                options.data = '';\n                local.global['debug_inline'.replace('_i', 'I')]('aa');\n                // validate data\n                local.assertJsonEqual(\n                    options.data,\n                    '\\n\\n\\ndebug_inline\\naa\\n\\n'.replace('_i', 'I')\n                );\n                onError();\n            }, onError);\n        };\n\n        local.testCase_echo_default = function (options, onError) {\n        /*\n         * this function will test echo's default handling-behavior\n         */\n            options = {};\n            options.data = local.echo('aa');\n            local.assertJsonEqual(options.data, 'aa');\n            onError();\n        };\n\n        local.testCase_exit_default = function (options, onError) {\n        /*\n         * this function will exit's default handling-behavior\n         */\n            options = [\n                // suppress console.error\n                [console, { error: local.nop }]\n            ];\n            // test exit's default handling-behavior\n            local.testMock(options, function (onError) {\n                // test invalid exit-code handling-behavior\n                local.exit('invalid exit-code');\n                onError();\n            }, onError);\n        };\n\n        local.testCase_isNullOrUndefined_default = function (options, onError) {\n        /*\n         * this function will test isNullOrUndefined's default handling-behavior\n         */\n            options = {};\n            options.data = local.isNullOrUndefined(null);\n            // validate data\n            local.assertJsonEqual(options.data, true);\n            options.data = local.isNullOrUndefined(undefined);\n            // validate data\n            local.assertJsonEqual(options.data, true);\n            options.data = local.isNullOrUndefined(false);\n            // validate data\n            local.assertJsonEqual(options.data, false);\n            onError();\n        };\n\n        local.testCase_jslintAndPrintConditional_default = function (options, onError) {\n        /*\n         * this function will test jslintAndPrintConditional's default handling-behavior\n         */\n            options = [\n                // suppress console.error\n                [console, { error: local.nop }],\n                [local.jslint, { errorText: '' }]\n            ];\n            local.testMock(options, function (onError) {\n                // test no csslint handling-behavior\n                local.jslintAndPrintConditional('no csslint', 'empty.css');\n                // validate no error occurred\n                local.assert(!local.jslint.errorText, local.jslint.errorText);\n                // test csslint passed handling-behavior\n                local.jslintAndPrintConditional(\n                    '/*csslint*/\\nbody { font: normal; }',\n                    'passed.css',\n                    'force'\n                );\n                // validate no error occurred\n                local.assert(!local.jslint.errorText, local.jslint.errorText);\n                // test no jslint handling-behavior\n                local.jslintAndPrintConditional('no jslint', 'empty.js');\n                // validate no error occurred\n                local.assert(!local.jslint.errorText, local.jslint.errorText);\n                // test jslint passed handling-behavior\n                local.jslintAndPrintConditional(\n                    '/*jslint node: true*/\\nconsole.log(\"aa\");',\n                    'passed.js',\n                    'force'\n                );\n                // validate no error occurred\n                local.assert(!local.jslint.errorText, local.jslint.errorText);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_jsonCopy_default = function (options, onError) {\n        /*\n         * this function will test jsonCopy's default handling-behavior\n         */\n            options = {};\n            // test various data-type handling-behavior\n            [undefined, null, false, true, 0, 1, 1.5, 'a'].forEach(function (element) {\n                options.data = local.jsonCopy(element);\n                local.assertJsonEqual(options.data, element);\n            });\n            onError();\n        };\n\n        local.testCase_jsonStringifyOrdered_default = function (options, onError) {\n        /*\n         * this function will test jsonStringifyOrdered's default handling-behavior\n         */\n            options = {};\n            // test data-type handling-behavior\n            [undefined, null, false, true, 0, 1, 1.5, 'a', {}, []].forEach(function (data) {\n                options.aa = local.jsonStringifyOrdered(data);\n                options.bb = JSON.stringify(data);\n                local.assertJsonEqual(options.aa, options.bb);\n            });\n            // test data-ordering handling-behavior\n            options = {\n                // test nested dict handling-behavior\n                ff: { hh: 2, gg: 1},\n                // test nested array handling-behavior\n                ee: [1, null, undefined],\n                dd: local.nop,\n                cc: undefined,\n                bb: null,\n                aa: 1\n            };\n            // test circular-reference handling-behavior\n            options.zz = options;\n            local.assertJsonEqual(\n                options,\n                { aa: 1, bb: null, ee: [ 1, null, null ], ff: { gg: 1, hh: 2 } }\n            );\n            onError();\n        };\n\n        local.testCase_jwtA256GcmXxx_default = function (options, onError) {\n        /*\n         * this function will test jwtA256GcmXxx's default handling-behavior\n         */\n            options = {};\n            options.key = local.jwtAes256KeyCreate();\n            // use canonical example at https://jwt.io/\n            options.data = { sub: '1234567890', name: 'John Doe', admin: true };\n            options.data = local.jwtNormalize(options.data);\n            options.data = JSON.parse(local.jsonStringifyOrdered(options.data));\n            // encrypt token\n            options.token = local.jwtA256GcmEncrypt(options.data, options.key);\n            // validate encrypted-token\n            local.assertJsonEqual(\n                local.jwtA256GcmDecrypt(options.token, options.key),\n                options.data\n            );\n            // test decryption-failed handling-behavior\n            local.assertJsonEqual(local.jwtA256GcmDecrypt(options.token, null), {});\n            onError();\n        };\n\n        local.testCase_jwtHs256Xxx_default = function (options, onError) {\n        /*\n         * this function will test jwtHs256Xxx's default handling-behavior\n         */\n            options = {};\n            options.key = local.jwtBase64UrlNormalize(local.base64FromString('secret'));\n            // use canonical example at https://jwt.io/\n            options.data = { sub: '1234567890', name: 'John Doe', admin: true };\n            options.token = local.jwtHs256Encode(options.data, options.key);\n            // validate encoded-token\n            local.assertJsonEqual(\n                options.token,\n                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9' +\n                    '.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9' +\n                    '.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ'\n            );\n            options.data = local.jwtHs256Decode(options.token, options.key);\n            // validate decoded-data\n            local.assertJsonEqual(\n                options.data,\n                { admin: true, name: 'John Doe', sub: '1234567890' }\n            );\n            // test decoding-failed handling-behavior\n            options.data = local.jwtHs256Decode(options.token, 'undefined');\n            local.assertJsonEqual(options.data, {});\n            onError();\n        };\n\n        local.testCase_listGetElementRandom_default = function (options, onError) {\n        /*\n         * this function will test listGetRandom's default handling-behavior\n         */\n            options = {};\n            // init list\n            options.list = ['aa', 'bb', 'cc', 'dd'];\n            options.elementDict = {};\n            // get 100 random elements from list\n            for (options.ii = 0; options.ii < 1024; options.ii += 1) {\n                options.elementDict[local.listGetElementRandom(options.list)] = true;\n            }\n            // validate all elements were retrieved from list\n            local.assertJsonEqual(\n                Object.keys(options.elementDict).sort(),\n                ['aa', 'bb', 'cc', 'dd']\n            );\n            onError();\n        };\n\n        local.testCase_listShuffle_default = function (options, onError) {\n        /*\n         * this function will test listShuffle's default handling-behavior\n         */\n            options = {};\n            // init list\n            options.list = '[0,1]';\n            // shuffle list 100 times\n            for (options.ii = 0; options.ii < 100; options.ii += 1) {\n                options.listShuffled =\n                    JSON.stringify(local.listShuffle(JSON.parse(options.list)));\n                // validate shuffled list\n                local.assertJsonEqual(options.listShuffled.length, options.list.length);\n                options.changed = options.changed || options.listShuffled !== options.list;\n            }\n            // validate list changed at least once during the shuffle\n            local.assert(options.changed, options);\n            onError();\n        };\n\n        local.testCase_normalizeXxx_default = function (options, onError) {\n        /*\n         * this function will test normalizeXxx's default handling-behavior\n         */\n            options = {};\n            // test normalizeDict handling-behavior\n            options.data = local.normalizeDict({ aa: 1 });\n            local.assertJsonEqual(options.data, { aa: 1 });\n            options.data = local.normalizeDict(null);\n            local.assertJsonEqual(options.data, {});\n            options.data = local.normalizeDict([]);\n            local.assertJsonEqual(options.data, {});\n            // test normalizeList handling-behavior\n            options.data = local.normalizeList([1]);\n            local.assertJsonEqual(options.data, [1]);\n            options.data = local.normalizeList(null);\n            local.assertJsonEqual(options.data, []);\n            options.data = local.normalizeList({});\n            local.assertJsonEqual(options.data, []);\n            // test normalizeText handling-behavior\n            options.data = local.normalizeText('aa');\n            local.assertJsonEqual(options.data, 'aa');\n            options.data = local.normalizeText(null);\n            local.assertJsonEqual(options.data, '');\n            options.data = local.normalizeText({});\n            local.assertJsonEqual(options.data, '');\n            onError();\n        };\n\n        local.testCase_objectGetElementFirst_default = function (options, onError) {\n        /*\n         * this function will test objectGetElementFirst's default handling-behavior\n         */\n            options = { aa: 1, bb: 2 };\n            local.assertJsonEqual(\n                local.objectGetElementFirst(options),\n                { key: 'aa', value: 1 }\n            );\n            onError();\n        };\n\n        local.testCase_objectKeysTypeOf_default = function (options, onError) {\n        /*\n         * this function will test objectKeysTypeOf's default handling-behavior\n         */\n            options = {\n                aa: true,\n                bb: local.nop,\n                cc: 0,\n                dd: null,\n                ee: '',\n                ff: undefined\n            };\n            options = local.objectKeysTypeof(options);\n            local.assertJsonEqual(\n                options,\n                'boolean aa\\nfunction bb\\nnumber cc\\nobject dd\\nstring ee\\nundefined ff'\n            );\n            onError();\n        };\n\n        local.testCase_objectLiteralize_default = function (options, onError) {\n        /*\n         * this function will test objectLiteralize's default handling-behavior\n         */\n            options = local.objectLiteralize({\n                '': '$[]',\n                '$[]1': [1, { '$[]2': [2, 3] }]\n            });\n            // validate options\n            local.assertJsonEqual(options, { 1: { 2: 3 }, '': '$[]' });\n            onError();\n        };\n\n        local.testCase_objectSetDefault_default = function (options, onError) {\n        /*\n         * this function will test objectSetDefault's default handling-behavior\n         */\n            // test null-case handling behavior\n            local.objectSetDefault();\n            local.objectSetDefault({});\n            // test falsey handling-behavior\n            ['', 0, false, null, undefined].forEach(function (aa) {\n                ['', 0, false, null, undefined].forEach(function (bb) {\n                    local.assertJsonEqual(\n                        local.objectSetDefault({ data: aa }, { data: bb }).data,\n                        bb === undefined\n                            ? aa\n                            : bb\n                    );\n                });\n            });\n            // test non-recursive handling-behavior\n            options = local.objectSetDefault(\n                { aa: 0, bb: { cc: 1 }, cc: { dd: {} }, dd: [1, 1], ee: [1, 1] },\n                { aa: 2, bb: { dd: 2 }, cc: { dd: { ee: 2 } }, dd: [2, 2], ee: { ff: 2 } },\n                // test default-depth handling-behavior\n                null\n            );\n            // validate options\n            local.assertJsonEqual(\n                options,\n                { aa: 2, bb: { cc: 1 }, cc: { dd: {} }, dd: [1, 1], ee: [1, 1] }\n            );\n            // test recursive handling-behavior\n            options = local.objectSetDefault(\n                { aa: 0, bb: { cc: 1 }, cc: { dd: {} }, dd: [1, 1], ee: [1, 1] },\n                { aa: 2, bb: { dd: 2 }, cc: { dd: { ee: 2 } }, dd: [2, 2], ee: { ff: 2 } },\n                // test depth handling-behavior\n                2\n            );\n            // validate options\n            local.assertJsonEqual(\n                options,\n                { aa: 2, bb: { cc: 1, dd: 2 }, cc: { dd: {} }, dd: [1, 1], ee: [1, 1] }\n            );\n            onError();\n        };\n\n        local.testCase_objectSetOverride_default = function (options, onError) {\n        /*\n         * this function will test objectSetOverride's default handling-behavior\n         */\n            // test null-case handling behavior\n            local.objectSetOverride();\n            local.objectSetOverride({});\n            // test falsey handling-behavior\n            ['', 0, false, null, undefined].forEach(function (aa) {\n                ['', 0, false, null, undefined].forEach(function (bb) {\n                    local.assertJsonEqual(\n                        local.objectSetOverride({ data: aa }, { data: bb }).data,\n                        bb === undefined\n                            ? aa\n                            : bb\n                    );\n                });\n            });\n            // test non-recursive handling-behavior\n            options = local.objectSetOverride(\n                { aa: 1, bb: { cc: 1 }, cc: { dd: 1 }, dd: [1, 1], ee: [1, 1] },\n                { aa: 2, bb: { dd: 2 }, cc: { ee: 2 }, dd: [2, 2], ee: { ff: 2 } },\n                // test default-depth handling-behavior\n                null\n            );\n            // validate options\n            local.assertJsonEqual(\n                options,\n                { aa: 2, bb: { dd: 2 }, cc: { ee: 2 }, dd: [2, 2], ee: { ff: 2 } }\n            );\n            // test recursive handling-behavior\n            options = local.objectSetOverride(\n                { aa: 1, bb: { cc: 1 }, cc: { dd: 1 }, dd: [1, 1], ee: [1, 1] },\n                { aa: 2, bb: { dd: 2 }, cc: { ee: 2 }, dd: [2, 2], ee: { ff: 2 } },\n                // test depth handling-behavior\n                2\n            );\n            // validate options\n            local.assertJsonEqual(\n                options,\n                { aa: 2, bb: { cc: 1, dd: 2 }, cc: { dd: 1, ee: 2 }, dd: [2, 2], ee: { ff: 2 } }\n            );\n            // test env with empty-string handling-behavior\n            options = local.objectSetOverride(\n                local.env,\n                { 'emptyString': null },\n                // test default-depth handling-behavior\n                null,\n                local.env\n            );\n            // validate options\n            local.assertJsonEqual(options.emptyString, '');\n            onError();\n        };\n\n        local.testCase_objectTraverse_default = function (options, onError) {\n        /*\n         * this function will test objectTraverse's default handling-behavior\n         */\n            options = { aa: null, bb: 2, cc: { dd: 4, ee: [5, 6, 7] } };\n            // test circular-reference handling-behavior\n            options.data = options;\n            local.objectTraverse(options, function (element) {\n                if (element && typeof element === 'object' && !Array.isArray(element)) {\n                    element.zz = true;\n                }\n            });\n            // validate options\n            local.assertJsonEqual(\n                options,\n                { aa: null, bb: 2, cc: { dd: 4, ee: [5, 6, 7], zz: true }, zz: true }\n            );\n            onError();\n        };\n\n        local.testCase_onErrorDefault_default = function (options, onError) {\n        /*\n         * this function will test onErrorDefault's default handling-behavior\n         */\n            local.testMock([\n                // suppress console.error\n                [console, { error: function (arg) {\n                    options = arg;\n                } }],\n                [local.global, { __coverage__: null }]\n            ], function (onError) {\n                // test no error handling-behavior\n                local.onErrorDefault();\n                // validate options\n                local.assert(!options, options);\n                // test error handling-behavior\n                local.onErrorDefault(local.errorDefault);\n                // validate options\n                local.assert(options, options);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_onErrorThrow_error = function (options, onError) {\n        /*\n         * this function will test onErrorThrow's error handling-behavior\n         */\n            local.tryCatchOnError(function () {\n                options = {};\n                options.error = new Error();\n                local.onErrorThrow(options.error);\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onError();\n            });\n        };\n\n        local.testCase_onNext_error = function (options, onError) {\n        /*\n         * this function will test onNext's error handling-behavior\n         */\n\n            options = {};\n            local.onNext(options, function () {\n                throw local.errorDefault;\n            });\n            options.modeNext = 0;\n            local.tryCatchOnError(function () {\n                options.onNext();\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onError();\n            });\n        };\n\n        local.testCase_onParallelList_default = function (options, onError) {\n        /*\n         * this function will test onParallelList's default handling-behavior\n         */\n            options = {};\n            local.onNext(options, function (error) {\n                switch (options.modeNext) {\n                case 1:\n                    // test null-case handling-behavior\n                    local.onParallelList({ list: [] }, local.onErrorThrow, options.onNext);\n                    break;\n                case 2:\n                    options.list = [null];\n                    // test retryLimit handling-behavior\n                    options.retryLimit = 1;\n                    local.onParallelList(options, function (data, onParallel) {\n                        onParallel.counter += 1;\n                        // test error handling-behavior\n                        onParallel(local.errorDefault, data);\n                        // test multiple callback handling behavior\n                        setTimeout(onParallel, 5000);\n                    }, function (error) {\n                        // validate error occurred\n                        local.assert(error, error);\n                        options.onNext();\n                    });\n                    break;\n                case 3:\n                    options.data = [];\n                    // test rateLimit handling-behavior\n                    options.rateLimit = 3;\n                    options.rateMax = 0;\n                    // test retryLimit handling-behavior\n                    options.retryLimit = 1;\n                    local.onParallelList({\n                        list: [1, 2, 3, 4, 5],\n                        rateLimit: options.rateLimit\n                    }, function (data, onParallel) {\n                        onParallel.counter += 1;\n                        options.rateMax = Math.max(onParallel.counter, options.rateMax);\n                        // test async handling-behavior\n                        setTimeout(function () {\n                            options.data[data.ii] = data.element;\n                            onParallel(data.retry < 1 && local.onErrorDefault, data);\n                        });\n                    }, options.onNext, options.rateLimit);\n                    break;\n                case 4:\n                    // validate data\n                    local.assertJsonEqual(options.data, [1, 2, 3, 4, 5]);\n                    local.assertJsonEqual(options.rateMax, 3);\n                    options.data = [];\n                    options.rateLimit = 'syntax error';\n                    options.rateMax = 0;\n                    local.onParallelList({\n                        list: [1, 2, 3, 4, 5],\n                        rateLimit: options.rateLimit\n                    }, function (data, onParallel) {\n                        // test sync handling-behavior\n                        onParallel.counter += 1;\n                        options.rateMax = Math.max(onParallel.counter, options.rateMax);\n                        options.data[data.ii] = data.element;\n                        onParallel();\n                    }, options.onNext);\n                    break;\n                case 5:\n                    // validate data\n                    local.assertJsonEqual(options.data, [1, 2, 3, 4, 5]);\n                    local.assertJsonEqual(options.rateMax, 2);\n                    options.onNext();\n                    break;\n                default:\n                    onError(error);\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.testCase_onParallel_default = function (options, onError) {\n        /*\n         * this function will test onParallel's default handling-behavior\n         */\n            var onParallel, onParallelError;\n            // jslint-hack\n            local.nop(options);\n            // test onEach handling-behavior\n            onParallel = local.onParallel(onError, function () {\n                // validate counter\n                local.assert(onParallel.counter >= 0, onParallel);\n            });\n            onParallel.counter += 1;\n            // test multiple-task handling-behavior\n            onParallel.counter += 1;\n            setTimeout(function () {\n                onParallelError = local.onParallel(function (error) {\n                    // validate error occurred\n                    local.assert(error, error);\n                    onParallel();\n                });\n                onParallelError.counter += 1;\n                // test error handling-behavior\n                onParallelError.counter += 1;\n                onParallelError(local.errorDefault);\n                // test ignore-after-error handling-behavior\n                onParallelError();\n            });\n            // test default handling-behavior\n            onParallel();\n        };\n\n        local.testCase_onTimeout_timeout = function (options, onError) {\n        /*\n         * this function will test onTimeout's timeout handling-behavior\n         */\n            options = local.timeElapsedStart();\n            local.onTimeout(function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                // validate error message\n                local.assert(\n                    error.message.indexOf('testCase_onTimeout_errorTimeout') >= 0,\n                    error\n                );\n                // poll timeElapsed\n                local.timeElapsedPoll(options);\n                // validate timeElapsed passed is greater than timeout\n                local.assert(options.timeElapsed >= 1500, options);\n                onError();\n            // coverage-hack - use 1500 ms to cover setInterval\n            }, 1500, function () {\n                return 'testCase_onTimeout_errorTimeout';\n            });\n        };\n\n        local.testCase_profileXxx_default = function (options, onError) {\n        /*\n         * this function will test profileXxx's default handling-behavior\n         */\n            options = {};\n            // test profileSync's handling-behavior\n            options.timeElapsed = local.profileSync(function () {\n                return;\n            });\n            // validate timeElapsed\n            local.assert(\n                0 <= options.timeElapsed && options.timeElapsed < 1000,\n                options.timeElapsed\n            );\n            // test profile's async handling-behavior\n            local.profile(function (onError) {\n                setTimeout(onError);\n            }, function (error, timeElapsed) {\n                // validate no error occurred\n                local.assert(!error, error);\n                options.timeElapsed = timeElapsed;\n                // validate timeElapsed\n                local.assert(0 <= options.timeElapsed &&\n                    options.timeElapsed < local.timeoutDefault, options.timeElapsed);\n                onError();\n            });\n        };\n\n        local.testCase_setTimeoutOnError_default = function (options, onError) {\n        /*\n         * this function will test setTimeoutOnError's default handling-behavior\n         */\n            options = {};\n            // test null-case handling-behavior\n            local.assertJsonEqual(local.setTimeoutOnError(), undefined);\n            // test onError handling-behavior\n            local.assertJsonEqual(local.setTimeoutOnError(onError, null, options), {});\n        };\n\n        local.testCase_sjclHashScryptXxx_default = function (options, onError) {\n        /*\n         * this function will test sjclHashScryptXxx's default handling-behavior\n         */\n            options = {};\n            // test sjclHashScryptCreate's null-case handling-behavior\n            options.data = local.sjclHashScryptCreate();\n            local.assertJsonEqual(options.data.slice(0, 10), '$s0$10801$');\n            // https://github.com/wg/scrypt\n            // test sjclHashScryptValidate's fail handling-behavior\n            options.data = local.sjclHashScryptValidate(\n                'password',\n                '$s0$80801$epIxT/h6HbbwHaehFnh/bw==' +\n                    '$l/guDhz2Q0v/D93gq0K0qtSX6FWP8pH5maAJkbIcRaEA'\n            );\n            local.assertJsonEqual(options.data, false);\n            // https://github.com/wg/scrypt\n            // test sjclHashScryptValidate's pass handling-behavior\n            options.data = local.sjclHashScryptValidate(\n                'password',\n                '$s0$80801$epIxT/h6HbbwHaehFnh/bw==' +\n                    '$l/guDhz2Q0v/D93gq0K0qtSX6FWP8pH5maAJkbIcRaE='\n            );\n            local.assertJsonEqual(options.data, true);\n            onError();\n        };\n\n        local.testCase_sjclHashSha256Create_default = function (options, onError) {\n        /*\n         * this function will test sjclHashSha256Create's default handling-behavior\n         */\n            options = {};\n            options.data = local.sjclHashSha256Create('aa');\n            local.assertJsonEqual(options.data, 'lhtt0+3jy47LqsvWjeBAzXjrLtWIkTDM60xJJo6k1QY=');\n            onError();\n        };\n\n        local.testCase_sjclHmacSha256Create_default = function (options, onError) {\n        /*\n         * this function will test sjclHmacSha256Create's default handling-behavior\n         */\n            options = {};\n            options.data = local.sjclHmacSha256Create('aa', 'bb');\n            local.assertJsonEqual(options.data, 'cgAzwbGmYMrEqU9B05ADLwtflGJxqijX5BWd2hAlcfM=');\n            onError();\n        };\n\n        local.testCase_stringHtmlSafe_default = function (options, onError) {\n        /*\n         * this function will test stringHtmlSafe's default handling-behavior\n         */\n            options = {};\n            // test undefined valueDefault handling-behavior\n            options.data = local.stringHtmlSafe('<a href=\"/undefined?aa=1&bb=2#cc\"></a>');\n            local.assertJsonEqual(\n                options.data,\n                '&#x3c;a href=&#x22;/undefined?aa=1&#x26;bb=2#cc&#x22;&#x3e;&#x3c;/a&#x3e;'\n            );\n            onError();\n        };\n\n        local.testCase_taskCreateCached_default = function (options, onError) {\n        /*\n         * this function will test taskCreateCached's default handling-behavior\n         */\n            var cacheValue, onTask, optionsCopy;\n            options = {};\n            local.onNext(options, function (error, data) {\n                switch (options.modeNext) {\n                // test no cache handling-behavior\n                case 1:\n                    onTask = function (onError) {\n                        onError(null, cacheValue);\n                    };\n                    options.cacheDict = 'testCase_taskCreateCached_default';\n                    options.key = 'memory';\n                    // cleanup memory-cache\n                    local.cacheDict[options.cacheDict] = null;\n                    cacheValue = 'aa';\n                    optionsCopy = {\n                        cacheDict: options.cacheDict,\n                        key: options.key,\n                        // test onCacheWrite handling-behavior\n                        onCacheWrite: options.onNext\n                    };\n                    local.taskCreateCached(optionsCopy, onTask, options.onNext);\n                    break;\n                case 2:\n                    // validate data\n                    local.assertJsonEqual(data, 'aa');\n                    // validate no cache-hit\n                    local.assert(!optionsCopy.modeCacheHit, optionsCopy.modeCacheHit);\n                    break;\n                // test cache with update handling-behavior\n                case 3:\n                    cacheValue = 'bb';\n                    optionsCopy = {\n                        cacheDict: options.cacheDict,\n                        key: options.key,\n                        // test modeCacheUpdate handling-behavior\n                        modeCacheUpdate: true,\n                        // test onCacheWrite handling-behavior\n                        onCacheWrite: options.onNext\n                    };\n                    local.taskCreateCached(optionsCopy, onTask, options.onNext);\n                    break;\n                case 4:\n                    // validate data\n                    local.assertJsonEqual(data, 'aa');\n                    // validate modeCacheHit\n                    local.assertJsonEqual(optionsCopy.modeCacheHit, true);\n                    break;\n                // test cache handling-behavior\n                case 5:\n                    optionsCopy = {\n                        cacheDict: options.cacheDict,\n                        key: options.key\n                    };\n                    local.taskCreateCached(optionsCopy, onTask, options.onNext);\n                    break;\n                case 6:\n                    // validate data\n                    local.assertJsonEqual(data, 'bb');\n                    // validate modeCacheHit\n                    local.assertJsonEqual(optionsCopy.modeCacheHit, true);\n                    options.onNext();\n                    break;\n                default:\n                    onError(error);\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.testCase_taskCreate_multipleCallback = function (options, onError) {\n        /*\n         * this function will test taskCreate's multiple-callback handling-behavior\n         */\n            options = { counter: 0, key: 'testCase_taskCreate_multiCallback' };\n            local.taskCreate(options, function (onError) {\n                onError();\n                // test multiple-callback handling-behavior\n                onError();\n            }, function () {\n                options.counter += 1;\n            });\n            // validate counter incremented once\n            local.assertJsonEqual(options.counter, 1);\n            onError();\n        };\n\n        local.testCase_taskCreate_upsert = function (options, onError) {\n        /*\n         * this function will test taskCreate's upsert handling-behavior\n         */\n            options = { counter: 0, key: 'testCase_taskCreate_upsert' };\n            // test upsert handling-behavior\n            [null, null].forEach(function () {\n                local.taskCreate(options, function (onError) {\n                    options.counter += 1;\n                    setTimeout(onError);\n                });\n            });\n            // validate counter incremented once\n            setTimeout(function () {\n                local.assertJsonEqual(options.counter, 1);\n                onError();\n            });\n        };\n\n        local.testCase_templateRender_default = function (options, onError) {\n        /*\n         * this function will test templateRender's default handling-behavior\n         */\n            options = {};\n            // test undefined valueDefault handling-behavior\n            options.data = local.templateRender('{{aa}}', {});\n            local.assertJsonEqual(options.data, '{{aa}}');\n            // test default handling-behavior\n            options.data = local.templateRender('{{aa alphanumeric}} ' +\n                '{{aa htmlSafe jsonStringify jsonStringify4 markdownCodeSafe ' +\n                'decodeURIComponent encodeURIComponent trim}} ' +\n                '{{bb}} {{cc}} {{dd}} {{ee.ff}}', {\n                    // test string value handling-behavior\n                    aa: '`<aa>`',\n                    // test non-string value handling-behavior\n                    bb: 1,\n                    // test null-value handling-behavior\n                    cc: null,\n                    // test undefined-value handling-behavior\n                    dd: undefined,\n                    // test nested value handling-behavior\n                    ee: { ff: 'gg' }\n                });\n            local.assertJsonEqual(\n                options.data,\n                '__aa__ %22%5C%22\\'%26%23x3c%3Baa%26%23x3e%3B\\'%5C%22%22 1 null {{dd}} gg'\n            );\n            // test partial handling-behavior\n            options.data = local.templateRender('{{#undefined aa}}\\n' +\n                'list1{{#each list1}}\\n' +\n                '    aa - {{aa}}\\n' +\n                '    list2{{#each list2}}\\n' +\n                '        bb - {{bb}}\\n' +\n                '        {{#if bb}}\\n' +\n                '        if\\n' +\n                '        {{#unless bb}}\\n' +\n                '        else\\n' +\n                '        {{/if bb}}\\n' +\n                '        {{#unless bb}}\\n' +\n                '        unless\\n' +\n                '        {{/unless bb}}\\n' +\n                '    {{/each list2}}\\n' +\n                '{{/each list1}}\\n' +\n                '{{/undefined aa}}\\n', {\n                    list1: [\n                        // test null-value handling-behavior\n                        null,\n                        {\n                            aa: 'aa',\n                            // test recursive-list handling-behavior\n                            list2: [{ bb: 'bb' }, { bb: null }]\n                        }\n                    ]\n                });\n            local.assertJsonEqual(options.data, '{{#undefined aa}}\\n' +\n                'list1\\n' +\n                '    aa - {{aa}}\\n' +\n                '    list2\\n' +\n                '\\n' +\n                '    aa - aa\\n' +\n                '    list2\\n' +\n                '        bb - bb\\n' +\n                '        \\n' +\n                '        if\\n' +\n                '        \\n' +\n                '        \\n' +\n                '    \\n' +\n                '        bb - null\\n' +\n                '        \\n' +\n                '        else\\n' +\n                '        \\n' +\n                '        \\n' +\n                '        unless\\n' +\n                '        \\n' +\n                '    \\n' +\n                '\\n' +\n                '{{/undefined aa}}\\n');\n            onError();\n        };\n\n        local.testCase_testRunDefault_nop = function (options, onError) {\n        /*\n         * this function will test testRunDefault's nop handling-behavior\n         */\n            options = {};\n            local.testMock([\n                // test testRunDefault's no modeTest handling-behavior\n                [local, { env: {}, modeTest: null }]\n            ], function (onError) {\n                local.testRunDefault(options);\n                // validate no options.onReadyAfter\n                local.assert(!options.onReadyAfter, options);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_uglify_default = function (options, onError) {\n        /*\n         * this function will test uglify's default handling-behavior\n         */\n            options = {};\n            // test css handling-behavior\n            options.data = local.uglify('body { margin: 0; }', 'aa.css');\n            // validate data\n            local.assertJsonEqual(options.data, 'body{margin:0;}');\n            // test js handling-behavior\n            options.data = local.uglify('aa = 1', 'aa.js');\n            // validate data\n            local.assertJsonEqual(options.data, 'aa=1');\n            onError();\n        };\n\n        local.testCase_urlParse_default = function (options, onError) {\n        /*\n         * this function will test urlParse's default handling-behavior\n         */\n            options = [\n                [local, {\n                    // test default PORT handling-behavior\n                    env: {},\n                    // test init-serverLocalHost handling-behavior\n                    serverLocalHost: ''\n                }]\n            ];\n            local.testMock(options, function (onError) {\n                // test default handling-behavior\n                local.assertJsonEqual(local.urlParse(\n                    'https://127.0.0.1:80/foo?aa=1&bb%20cc=dd%20=ee&aa=2&aa#zz=1'\n                ), {\n                    hash: '#zz=1',\n                    host: '127.0.0.1:80',\n                    hostname: '127.0.0.1',\n                    href: 'https://127.0.0.1:80/foo?aa=1&bb%20cc=dd%20=ee&aa=2&aa#zz=1',\n                    path: '/foo?aa=1&bb%20cc=dd%20=ee&aa=2&aa',\n                    pathname: '/foo',\n                    port: '80',\n                    protocol: 'https:',\n                    query: { aa: ['1', '2', ''], 'bb cc': 'dd =ee' },\n                    search: '?aa=1&bb%20cc=dd%20=ee&aa=2&aa'\n                });\n                // test error handling-behavior\n                local.assertJsonEqual(local.urlParse(null), {\n                    hash: '',\n                    host: '',\n                    hostname: '',\n                    href: '',\n                    path: '',\n                    pathname: '',\n                    port: '',\n                    protocol: '',\n                    query: {},\n                    search: ''\n                });\n                onError();\n            }, onError);\n        };\n\n        local.testCase_uuid4Create_default = function (options, onError) {\n        /*\n         * this function will test uuid4Create's default handling-behavior\n         */\n            options = {};\n            // test uuid4 handling-behavior\n            options.data = local.uuid4Create();\n            // validate data\n            local.assert(local.regexpUuidValidate.test(options.data), options.data);\n            onError();\n        };\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        local.testCase_blobRead_error = function (options, onError) {\n        /*\n         * this function will test blobRead's error handling-behavior\n         */\n            options = [\n                [local.global.FileReader.prototype, { readAsArrayBuffer: function () {\n                    this.onabort({ type: 'abort' });\n                    this.onerror({ type: 'error' });\n                } }]\n            ];\n            local.testMock(options, function (onError) {\n                local.blobRead(null, null, function (error) {\n                    // validate error occurred\n                    local.assert(error, error);\n                });\n                onError();\n            }, onError);\n        };\n\n        local.testCase_cookieXxx_default = function (options, onError) {\n        /*\n         * this function will test cookieXxx's default handling-behavior\n         */\n            options = {};\n            // test cookieRemoveAll handling-behavior\n            local.cookieRemoveAll();\n            // validate data\n            options.data = local.cookieDict().aa;\n            local.assertJsonEqual(options.data, undefined);\n            // test cookieSet handling-behavior\n            local.cookieSet('aa', 'bb', 1000);\n            // validate data\n            options.data = local.cookieDict().aa;\n            local.assertJsonEqual(options.data, 'bb');\n            // test cookieRemove handling-behavior\n            local.cookieRemove('aa');\n            // validate data\n            options.data = local.cookieDict().aa;\n            local.assertJsonEqual(options.data, undefined);\n            // test cookieSet handling-behavior\n            local.cookieSet('aa', 'bb', 1000);\n            // test cookieRemoveAll handling-behavior\n            local.cookieRemoveAll();\n            // validate data\n            options.data = local.cookieDict().aa;\n            local.assertJsonEqual(options.data, undefined);\n            onError();\n        };\n\n        local.testCase_domFragmentRender_default = function (options, onError) {\n        /*\n         * this function will test domFragmentRender's default handling-behavior\n         */\n            options = {};\n            options.data = local.domFragmentRender('<div>{{value}}</div>', { value: 'aa' });\n            local.assertJsonEqual(options.data.children[0].outerHTML, '<div>aa</div>');\n            onError();\n        };\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        local.testCase_ajax_cache = function (options, onError) {\n        /*\n         * this function will test ajax's cache handling-behavior\n         */\n            options = {};\n            local.onNext(options, function (error, data) {\n                switch (options.modeNext) {\n                case 1:\n                    // test http GET handling-behavior\n                    local.ajax({ url: 'assets.hello' }, options.onNext);\n                    break;\n                case 2:\n                    // validate responseText\n                    local.assertJsonEqual(data.responseText, 'hello');\n                    // test http GET 304 cache handling-behavior\n                    local.ajax({\n                        headers: {\n                            'If-Modified-Since': new Date(Date.now() + 0xffff).toGMTString()\n                        },\n                        url: 'assets.hello'\n                    }, options.onNext);\n                    break;\n                case 3:\n                    // validate statusCode\n                    local.assertJsonEqual(data.statusCode, 304);\n                    options.onNext();\n                    break;\n                default:\n                    onError(error);\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.testCase_buildApidoc_default = function (options, onError) {\n        /*\n         * this function will test buildApidoc's default handling-behavior\n         */\n            // test $npm_config_mode_coverage=all handling-behavior\n            options = null;\n            local.testMock([\n                [local.env, { npm_config_mode_coverage: 'all' }]\n            ], function (onError) {\n                local.buildApidoc(options, onError);\n            }, local.onErrorThrow);\n            // test $npm_package_buildCustomOrg handling-behavior\n            options = {};\n            local.testMock([\n                [local.env, { npm_package_buildCustomOrg: 'electron-lite' }]\n            ], function (onError) {\n                local.buildApidoc(options, onError);\n            }, local.onErrorThrow);\n            options = { blacklistDict: {} };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = function (options, onError) {\n        /*\n         * this function will test buildApp's default handling-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [{\n                file: '/assets.hello',\n                url: '/assets.hello'\n            }, {\n                file: '/assets.script_only.html',\n                url: '/assets.script_only.html'\n            }, {\n                file: '/assets.swgg.rollup.js',\n                url: '/assets.swgg.rollup.js'\n            }, {\n                file: '/assets.utility2.lib.db.js',\n                url: '/assets.utility2.lib.db.js'\n            }, {\n                file: '/assets.utility2.lib.istanbul.js',\n                url: '/assets.utility2.lib.istanbul.js'\n            }, {\n                file: '/assets.utility2.lib.jslint.js',\n                url: '/assets.utility2.lib.jslint.js'\n            }, {\n                file: '/assets.utility2.lib.sjcl.js',\n                url: '/assets.utility2.lib.sjcl.js'\n            }, {\n                file: '/assets.utility2.lib.uglifyjs.js',\n                url: '/assets.utility2.lib.uglifyjs.js'\n            }, {\n                file: '/package.json',\n                url: '/package.json'\n            }];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = function (options, onError) {\n        /*\n         * this function will test buildCustomOrg's default handling-behavior\n         */\n            options = {};\n            local.testMock([\n                [local.env, { GITHUB_ORG: '', npm_package_buildCustomOrg: 'electron-lite' }],\n                [local.fs, { writeFileSync: local.nop }],\n                [local.global, { setTimeout: function (onError) {\n                    onError();\n                } }],\n                [process, { on: function (options, onError) {\n                    // test error handling-behavior\n                    onError(local.errorDefault, options);\n                } }]\n            ], function (onError) {\n                options = {};\n                // test npmdoc handling-behavior\n                local.env.GITHUB_ORG = 'npmdoc';\n                local.buildCustomOrg(options, local.onErrorThrow);\n                // test npmtest handling-behavior\n                local.env.GITHUB_ORG = 'npmtest';\n                local.buildCustomOrg(options, local.onErrorThrow);\n                onError();\n            }, local.onErrorThrow);\n            options = {};\n            local.buildCustomOrg(options, onError);\n        };\n\n        local.testCase_buildLib_default = function (options, onError) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            options.customize = function () {\n                // search-and-replace - customize dataTo\n                [\n                    // customize js\\-env code\n                    (/[\\S\\s]*?run shared js\\-env code - pre-function/)\n                ].forEach(function (rgx) {\n                    options.dataFrom.replace(rgx, function (match0) {\n                        options.dataTo = options.dataTo.replace(rgx, match0);\n                    });\n                });\n            };\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = function (options, onError) {\n        /*\n         * this function will test buildReadme's default handling-behavior\n         */\n            // test $npm_package_buildCustomOrg handling-behavior\n            options = {};\n            local.testMock([\n                [local.env, { npm_package_buildCustomOrg: 'electron-lite' }]\n            ], function (onError) {\n                local.buildReadme(options, onError);\n            }, local.onErrorThrow);\n            options = {};\n            options.customize = function () {\n                // search-and-replace - customize dataTo\n                [\n                    // customize quickstart-example.sh\n                    new RegExp('\\\\n- commit history may be rewritten\\\\n[\\\\S\\\\s]*\\\\n#### ' +\n                        'to run this example, follow the instruction in the script below\\\\n'),\n                    // customize quickstart-instruction\n                    (/\\ninstruction[^`]*?\\n\\n/),\n                    // customize quickstart-footer\n                    (/download standalone app[^`]*?utility2FooterDiv/),\n                    (/```[^`]*?# package.json/),\n                    // customize build-script\n                    (/# run shBuildCi[^`]*?```/)\n                ].forEach(function (rgx) {\n                    options.dataFrom.replace(rgx, function (match0) {\n                        options.dataTo = options.dataTo.replace(rgx, match0);\n                    });\n                });\n            };\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = function (options, onError) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            options.customize = function () {\n                // search-and-replace - customize dataTo\n                [\n                    // customize js\\-env code\n                    (/\\n {4}\\/\\/ run shared js\\-env code - pre-init\\n[\\S\\s]*?\\n {4}\\}\\(\\)\\);/),\n                    (/\\n {4}\\/\\/ run browser js\\-env code - post-init\\n[\\S\\s]*?\\n {8}break;\\n/),\n                    (/\\n {4}\\/\\/ run node js\\-env code - post-init\\n[\\S\\s]*?\\n {8}break;\\n/)\n                ].forEach(function (rgx) {\n                    options.dataFrom.replace(rgx, function (match0) {\n                        options.dataTo = options.dataTo.replace(rgx, match0);\n                    });\n                });\n            };\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_fsWriteFileWithMkdirpSync_default = function (options, onError) {\n        /*\n         * this function will test fsWriteFileWithMkdirpSync's default handling-behavior\n         */\n            options = {};\n            local.fsRmrSync('tmp/build/testCase_fsWriteFileWithMkdirpSync_default');\n            options.data = local.tryCatchReadFile(\n                'tmp/build/testCase_fsWriteFileWithMkdirpSync_default/aa.txt',\n                'utf8'\n            );\n            // validate data\n            local.assertJsonEqual(options.data, '');\n            local.fsWriteFileWithMkdirpSync(\n                'tmp/build/testCase_fsWriteFileWithMkdirpSync_default/aa.txt',\n                'aa'\n            );\n            options.data = local.tryCatchReadFile(\n                'tmp/build/testCase_fsWriteFileWithMkdirpSync_default/aa.txt',\n                'utf8'\n            );\n            // validate data\n            local.assertJsonEqual(options.data, 'aa');\n            onError();\n        };\n\n        local.testCase_httpRequest_default = function (options, onError) {\n        /*\n         * this function will test httpRequest's default handling-behavior\n         */\n            var onParallel;\n            onParallel = local.onParallel(onError);\n            onParallel.counter += 1;\n            options = {};\n            // test default handling-behavior\n            onParallel.counter += 1;\n            local.httpRequest({\n                data:  'aa',\n                // test request-header handling-behavior\n                headers: { 'X-Request-Header-Test': 'aa' },\n                method: 'POST',\n                url: local.serverLocalHost + '/test.echo'\n            }, function (error, response) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // validate response.statusCode\n                local.assertJsonEqual(response.statusCode, 200);\n                // validate response.headers\n                local.assertJsonEqual(response.headers['x-response-header-test'], 'bb');\n                // validate response.data\n                options.data = response.data.toString();\n                local.assert((/\\r\\naa$/).test(options.data), options.data);\n                local.assert(\n                    (/\\r\\nx-request-header-test: aa\\r\\n/).test(options.data),\n                    options.data\n                );\n                onParallel();\n            });\n            // test error handling-behavior\n            onParallel.counter += 1;\n            local.httpRequest({\n                url: local.serverLocalHost + '/test.error-404'\n            }, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onParallel();\n            });\n            // test timeout handling-behavior\n            onParallel.counter += 1;\n            setTimeout(function () {\n                local.httpRequest({\n                    timeout: 1,\n                    url: local.serverLocalHost + '/test.timeout'\n                }, function (error) {\n                    // validate error occurred\n                    local.assert(error, error);\n                    onParallel();\n                });\n            }, 1000);\n            onParallel();\n        };\n\n        local.testCase_libUtility2Js_standalone = function (options, onError) {\n        /*\n         * this function will test lib.utility2.js's standalone handling-behavior\n         */\n            options = {};\n            options.data = local.fs.readFileSync('lib.utility2.js', 'utf8').replace(\n                '/* istanbul instrument in package utility2 */',\n                ''\n            );\n            local.fs.writeFileSync('tmp/lib.utility2.js', options.data);\n            require('./tmp/lib.utility2.js');\n            onError();\n        };\n\n        local.testCase_middlewareForwardProxy_default = function (options, onError) {\n        /*\n         * this function will test middlewareForwardProxy's default handling-behavior\n         */\n            var onParallel;\n            onParallel = local.onParallel(onError);\n            onParallel.counter += 1;\n            // test preflight-cors handling-behavior\n            options = {\n                headers: {\n                    'access-control-request-headers': 'forward-proxy-headers,forward-proxy-url'\n                },\n                url: ''\n            };\n            onParallel.counter += 1;\n            local.ajax(options, onParallel);\n            // test forward-proxy-http handling-behavior\n            options = { headers: { 'forward-proxy-url': '/assets.hello' }, url: '' };\n            onParallel.counter += 1;\n            local.ajax(options, function (error, data) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // validate responseText\n                local.assertJsonEqual(data.responseText, 'hello');\n                onParallel();\n            });\n            // test error handling-behavior\n            options = { headers: { 'forward-proxy-url': 'https://undefined:0' }, url: '' };\n            onParallel.counter += 1;\n            local.ajax(options, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onParallel();\n            });\n            onParallel();\n        };\n\n        local.testCase_moduleDirname_default = function (options, onError) {\n        /*\n         * this function will test moduleDirname's default handling-behavior\n         */\n            options = {};\n            options.modulePathList = module.paths;\n            // test null-case handling-behavior\n            options.data = local.moduleDirname(null, options.modulePathList);\n            local.assertJsonEqual(options.data, process.cwd());\n            // test path handling-behavior\n            options.data = local.moduleDirname('.', options.modulePathList);\n            local.assertJsonEqual(options.data, process.cwd());\n            options.data = local.moduleDirname('./', options.modulePathList);\n            local.assertJsonEqual(options.data, process.cwd());\n            // test builtin-module handling-behavior\n            options.data = local.moduleDirname('fs', options.modulePathList);\n            local.assertJsonEqual(options.data, 'fs');\n            // test module exists handling-behavior\n            options.data = local.moduleDirname('electron-lite', options.modulePathList);\n            local.assert((/\\/electron-lite$/).test(options.data), options.data);\n            // test module does not exists handling-behavior\n            options.data = local.moduleDirname('syntax error', options.modulePathList);\n            local.assertJsonEqual(options.data, '');\n            onError();\n        };\n\n        local.testCase_onFileModifiedRestart_watchFile = function (options, onError) {\n        /*\n         * this function will test onFileModifiedRestart's watchFile handling-behavior\n         */\n            var onParallel;\n            options = {};\n            options.file = __filename;\n            onParallel = local.onParallel(onError);\n            onParallel.counter += 1;\n            local.fs.stat(options.file, function (error, stat) {\n                // test default watchFile handling-behavior\n                onParallel.counter += 1;\n                local.fs.utimes(options.file, stat.atime, new Date(), onParallel);\n                // test nop watchFile handling-behavior\n                onParallel.counter += 1;\n                setTimeout(function () {\n                    local.fs.utimes(options.file, stat.atime, stat.mtime, onParallel);\n                // coverage-hack - use 1500 ms to cover setInterval\n                }, 1500);\n                onParallel(error);\n            });\n        };\n\n        local.testCase_processSpawnWithTimeout_default = function (options, onError) {\n        /*\n         * this function will test processSpawnWithTimeout's default handling-behavior\n         */\n            var onParallel;\n            options = {};\n            onParallel = local.onParallel(onError);\n            onParallel.counter += 1;\n            // test default handling-behavior\n            onParallel.counter += 1;\n            local.processSpawnWithTimeout('ls')\n                .on('error', onParallel)\n                .on('exit', function (exitCode, signal) {\n                    // validate exitCode\n                    local.assertJsonEqual(exitCode, 0);\n                    // validate signal\n                    local.assertJsonEqual(signal, null);\n                    onParallel();\n                });\n            // test timeout handling-behavior\n            onParallel.counter += 1;\n            local.testMock([\n                [local, { timeoutDefault: 1000 }]\n            ], function (onError) {\n                options.childProcess = local.processSpawnWithTimeout('sleep', [5000]);\n                onError();\n            }, local.onErrorThrow);\n            options.childProcess\n                .on('error', onParallel)\n                .on('exit', function (exitCode, signal) {\n                    // validate exitCode\n                    local.assertJsonEqual(exitCode, null);\n                    // validate signal\n                    local.assertJsonEqual(signal, 'SIGKILL');\n                    onParallel();\n                });\n            onParallel();\n        };\n\n        local.testCase_replStart_default = function (options, onError) {\n        /*\n         * this function will test replStart's default handling-behavior\n         */\n            /*jslint evil: true*/\n            local.replStart();\n            // coverage-hack - test replStart's muliple-call handling-behavior\n            local.replStart();\n            options = [\n                // suppress console.error\n                [console, { error: local.nop }],\n                [local.child_process, { spawn: function () {\n                    return { on: function (event, callback) {\n                        // jslint-hack\n                        local.nop(event);\n                        callback();\n                    } };\n                } }],\n                // suppress process.stdout\n                [process.stdout, { write: local.nop }]\n            ];\n            local.testMock(options, function (onError) {\n                [\n                    // test shell handling-behavior\n                    '$ :\\n',\n                    // test git diff handling-behavior\n                    '$ git diff\\n',\n                    // test git log handling-behavior\n                    '$ git log\\n',\n                    // test grep handling-behavior\n                    'grep \\\\baa\\\\b\\n',\n                    // test keys handling-behavior\n                    'keys {}\\n',\n                    // test print handling-behavior\n                    'print\\n',\n                    // test error handling-behavior\n                    'undefined()\\n'\n                ].forEach(function (script) {\n                    local.global.utility2_serverRepl1.eval(script, null, 'repl', local.nop);\n                });\n                // coverage-hack\n                local.global.utility2_serverRepl1.nop();\n                local.global.utility2_serverRepl1.onError(local.errorDefault);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_replStart_tcp = function (options, onError) {\n        /*\n         * this function will test replStart's tcp handling-behavior\n         */\n            options = {};\n            options.data = '';\n            options.input = Math.random();\n            options.socket = local.net.createConnection(local.env.PORT_REPL);\n            options.socket.on('data', function (data) {\n            /*\n             * this function will concat data to options.data\n             */\n                options.data += data;\n            });\n            options.socket.setEncoding('utf8');\n            options.socket.on('end', function () {\n                // validate data\n                local.assert(\n                    options.data.indexOf(options.input) >= 0,\n                    JSON.stringify([options.data, options.input])\n                );\n                onError();\n            });\n            options.socket.write(options.input + '\\n');\n            // test error-handling behavior\n            options.socket.end('undefined()\\n');\n        };\n\n        local.testCase_requireExampleJsFromReadme_start = function (options, onError) {\n        /*\n         * this function will test requireExampleJsFromReadme's start handling-behavior\n         */\n            options = [\n                [local.env, {\n                    npm_config_mode_start: '1',\n                    npm_package_nameAlias: '_testCase_requireExampleJsFromReadme_start'\n                }],\n                [local.fs, {\n                    readdirSync: function () {\n                        // test jslintAndPrintConditional behavior\n                        return ['aa.css', 'aa.html', 'aa.js', 'aa.json'];\n                    }\n                }],\n                [local, {\n                    assetsDict: local.objectSetDefault({}, local.assetsDict),\n                    onFileModifiedRestart: local.nop\n                }]\n            ];\n            local.testMock(options, function (onError) {\n                options.data = local.requireExampleJsFromReadme();\n                // validate data\n                local.assert(local._testCase_requireExampleJsFromReadme_start === local);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_serverRespondTimeoutDefault_default = function (options, onError) {\n        /*\n         * this function will test serverRespondTimeoutDefault's default handling-behavior\n         */\n            options = [\n                [local, { timeoutDefault: 1000 }]\n            ];\n            local.testMock(options, function (onError) {\n                local.serverRespondTimeoutDefault(\n                    {\n                        // test default onTimeout handling-behavior\n                        onTimeout: null,\n                        url: ''\n                    },\n                    { end: local.nop, headersSent: true, on: local.nop },\n                    // test default timeout handling-behavior\n                    null\n                );\n                onError();\n            }, onError);\n        };\n\n        local.testCase_testReportCreate_default = function (options, onError) {\n        /*\n         * this function will test testReport's default handling-behavior\n         */\n            options = [\n                // suppress console.error\n                [console, { error: local.nop }],\n                [local, { exit: local.nop }]\n            ];\n            local.testMock(options, function (onError) {\n                // test exit handling-behavior\n                local.testReportCreate(local.testReport);\n                onError();\n            }, onError);\n        };\n\n        local.testCase_webpage_error = function (options, onError) {\n        /*\n         * this function will test webpage's error handling-behavior\n         */\n            options = {\n                modeCoverageMerge: true,\n                // test browserTest's modeSilent handling-behavior\n                modeSilent: true,\n                modeTestIgnore: true,\n                timeoutDefault: local.timeoutDefault - 1000,\n                url: local.serverLocalHost +\n                    // test script_only handling-behavior\n                    '/assets.script_only.html' +\n                    // test electron-callback handling-behavior\n                    '?modeTest=1&' +\n                    // test specific testCase handling-behavior\n                    // test testRunDefault's failure handling-behavior\n                    'modeTestCase=_testCase_testRunDefault_failure&' +\n                    // test timeExit handling-behavior\n                    'timeExit={{timeExit}}'\n            };\n            local.browserTest(options, function (error) {\n                // validate error occurred\n                local.assert(error, error);\n                onError();\n            });\n        };\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        // coverage-hack - re-run test-server\n        local.testRunServer(local);\n        // init test-middleware\n        local._middleware.middlewareList.push(function (request, response, nextMiddleware) {\n        /*\n         * this function will run the test-middleware\n         */\n            switch (request.urlParsed.pathname) {\n            // test http POST handling-behavior\n            case '/test.echo':\n                // test response header handling-behavior\n                local.serverRespondHeadSet(request, response, null, {\n                    'X-Response-Header-Test': 'bb'\n                });\n                local.serverRespondEcho(request, response);\n                break;\n            // test http POST handling-behavior\n            case '/test.body':\n                // test request-body-read handling-behavior\n                local.middlewareBodyRead(request, response, function () {\n                    // test multiple request-body-read handling-behavior\n                    local.middlewareBodyRead(request, response, function () {\n                        response.write(request.bodyRaw);\n                        response.end();\n                    });\n                });\n                break;\n            // test 500-internal-server-error handling-behavior\n            case '/test.error-500':\n                // test multiple-callback serverRespondHeadSet handling-behavior\n                local.serverRespondHeadSet(request, response, null, {});\n                nextMiddleware(local.errorDefault);\n                // test multiple-callback error handling-behavior\n                nextMiddleware(local.errorDefault);\n                // test onErrorDefault handling-behavior\n                local.testMock([\n                    // suppress console.error\n                    [console, { error: local.nop }]\n                ], function (onError) {\n                    var error;\n                    error = new Error('error');\n                    error.statusCode = 500;\n                    local._middlewareError(error, request, response);\n                    onError();\n                }, local.onErrorThrow);\n                break;\n            // test undefined-error handling-behavior\n            case '/test.error-undefined':\n                local.serverRespondDefault(request, response, 999);\n                break;\n            // test timeout handling-behavior\n            case '/test.timeout':\n                setTimeout(function () {\n                    response.end();\n                }, 2000);\n                break;\n            // serve file\n            default:\n                local.middlewareFileServer(request, response, nextMiddleware);\n            }\n        });\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // run the cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            return;\n        }\n        local.assetsDict['/assets.script_only.html'] = '<h1>script_only_test</h1>\\n' +\n                '<script src=\"assets.utility2.js\"></script>\\n' +\n                '<script>window.utility2.onReadyBefore.counter += 1;</script>\\n' +\n                '<script src=\"assets.example.js\"></script>\\n' +\n                '<script src=\"assets.test.js\"></script>\\n' +\n                '<script>window.utility2.onReadyBefore();</script>\\n';\n        if (process.argv[2]) {\n            // start with coverage\n            if (local.env.npm_config_mode_coverage) {\n                process.argv.splice(1, 1, __dirname + '/lib.istanbul.js', 'cover');\n                local.istanbul.cliRunIstanbul({ runMain: true });\n                return;\n            }\n            // start\n            process.argv.splice(1, 1);\n            process.argv[1] = local.path.resolve(process.cwd(), process.argv[1]);\n            local.Module.runMain();\n        }\n        switch (local.env.HEROKU_APP_NAME) {\n        case 'h1-cron1':\n            local.cronJob = local.nop;\n            // update cron\n            local.ajax({\n                url: 'https://kaizhu256.github.io/node-utility2/cronJob.js'\n            }, function (error, data) {\n                if (!error && data.responseText !== local.cronScript) {\n                    local.cronScript = data.responseText;\n                    local.vm.runInThisContext(local.cronScript);\n                }\n            });\n            setInterval(function () {\n                var cronTime;\n                cronTime = new Date();\n                if (cronTime.toISOString().slice(0, 16) <\n                        (local.cronTime && local.cronTime.toISOString())) {\n                    return;\n                }\n                local.cronTime = cronTime;\n                // cron every 5 minutes\n                if (local.cronTime.getUTCMinutes() % 5 === 0) {\n                    // heroku-keepalive\n                    local.ajax({ url: 'https://h1-cron1.herokuapp.com' }, local.onErrorThrow);\n                    // update cron\n                    local.ajax({\n                        url: 'https://kaizhu256.github.io/node-utility2/cronJob.js'\n                    }, function (error, data) {\n                        if (!error && data.responseText !== local.cronScript) {\n                            local.cronScript = data.responseText;\n                            local.vm.runInThisContext(local.cronScript);\n                        }\n                    });\n                }\n                local.cronJob();\n            }, 30000);\n            break;\n        }\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-utility2/lib.utility2.js":"///usr/bin/env node\n/* istanbul instrument in package utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.utility2 = local.global.utility2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n\n\n\n    // run shared js-env code - pre-function\n    (function () {\n        // init global.debug_inline\n        local.global['debug_inline'.replace('_i', 'I')] = local.global[\n            'debug_inline'.replace('_i', 'I')\n        ] || function (arg) {\n        /*\n         * this function will both print the arg to stderr and return it\n         */\n            // debug arguments\n            local['_debug_inlineArguments'.replace('_i', 'I')] = arguments;\n            console.error('\\n\\n\\ndebug_inline'.replace('_i', 'I'));\n            console.error.apply(console, arguments);\n            console.error();\n            // return arg for inspection\n            return arg;\n        };\n        local.nop = function () {\n        /*\n         * this function will do nothing\n         */\n            return;\n        };\n        // init lib\n        [\n            'apidoc',\n            'db',\n            'github_crud',\n            'istanbul',\n            'jslint',\n            'sjcl',\n            'uglifyjs'\n        ].forEach(function (key) {\n            try {\n                local[key] = local.modeJs === 'browser'\n                    ? local.global['utility2_' + key]\n                    : require('./lib.' + key + '.js');\n            } catch (ignore) {\n            }\n            local[key] = local[key] || {};\n        });\n        // init assets and templates\n        local.assetsDict = {};\n/* jslint-ignore-begin */\nlocal.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.{{env.npm_package_nameAlias}}.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n\n\n\n// https://img.shields.io/badge/last_build-0000_00_00_00_00_00_UTC_--_master_--_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-0077ff.svg?style=flat\nlocal.assetsDict['/assets.buildBadge.template.svg'] =\n'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"563\" height=\"20\"><linearGradient id=\"a\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><rect rx=\"0\" width=\"563\" height=\"20\" fill=\"#555\"/><rect rx=\"0\" x=\"61\" width=\"502\" height=\"20\" fill=\"#07f\"/><path fill=\"#07f\" d=\"M61 0h4v20h-4z\"/><rect rx=\"0\" width=\"563\" height=\"20\" fill=\"url(#a)\"/><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\"><text x=\"31.5\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">last build</text><text x=\"31.5\" y=\"14\">last build</text><text x=\"311\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">0000-00-00 00:00:00 UTC - master - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</text><text x=\"311\" y=\"14\">0000-00-00 00:00:00 UTC - master - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</text></g></svg>';\n\n\n\nlocal.assetsDict['/assets.example.template.js'] = '\\\n/*\\n\\\nexample.js\\n\\\n\\n\\\nquickstart example\\n\\\n\\n\\\ninstruction\\n\\\n    1. save this script as example.js\\n\\\n    2. run the shell command:\\n\\\n        $ npm install jslint-lite && PORT=8081 node example.js\\n\\\n    3. play with the browser-demo on http://127.0.0.1:8081\\n\\\n*/\\n\\\n\\n\\\n\\n\\\n\\n\\\n/* istanbul instrument in package jslint */\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 8,\\n\\\n    maxlen: 96,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \\'use strict\\';\\n\\\n    var local;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run shared js\\-env code - pre-init\\n\\\n    (function () {\\n\\\n        // init local\\n\\\n        local = {};\\n\\\n        // init modeJs\\n\\\n        local.modeJs = (function () {\\n\\\n            try {\\n\\\n                return typeof navigator.userAgent === \\'string\\' &&\\n\\\n                    typeof document.querySelector(\\'body\\') === \\'object\\' &&\\n\\\n                    typeof XMLHttpRequest.prototype.open === \\'function\\' &&\\n\\\n                    \\'browser\\';\\n\\\n            } catch (errorCaughtBrowser) {\\n\\\n                return module.exports &&\\n\\\n                    typeof process.versions.node === \\'string\\' &&\\n\\\n                    typeof require(\\'http\\').createServer === \\'function\\' &&\\n\\\n                    \\'node\\';\\n\\\n            }\\n\\\n        }());\\n\\\n        // init global\\n\\\n        local.global = local.modeJs === \\'browser\\'\\n\\\n            ? window\\n\\\n            : global;\\n\\\n        // init utility2_rollup\\n\\\n        local = local.global.utility2_rollup || (local.modeJs === \\'browser\\'\\n\\\n            ? local.global.utility2_jslint\\n\\\n            : require(\\'jslint-lite\\'));\\n\\\n        // export local\\n\\\n        local.global.local = local;\\n\\\n    }());\\n\\\n    switch (local.modeJs) {\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // post-init\\n\\\n    // run browser js\\-env code - post-init\\n\\\n    /* istanbul ignore next */\\n\\\n    case \\'browser\\':\\n\\\n        local.testRunBrowser = function (event) {\\n\\\n            if (!event || (event &&\\n\\\n                    event.currentTarget &&\\n\\\n                    event.currentTarget.className &&\\n\\\n                    event.currentTarget.className.includes &&\\n\\\n                    event.currentTarget.className.includes(\\'onreset\\'))) {\\n\\\n                // reset output\\n\\\n                Array.from(\\n\\\n                    document.querySelectorAll(\\'body > .resettable\\')\\n\\\n                ).forEach(function (element) {\\n\\\n                    switch (element.tagName) {\\n\\\n                    case \\'INPUT\\':\\n\\\n                    case \\'TEXTAREA\\':\\n\\\n                        element.value = \\'\\';\\n\\\n                        break;\\n\\\n                    default:\\n\\\n                        element.textContent = \\'\\';\\n\\\n                    }\\n\\\n                });\\n\\\n            }\\n\\\n            switch (event && event.currentTarget && event.currentTarget.id) {\\n\\\n            case \\'testRunButton1\\':\\n\\\n                // show tests\\n\\\n                if (document.querySelector(\\'#testReportDiv1\\').style.display === \\'none\\') {\\n\\\n                    document.querySelector(\\'#testReportDiv1\\').style.display = \\'block\\';\\n\\\n                    document.querySelector(\\'#testRunButton1\\').textContent =\\n\\\n                        \\'hide internal test\\';\\n\\\n                    local.modeTest = true;\\n\\\n                    local.testRunDefault(local);\\n\\\n                // hide tests\\n\\\n                } else {\\n\\\n                    document.querySelector(\\'#testReportDiv1\\').style.display = \\'none\\';\\n\\\n                    document.querySelector(\\'#testRunButton1\\').textContent = \\'run internal test\\';\\n\\\n                }\\n\\\n                break;\\n\\\n            // custom-case\\n\\\n            default:\\n\\\n                break;\\n\\\n            }\\n\\\n            if (document.querySelector(\\'#inputTextareaEval1\\') && (!event || (event &&\\n\\\n                    event.currentTarget &&\\n\\\n                    event.currentTarget.className &&\\n\\\n                    event.currentTarget.className.includes &&\\n\\\n                    event.currentTarget.className.includes(\\'oneval\\')))) {\\n\\\n                // try to eval input-code\\n\\\n                try {\\n\\\n                    /*jslint evil: true*/\\n\\\n                    eval(document.querySelector(\\'#inputTextareaEval1\\').value);\\n\\\n                } catch (errorCaught) {\\n\\\n                    console.error(errorCaught);\\n\\\n                }\\n\\\n            }\\n\\\n        };\\n\\\n        // log stderr and stdout to #outputTextareaStdout1\\n\\\n        [\\'error\\', \\'log\\'].forEach(function (key) {\\n\\\n            console[key + \\'_original\\'] = console[key];\\n\\\n            console[key] = function () {\\n\\\n                var element;\\n\\\n                console[key + \\'_original\\'].apply(console, arguments);\\n\\\n                element = document.querySelector(\\'#outputTextareaStdout1\\');\\n\\\n                if (!element) {\\n\\\n                    return;\\n\\\n                }\\n\\\n                // append text to #outputTextareaStdout1\\n\\\n                element.value += Array.from(arguments).map(function (arg) {\\n\\\n                    return typeof arg === \\'string\\'\\n\\\n                        ? arg\\n\\\n                        : JSON.stringify(arg, null, 4);\\n\\\n                }).join(\\' \\') + \\'\\\\n\\';\\n\\\n                // scroll textarea to bottom\\n\\\n                element.scrollTop = element.scrollHeight;\\n\\\n            };\\n\\\n        });\\n\\\n        // init event-handling\\n\\\n        [\\'change\\', \\'click\\', \\'keyup\\'].forEach(function (event) {\\n\\\n            Array.from(document.querySelectorAll(\\'.on\\' + event)).forEach(function (element) {\\n\\\n                element.addEventListener(event, local.testRunBrowser);\\n\\\n            });\\n\\\n        });\\n\\\n        // run tests\\n\\\n        local.testRunBrowser();\\n\\\n        break;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run node js\\-env code - post-init\\n\\\n    /* istanbul ignore next */\\n\\\n    case \\'node\\':\\n\\\n        // export local\\n\\\n        module.exports = local;\\n\\\n        // require modules\\n\\\n        local.fs = require(\\'fs\\');\\n\\\n        local.http = require(\\'http\\');\\n\\\n        local.url = require(\\'url\\');\\n\\\n        // init assets\\n\\\n        local.assetsDict = local.assetsDict || {};\\n\\\n        /* jslint-ignore-begin */\\n\\\n        local.assetsDict[\\'/assets.index.template.html\\'] = \\'\\\\\\n' +\nlocal.assetsDict['/assets.index.template.html'].replace((/\\n/g), '\\\\n\\\\\\n') +\n'\\';\\n\\\n        /* jslint-ignore-end */\\n\\\n        if (local.templateRender) {\\n\\\n            local.assetsDict[\\'/\\'] = local.templateRender(\\n\\\n                local.assetsDict[\\'/assets.index.template.html\\'],\\n\\\n                {\\n\\\n                    env: local.objectSetDefault(local.env, {\\n\\\n                        npm_package_description: \\'the greatest app in the world!\\',\\n\\\n                        npm_package_name: \\'my-app\\',\\n\\\n                        npm_package_nameAlias: \\'my_app\\',\\n\\\n                        npm_package_version: \\'0.0.1\\'\\n\\\n                    })\\n\\\n                }\\n\\\n            );\\n\\\n        } else {\\n\\\n            local.assetsDict[\\'/\\'] = local.assetsDict[\\'/assets.index.template.html\\']\\n\\\n                .replace((/\\\\{\\\\{env\\\\.(\\\\w+?)\\\\}\\\\}/g), function (match0, match1) {\\n\\\n                    // jslint-hack\\n\\\n                    String(match0);\\n\\\n                    switch (match1) {\\n\\\n                    case \\'npm_package_description\\':\\n\\\n                        return \\'the greatest app in the world!\\';\\n\\\n                    case \\'npm_package_name\\':\\n\\\n                        return \\'my-app\\';\\n\\\n                    case \\'npm_package_nameAlias\\':\\n\\\n                        return \\'my_app\\';\\n\\\n                    case \\'npm_package_version\\':\\n\\\n                        return \\'0.0.1\\';\\n\\\n                    }\\n\\\n                });\\n\\\n        }\\n\\\n        // run the cli\\n\\\n        if (local.global.utility2_rollup || module !== require.main) {\\n\\\n            break;\\n\\\n        }\\n\\\n        local.assetsDict[\\'/assets.example.js\\'] =\\n\\\n            local.assetsDict[\\'/assets.example.js\\'] ||\\n\\\n            local.fs.readFileSync(__filename, \\'utf8\\');\\n\\\n        local.assetsDict[\\'/assets.jslint.rollup.js\\'] =\\n\\\n            local.assetsDict[\\'/assets.jslint.rollup.js\\'] ||\\n\\\n            local.fs.readFileSync(\\n\\\n                // buildCustomOrg-hack\\n\\\n                local.jslint.__dirname +\\n\\\n                    \\'/lib.jslint.js\\',\\n\\\n                \\'utf8\\'\\n\\\n            ).replace((/^#!/), \\'//\\');\\n\\\n        local.assetsDict[\\'/favicon.ico\\'] = local.assetsDict[\\'/favicon.ico\\'] || \\'\\';\\n\\\n        // if $npm_config_timeout_exit exists,\\n\\\n        // then exit this process after $npm_config_timeout_exit ms\\n\\\n        if (Number(process.env.npm_config_timeout_exit)) {\\n\\\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\\n\\\n        }\\n\\\n        // start server\\n\\\n        if (local.global.utility2_serverHttp1) {\\n\\\n            break;\\n\\\n        }\\n\\\n        process.env.PORT = process.env.PORT || \\'8081\\';\\n\\\n        console.error(\\'server starting on port \\' + process.env.PORT);\\n\\\n        local.http.createServer(function (request, response) {\\n\\\n            request.urlParsed = local.url.parse(request.url);\\n\\\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\\n\\\n                response.end(local.assetsDict[request.urlParsed.pathname]);\\n\\\n                return;\\n\\\n            }\\n\\\n            response.statusCode = 404;\\n\\\n            response.end();\\n\\\n        }).listen(process.env.PORT);\\n\\\n        break;\\n\\\n    }\\n\\\n}());\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.lib.template.js'] = '\\\n/* istanbul instrument in package jslint */\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 8,\\n\\\n    maxlen: 96,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \\'use strict\\';\\n\\\n    var local;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run shared js\\-env code - pre-init\\n\\\n    (function () {\\n\\\n        // init local\\n\\\n        local = {};\\n\\\n        // init modeJs\\n\\\n        local.modeJs = (function () {\\n\\\n            try {\\n\\\n                return typeof navigator.userAgent === \\'string\\' &&\\n\\\n                    typeof document.querySelector(\\'body\\') === \\'object\\' &&\\n\\\n                    typeof XMLHttpRequest.prototype.open === \\'function\\' &&\\n\\\n                    \\'browser\\';\\n\\\n            } catch (errorCaughtBrowser) {\\n\\\n                return module.exports &&\\n\\\n                    typeof process.versions.node === \\'string\\' &&\\n\\\n                    typeof require(\\'http\\').createServer === \\'function\\' &&\\n\\\n                    \\'node\\';\\n\\\n            }\\n\\\n        }());\\n\\\n        // init global\\n\\\n        local.global = local.modeJs === \\'browser\\'\\n\\\n            ? window\\n\\\n            : global;\\n\\\n        // init utility2_rollup\\n\\\n        local = local.global.utility2_rollup || local;\\n\\\n        // init lib\\n\\\n        local.local = local.jslint = local;\\n\\\n        // init exports\\n\\\n        if (local.modeJs === \\'browser\\') {\\n\\\n            local.global.utility2_jslint = local;\\n\\\n        } else {\\n\\\n            module.exports = local;\\n\\\n            module.exports.__dirname = __dirname;\\n\\\n            module.exports.module = module;\\n\\\n        }\\n\\\n    }());\\n\\\n}());\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.readme.template.md'] = '\\\n# jslint-lite\\n\\\nthe greatest app in the world!\\n\\\n\\n\\\n[![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-jslint-lite.svg)](https://travis-ci.org/kaizhu256/node-jslint-lite) [![istanbul-coverage](https://kaizhu256.github.io/node-jslint-lite/build/coverage.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build/coverage.html/index.html)\\n\\\n\\n\\\n[![NPM](https://nodei.co/npm/jslint-lite.png?downloads=true)](https://www.npmjs.com/package/jslint-lite)\\n\\\n\\n\\\n[![npmPackageListing](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.npmPackageListing.svg)](https://github.com/kaizhu256/node-jslint-lite)\\n\\\n\\n\\\n![npmPackageDependencyTree](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.npmPackageDependencyTree.svg)\\n\\\n\\n\\\n\\n\\\n\\n\\\n# cdn download\\n\\\n- [https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/assets.jslint.rollup.js](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/assets.jslint.rollup.js)\\n\\\n\\n\\\n\\n\\\n\\n\\\n# live demo\\n\\\n- [https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/index.html](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/index.html)\\n\\\n\\n\\\n[![github.com test-server](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.deployGithub.browser.%252Fnode-jslint-lite%252Fbuild%252Fapp%252Findex.html.png)](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/index.html)\\n\\\n\\n\\\n\\n\\\n\\n\\\n# documentation\\n\\\n#### apidoc\\n\\\n- [https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/apidoc.html](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/apidoc.html)\\n\\\n\\n\\\n[![apidoc](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.buildApidoc.browser.%252Fhome%252Ftravis%252Fbuild%252Fkaizhu256%252Fnode-jslint-lite%252Ftmp%252Fbuild%252Fapidoc.html.png)](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/apidoc.html)\\n\\\n\\n\\\n#### todo\\n\\\n- none\\n\\\n\\n\\\n#### changes for v0.0.1\\n\\\n- none\\n\\\n\\n\\\n#### this package requires\\n\\\n- darwin or linux os\\n\\\n\\n\\\n\\n\\\n\\n\\\n# build status [![travis-ci.org build-status](https://api.travis-ci.org/kaizhu256/node-jslint-lite.svg)](https://travis-ci.org/kaizhu256/node-jslint-lite)\\n\\\n[![build commit status](https://kaizhu256.github.io/node-jslint-lite/build/build.badge.svg)](https://travis-ci.org/kaizhu256/node-jslint-lite)\\n\\\n\\n\\\n| git-branch : | [master](https://github.com/kaizhu256/node-jslint-lite/tree/master) | [beta](https://github.com/kaizhu256/node-jslint-lite/tree/beta) | [alpha](https://github.com/kaizhu256/node-jslint-lite/tree/alpha)|\\n\\\n|--:|:--|:--|:--|\\n\\\n| test-server-github : | [![github.com test-server](https://kaizhu256.github.io/node-jslint-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-jslint-lite/build..master..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-jslint-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/app/index.html) | [![github.com test-server](https://kaizhu256.github.io/node-jslint-lite/GitHub-Mark-32px.png)](https://kaizhu256.github.io/node-jslint-lite/build..alpha..travis-ci.org/app/index.html)|\\n\\\n| test-server-heroku : | [![heroku.com test-server](https://kaizhu256.github.io/node-jslint-lite/heroku-logo.75x25.png)](https://h1-jslint-master.herokuapp.com) | [![heroku.com test-server](https://kaizhu256.github.io/node-jslint-lite/heroku-logo.75x25.png)](https://h1-jslint-beta.herokuapp.com) | [![heroku.com test-server](https://kaizhu256.github.io/node-jslint-lite/heroku-logo.75x25.png)](https://h1-jslint-alpha.herokuapp.com)|\\n\\\n| test-report : | [![test-report](https://kaizhu256.github.io/node-jslint-lite/build..master..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..master..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/test-report.html) | [![test-report](https://kaizhu256.github.io/node-jslint-lite/build..alpha..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..alpha..travis-ci.org/test-report.html)|\\n\\\n| coverage : | [![istanbul-coverage](https://kaizhu256.github.io/node-jslint-lite/build..master..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..master..travis-ci.org/coverage.html/index.html) | [![istanbul-coverage](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/coverage.html/index.html) | [![istanbul-coverage](https://kaizhu256.github.io/node-jslint-lite/build..alpha..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-jslint-lite/build..alpha..travis-ci.org/coverage.html/index.html)|\\n\\\n| build-artifacts : | [![build-artifacts](https://kaizhu256.github.io/node-jslint-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-jslint-lite/tree/gh-pages/build..master..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-jslint-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-jslint-lite/tree/gh-pages/build..beta..travis-ci.org) | [![build-artifacts](https://kaizhu256.github.io/node-jslint-lite/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-jslint-lite/tree/gh-pages/build..alpha..travis-ci.org)|\\n\\\n\\n\\\n#### master branch\\n\\\n- stable branch\\n\\\n- HEAD should be tagged, npm-published package\\n\\\n\\n\\\n#### beta branch\\n\\\n- semi-stable branch\\n\\\n- HEAD should be latest, npm-published package\\n\\\n\\n\\\n#### alpha branch\\n\\\n- unstable branch\\n\\\n- HEAD is arbitrary\\n\\\n- commit history may be rewritten\\n\\\n\\n\\\n\\n\\\n\\n\\\n# quickstart web example\\n\\\n![screenCapture](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.testExampleJs.browser.%252F.png)\\n\\\n\\n\\\n#### to run this example, follow the instruction in the script below\\n\\\n- [example.js](https://kaizhu256.github.io/node-jslint-lite/build..beta..travis-ci.org/example.js)\\n\\\n```javascript\\n' + local.assetsDict['/assets.example.template.js'] + '```\\n\\\n\\n\\\n#### output from browser\\n\\\n![screenCapture](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.testExampleJs.browser.%252F.png)\\n\\\n\\n\\\n#### output from shell\\n\\\n![screenCapture](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.testExampleJs.svg)\\n\\\n\\n\\\n\\n\\\n\\n\\\n# package.json\\n\\\n```json\\n\\\n{\\n\\\n    \"author\": \"kai zhu <kaizhu256@gmail.com>\",\\n\\\n    \"description\": \"the greatest app in the world!\",\\n\\\n    \"devDependencies\": {\\n\\\n        \"electron-lite\": \"kaizhu256/node-electron-lite#alpha\",\\n\\\n        \"utility2\": \"kaizhu256/node-utility2#alpha\"\\n\\\n    },\\n\\\n    \"engines\": {\\n\\\n        \"node\": \">=4.0\"\\n\\\n    },\\n\\\n    \"homepage\": \"https://github.com/kaizhu256/node-jslint-lite\",\\n\\\n    \"keywords\": [],\\n\\\n    \"license\": \"MIT\",\\n\\\n    \"main\": \"lib.jslint.js\",\\n\\\n    \"name\": \"jslint-lite\",\\n\\\n    \"os\": [\\n\\\n        \"darwin\",\\n\\\n        \"linux\"\\n\\\n    ],\\n\\\n    \"repository\": {\\n\\\n        \"type\": \"git\",\\n\\\n        \"url\": \"https://github.com/kaizhu256/node-jslint-lite.git\"\\n\\\n    },\\n\\\n    \"scripts\": {\\n\\\n        \"build-ci\": \"utility2 shReadmeTest build_ci.sh\",\\n\\\n        \"env\": \"env\",\\n\\\n        \"heroku-postbuild\": \"(set -e; npm install \\\\\\\"kaizhu256/node-utility2#alpha\\\\\\\"; utility2 shDeployHeroku)\",\\n\\\n        \"postinstall\": \"if [ -f npm_scripts.sh ]; then ./npm_scripts.sh postinstall; fi\",\\n\\\n        \"start\": \"(set -e; export PORT=${PORT:-8080}; utility2 start test.js)\",\\n\\\n        \"test\": \"(set -e; export PORT=$(utility2 shServerPortRandom); utility2 test test.js)\"\\n\\\n    },\\n\\\n    \"version\": \"0.0.1\"\\n\\\n}\\n\\\n```\\n\\\n\\n\\\n\\n\\\n\\n\\\n# changelog of last 50 commits\\n\\\n[![screenCapture](https://kaizhu256.github.io/node-jslint-lite/build/screenCapture.gitLog.svg)](https://github.com/kaizhu256/node-jslint-lite/commits)\\n\\\n\\n\\\n\\n\\\n\\n\\\n# internal build-script\\n\\\n- build_ci.sh\\n\\\n```shell\\n\\\n# build_ci.sh\\n\\\n\\n\\\n# this shell script will run the build for this package\\n\\\n\\n\\\nshBuildCiPost() {(set -e\\n\\\n    shDeployGithub\\n\\\n    # shDeployHeroku\\n\\\n    shReadmeBuildLinkVerify\\n\\\n)}\\n\\\n\\n\\\nshBuildCiPre() {(set -e\\n\\\n    shReadmeTest example.js\\n\\\n    shReadmeTest example.sh\\n\\\n    shNpmTestPublished\\n\\\n)}\\n\\\n\\n\\\n# run shBuildCi\\n\\\neval $(utility2 source)\\n\\\nshBuildCi\\n\\\n```\\n\\\n\\n\\\n\\n\\\n\\n\\\n# misc\\n\\\n- this package was created with [utility2](https://github.com/kaizhu256/node-utility2)\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.readmeCustomOrgNpmdocHeader.template.md'] = '\\\n# api documentation for \\\n{{#if env.npm_package_homepage}} \\\n[{{env.npm_package_name}} (v{{env.npm_package_version}})]({{env.npm_package_homepage}}) \\\n{{#unless env.npm_package_homepage}} \\\n{{env.npm_package_name}} (v{{env.npm_package_version}}) \\\n{{/if env.npm_package_homepage}} \\\n[![npm package](https://img.shields.io/npm/v/npmdoc-{{env.npm_package_name}}.svg?style=flat-square)](https://www.npmjs.org/package/npmdoc-{{env.npm_package_name}}) \\\n[![travis-ci.org build-status](https://api.travis-ci.org/npmdoc/node-npmdoc-{{env.npm_package_name}}.svg)](https://travis-ci.org/npmdoc/node-npmdoc-{{env.npm_package_name}}) \\\n\\n\\\n#### {{env.npm_package_description}} \\\n\\n\\\n\\n\\\n[![NPM](https://nodei.co/npm/{{env.npm_package_name}}.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/{{env.npm_package_name}}) \\\n\\n\\\n\\n\\\n[![apidoc](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/screenCapture.buildApidoc.browser.%252Fhome%252Ftravis%252Fbuild%252Fnpmdoc%252Fnode-npmdoc-{{env.npm_package_name}}%252Ftmp%252Fbuild%252Fapidoc.html.png)](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/apidoc.html) \\\n\\n\\\n\\n\\\n![npmPackageListing](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/screenCapture.npmPackageListing.svg) \\\n\\n\\\n\\n\\\n![npmPackageDependencyTree](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/screenCapture.npmPackageDependencyTree.svg) \\\n\\n\\\n\\n\\\n\\n\\\n\\n\\\n# package.json \\\n\\n\\\n\\n\\\n```json \\\n\\n\\\n\\n\\\n{{packageJson jsonStringify4 markdownCodeSafe}} \\\n\\n\\\n``` \\\n\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.readmeCustomOrgNpmtest.template.md'] = '\\\n# test coverage for \\\n{{#if env.npm_package_homepage}} \\\n[{{env.npm_package_name}} (v{{env.npm_package_version}})]({{env.npm_package_homepage}}) \\\n{{#unless env.npm_package_homepage}} \\\n{{env.npm_package_name}} (v{{env.npm_package_version}}) \\\n{{/if env.npm_package_homepage}} \\\n[![npm package](https://img.shields.io/npm/v/npmtest-{{env.npm_package_name}}.svg?style=flat-square)](https://www.npmjs.org/package/npmtest-{{env.npm_package_name}}) \\\n[![travis-ci.org build-status](https://api.travis-ci.org/npmtest/node-npmtest-{{env.npm_package_name}}.svg)](https://travis-ci.org/npmtest/node-npmtest-{{env.npm_package_name}}) \\\n\\n\\\n#### {{env.npm_package_description}} \\\n\\n\\\n\\n\\\n[![NPM](https://nodei.co/npm/{{env.npm_package_name}}.png?downloads=true&downloadRank=true&stars=true)](https://www.npmjs.com/package/{{env.npm_package_name}}) \\\n\\n\\\n\\n\\\n| git-branch : | [alpha](https://github.com/npmtest/node-npmtest-{{env.npm_package_name}}/tree/alpha)|\\n\\\n|--:|:--| \\\n\\n\\\n| coverage : | [![istanbul-coverage](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/coverage.badge.svg)](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/coverage.html/index.html)| \\\n\\n\\\n| test-report : | [![test-report](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/test-report.badge.svg)](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/test-report.html)| \\\n\\n\\\n| build-artifacts : | [![build-artifacts](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/glyphicons_144_folder_open.png)](https://github.com/npmtest/node-npmtest-{{env.npm_package_name}}/tree/gh-pages/build)| \\\n\\n\\\n\\n\\\n[![istanbul-coverage](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/screenCapture.buildCustomOrg.browser.coverage.html.png)](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/coverage.html/index.html) \\\n\\n\\\n\\n\\\n[![test-report](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/screenCapture.buildCustomOrg.browser.%252Fhome%252Ftravis%252Fbuild%252Fnpmtest%252Fnode-npmtest-{{env.npm_package_name}}%252Ftmp%252Fbuild%252Ftest-report.html.png)](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/test-report.html) \\\n\\n\\\n\\n\\\n[![apidoc](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/screenCapture.buildApidoc.browser.%252Fhome%252Ftravis%252Fbuild%252Fnpmdoc%252Fnode-npmdoc-{{env.npm_package_name}}%252Ftmp%252Fbuild%252Fapidoc.html.png)](https://npmdoc.github.io/node-npmdoc-{{env.npm_package_name}}/build/apidoc.html) \\\n\\n\\\n\\n\\\n![npmPackageListing](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/screenCapture.npmPackageListing.svg) \\\n\\n\\\n\\n\\\n![npmPackageDependencyTree](https://npmtest.github.io/node-npmtest-{{env.npm_package_name}}/build/screenCapture.npmPackageDependencyTree.svg) \\\n\\n\\\n\\n\\\n\\n\\\n\\n\\\n# package.json \\\n\\n\\\n\\n\\\n```json \\\n\\n\\\n\\n\\\n{{packageJson jsonStringify4 markdownCodeSafe}} \\\n\\n\\\n``` \\\n\\n\\\n\\n\\\n\\n\\\n\\n\\\n# misc\\n\\\n- this document was created with [utility2](https://github.com/kaizhu256/node-utility2)\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.test.template.js'] = '\\\n/* istanbul instrument in package jslint */\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 8,\\n\\\n    maxlen: 96,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \\'use strict\\';\\n\\\n    var local;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run shared js\\-env code - pre-init\\n\\\n    (function () {\\n\\\n        // init local\\n\\\n        local = {};\\n\\\n        // init modeJs\\n\\\n        local.modeJs = (function () {\\n\\\n            try {\\n\\\n                return typeof navigator.userAgent === \\'string\\' &&\\n\\\n                    typeof document.querySelector(\\'body\\') === \\'object\\' &&\\n\\\n                    typeof XMLHttpRequest.prototype.open === \\'function\\' &&\\n\\\n                    \\'browser\\';\\n\\\n            } catch (errorCaughtBrowser) {\\n\\\n                return module.exports &&\\n\\\n                    typeof process.versions.node === \\'string\\' &&\\n\\\n                    typeof require(\\'http\\').createServer === \\'function\\' &&\\n\\\n                    \\'node\\';\\n\\\n            }\\n\\\n        }());\\n\\\n        // init global\\n\\\n        local.global = local.modeJs === \\'browser\\'\\n\\\n            ? window\\n\\\n            : global;\\n\\\n        switch (local.modeJs) {\\n\\\n        // re-init local from window.local\\n\\\n        case \\'browser\\':\\n\\\n            local = local.global.utility2.objectSetDefault(\\n\\\n                local.global.utility2_rollup || local.global.local,\\n\\\n                local.global.utility2\\n\\\n            );\\n\\\n            break;\\n\\\n        // re-init local from example.js\\n\\\n        case \\'node\\':\\n\\\n            local = (local.global.utility2_rollup || require(\\'utility2\\'))\\n\\\n                .requireExampleJsFromReadme();\\n\\\n            break;\\n\\\n        }\\n\\\n        // export local\\n\\\n        local.global.local = local;\\n\\\n    }());\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run shared js\\-env code - function\\n\\\n    (function () {\\n\\\n        return;\\n\\\n    }());\\n\\\n    switch (local.modeJs) {\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run browser js\\-env code - function\\n\\\n    case \\'browser\\':\\n\\\n        break;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run node js\\-env code - function\\n\\\n    case \\'node\\':\\n\\\n        break;\\n\\\n    }\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run shared js\\-env code - post-init\\n\\\n    (function () {\\n\\\n        return;\\n\\\n    }());\\n\\\n    switch (local.modeJs) {\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run browser js\\-env code - post-init\\n\\\n    case \\'browser\\':\\n\\\n        // run tests\\n\\\n        local.nop(local.modeTest &&\\n\\\n            document.querySelector(\\'#testRunButton1\\') &&\\n\\\n            document.querySelector(\\'#testRunButton1\\').click());\\n\\\n        break;\\n\\\n\\n\\\n\\n\\\n\\n\\\n    // run node js\\-env code - post-init\\n\\\n    /* istanbul ignore next */\\n\\\n    case \\'node\\':\\n\\\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test buildApidoc\\'s default handling-behavior-behavior\\n\\\n         */\\n\\\n            options = { modulePathList: module.paths };\\n\\\n            local.buildApidoc(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test buildApp\\'s default handling-behavior-behavior\\n\\\n         */\\n\\\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\\n\\\n            local.testCase_buildLib_default(options, local.onErrorThrow);\\n\\\n            local.testCase_buildTest_default(options, local.onErrorThrow);\\n\\\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\\n\\\n            options = [];\\n\\\n            local.buildApp(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\\n\\\n            function (options, onError) {\\n\\\n            /*\\n\\\n             * this function will test buildCustomOrg\\'s default handling-behavior\\n\\\n             */\\n\\\n                options = {};\\n\\\n                local.buildCustomOrg(options, onError);\\n\\\n            };\\n\\\n\\n\\\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test buildLib\\'s default handling-behavior\\n\\\n         */\\n\\\n            options = {};\\n\\\n            local.buildLib(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test buildReadme\\'s default handling-behavior-behavior\\n\\\n         */\\n\\\n            options = {};\\n\\\n            local.buildReadme(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test buildTest\\'s default handling-behavior\\n\\\n         */\\n\\\n            options = {};\\n\\\n            local.buildTest(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\\n\\\n            options,\\n\\\n            onError\\n\\\n        ) {\\n\\\n        /*\\n\\\n         * this function will test webpage\\'s default handling-behavior\\n\\\n         */\\n\\\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + \\'?modeTest=1\\' };\\n\\\n            local.browserTest(options, onError);\\n\\\n        };\\n\\\n\\n\\\n        // run test-server\\n\\\n        local.testRunServer(local);\\n\\\n        break;\\n\\\n    }\\n\\\n}());\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.testReport.template.html'] = '\\\n<div class=\"testReportDiv\">\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    adjoining-classes: false\\n\\\n*/\\n\\\n.testReportDiv {\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n}\\n\\\n.testReportFooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.testReportPlatformDiv {\\n\\\n    background: #fff;\\n\\\n    border: 1px solid black;\\n\\\n    margin-top: 20px;\\n\\\n    padding: 0 10px 10px 10px;\\n\\\n    text-align: left;\\n\\\n}\\n\\\n.testReportPlatformDiv .displayNone {\\n\\\n    display: none;\\n\\\n}\\n\\\n.testReportPlatformDiv img {\\n\\\n    border: 1px solid black;\\n\\\n    margin: 5px 0 5px 0;\\n\\\n    max-height: 256px;\\n\\\n    max-width: 512px;\\n\\\n}\\n\\\n.testReportPlatformDiv pre {\\n\\\n    background: #fdd;\\n\\\n    border-top: 1px solid black;\\n\\\n    margin-bottom: 0;\\n\\\n    padding: 10px;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\n.testReportPlatformDiv span {\\n\\\n    display: inline-block;\\n\\\n    width: 120px;\\n\\\n}\\n\\\n.testReportPlatformDiv.summary {\\n\\\n    background: #bfb;\\n\\\n}\\n\\\n.testReportPlatformDiv table {\\n\\\n    border-top: 1px solid black;\\n\\\n    text-align: left;\\n\\\n    width: 100%;\\n\\\n}\\n\\\n.testReportPlatformDiv table > tbody > tr:nth-child(odd) {\\n\\\n    background: #bfb;\\n\\\n}\\n\\\n.testReportPlatformDiv .testFailed {\\n\\\n    background: #f99;\\n\\\n}\\n\\\n.testReportPlatformDiv .testPending {\\n\\\n    background: #99f;\\n\\\n}\\n\\\n</style>\\n\\\n<h1>test-report for\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n    >{{env.npm_package_name}} (v{{env.npm_package_version}})</a>\\n\\\n</h1>\\n\\\n<div class=\"testReportPlatformDiv summary\">\\n\\\n<h2>summary</h2>\\n\\\n<h4>\\n\\\n    <span>version</span>-\\n\\\n        {{env.npm_package_version}}<br>\\n\\\n    <span>test date</span>- {{date}}<br>\\n\\\n    <span>commit info</span>-\\n\\\n        {{#if env.CI_COMMIT_INFO}}\\n\\\n        {{env.CI_COMMIT_INFO htmlSafe}}<br>\\n\\\n        {{#unless env.CI_COMMIT_INFO}}\\n\\\n        undefined<br>\\n\\\n        {{/if env.CI_COMMIT_INFO}}\\n\\\n</h4>\\n\\\n<table>\\n\\\n<thead>\\n\\\n    <tr>\\n\\\n        <th>total time-elapsed</th>\\n\\\n        <th>total tests failed</th>\\n\\\n        <th>total tests passed</th>\\n\\\n        <th>total tests pending</th>\\n\\\n    </tr>\\n\\\n</thead>\\n\\\n<tbody><tr>\\n\\\n    <td>{{timeElapsed}} ms</td>\\n\\\n    <td class=\"{{testStatusClass}}\">{{testsFailed}}</td>\\n\\\n    <td>{{testsPassed}}</td>\\n\\\n    <td>{{testsPending}}</td>\\n\\\n</tr></tbody>\\n\\\n</table>\\n\\\n</div>\\n\\\n{{#each testPlatformList}}\\n\\\n<div class=\"testReportPlatformDiv\">\\n\\\n<h4>\\n\\\n    {{testPlatformNumber}}. {{name htmlSafe}}<br>\\n\\\n    {{#if screenCaptureImg}}\\n\\\n    <a href=\"{{screenCaptureImg encodeURIComponent}}\">\\n\\\n        <img src=\"{{screenCaptureImg encodeURIComponent}}\">\\n\\\n    </a>\\n\\\n    <br>\\n\\\n    {{/if screenCaptureImg}}\\n\\\n    <span>time-elapsed</span>- {{timeElapsed}} ms<br>\\n\\\n    <span>tests failed</span>- {{testsFailed}}<br>\\n\\\n    <span>tests passed</span>- {{testsPassed}}<br>\\n\\\n    <span>tests pending</span>- {{testsPending}}<br>\\n\\\n</h4>\\n\\\n<table>\\n\\\n<thead><tr>\\n\\\n    <th>#</th>\\n\\\n    <th>time-elapsed</th>\\n\\\n    <th>status</th>\\n\\\n    <th>test-case</th>\\n\\\n</tr></thead>\\n\\\n<tbody>\\n\\\n{{#each testCaseList}}\\n\\\n<tr>\\n\\\n    <td>{{testCaseNumber}}</td>\\n\\\n    <td>{{timeElapsed}} ms</td>\\n\\\n    <td class=\"{{testReportTestStatusClass}}\">{{status}}</td>\\n\\\n    <td>{{name}}</td>\\n\\\n</tr>\\n\\\n{{/each testCaseList}}\\n\\\n</tbody>\\n\\\n</table>\\n\\\n<pre class=\"{{preClass}}\">\\n\\\n{{#each errorStackList}}\\n\\\n{{errorStack htmlSafe}}\\n\\\n{{/each errorStackList}}\\n\\\n</pre>\\n\\\n</div>\\n\\\n{{/each testPlatformList}}\\n\\\n<div class=\"testReportFooterDiv\">\\n\\\n    [ this document was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</div>\\n\\\n';\n\n\n\n// https://img.shields.io/badge/tests_failed-999-dd0000.svg?style=flat\nlocal.assetsDict['/assets.testReportBadge.template.svg'] =\n'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"103\" height=\"20\"><linearGradient id=\"a\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><rect rx=\"0\" width=\"103\" height=\"20\" fill=\"#555\"/><rect rx=\"0\" x=\"72\" width=\"31\" height=\"20\" fill=\"#d00\"/><path fill=\"#d00\" d=\"M72 0h4v20h-4z\"/><rect rx=\"0\" width=\"103\" height=\"20\" fill=\"url(#a)\"/><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\"><text x=\"37\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">tests failed</text><text x=\"37\" y=\"14\">tests failed</text><text x=\"86.5\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">999</text><text x=\"86.5\" y=\"14\">999</text></g></svg>';\n\n\n\nlocal.assetsDict['/assets.utility2.rollup.begin.js'] = '\\\n/* utility2.rollup.js begin */\\n\\\n/* istanbul ignore all */\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 8,\\n\\\n    maxlen: 96,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var local;\\n\\\n    local = {};\\n\\\n    local.modeJs = (function () {\\n\\\n        try {\\n\\\n            return typeof navigator.userAgent === \"string\" &&\\n\\\n                typeof document.querySelector(\"body\") === \"object\" &&\\n\\\n                typeof XMLHttpRequest.prototype.open === \"function\" &&\\n\\\n                \"browser\";\\n\\\n        } catch (errorCaughtBrowser) {\\n\\\n            return module.exports &&\\n\\\n                typeof process.versions.node === \"string\" &&\\n\\\n                typeof require(\"http\").createServer === \"function\" &&\\n\\\n                \"node\";\\n\\\n        }\\n\\\n    }());\\n\\\n    local.global = local.modeJs === \"browser\"\\n\\\n        ? window\\n\\\n        : global;\\n\\\n    local.local = local.global.utility2_rollup = local.global.utility2_rollup_old || local;\\n\\\n}());\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.utility2.rollup.content.js'] = '\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var local;\\n\\\n    local = (typeof window === \"object\" && window && window.utility2_rollup) ||\\n\\\n        global.utility2_rollup;\\n\\\n    local.local = local;\\n\\\n/* jslint-ignore-begin */\\n\\\n/* utility2.rollup.js content */\\n\\\n/* jslint-ignore-end */\\n\\\n}());\\n\\\n';\n\n\n\nlocal.assetsDict['/assets.utility2.rollup.end.js'] = '\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var local;\\n\\\n    local = {};\\n\\\n    local.modeJs = (function () {\\n\\\n        try {\\n\\\n            return typeof navigator.userAgent === \"string\" &&\\n\\\n                typeof document.querySelector(\"body\") === \"object\" &&\\n\\\n                typeof XMLHttpRequest.prototype.open === \"function\" &&\\n\\\n                \"browser\";\\n\\\n        } catch (errorCaughtBrowser) {\\n\\\n            return module.exports &&\\n\\\n                typeof process.versions.node === \"string\" &&\\n\\\n                typeof require(\"http\").createServer === \"function\" &&\\n\\\n                \"node\";\\n\\\n        }\\n\\\n    }());\\n\\\n    local.global = local.modeJs === \"browser\"\\n\\\n        ? window\\n\\\n        : global;\\n\\\n    local.global.utility2_rollup_old = local.global.utility2_rollup;\\n\\\n    local.global.utility2_rollup = null;\\n\\\n}());\\n\\\n/* utility2.rollup.js end */\\n\\\n';\n\n\n\nlocal.assetsDict['/favicon.ico'] = '';\n/* jslint-ignore-end */\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        // init lib Blob\n        local.Blob = local.modeJs === 'browser'\n            ? local.global.Blob\n            : function (array, options) {\n              /*\n               * this function will create a node-compatible Blob instance\n               */\n                this.bff = local.bufferConcat(array);\n                this.type = options && options.type;\n            };\n\n        // init lib FormData\n        local.FormData = function () {\n        /*\n         * this function will create a serverLocal-compatible FormData instance\n         * https://xhr.spec.whatwg.org/#dom-formdata\n         * The FormData(form) constructor must run these steps:\n         * 1. Let fd be a new FormData object.\n         * 2. If form is given, set fd's entries to the result\n         *    of constructing the form data set for form. (not implemented)\n         * 3. Return fd.\n         */\n            this.entryList = [];\n        };\n\n        local.FormData.prototype.append = function (name, value, filename) {\n        /*\n         * https://xhr.spec.whatwg.org/#dom-formdata-append\n         * The append(name, value, filename) method, when invoked, must run these steps:\n         * 1. If the filename argument is given, set value to a new File object\n         *    whose contents are value and name is filename.\n         * 2. Append a new entry whose name is name, and value is value,\n         *    to context object's list of entries.\n         */\n            if (filename) {\n                // bug-workaround - chromium cannot assign name to Blob instance\n                local.tryCatchOnError(function () {\n                    value.name = filename;\n                }, local.nop);\n            }\n            this.entryList.push({ name: name, value: value });\n        };\n\n        local.FormData.prototype.read = function (onError) {\n        /*\n         * https://tools.ietf.org/html/rfc7578\n         * this function will read from formData as a buffer, e.g.\n         * --Boundary\\r\\n\n         * Content-Disposition: form-data; name=\"key\"\\r\\n\n         * \\r\\n\n         * value\\r\\n\n         * --Boundary\\r\\n\n         * Content-Disposition: form-data; name=\"input1\"; filename=\"file1.png\"\\r\\n\n         * Content-Type: image/jpeg\\r\\n\n         * \\r\\n\n         * <data1>\\r\\n\n         * --Boundary\\r\\n\n         * Content-Disposition: form-data; name=\"input2\"; filename=\"file2.png\"\\r\\n\n         * Content-Type: image/jpeg\\r\\n\n         * \\r\\n\n         * <data2>\\r\\n\n         * --Boundary--\\r\\n\n         */\n            var boundary, result;\n            // handle null-case\n            if (this.entryList.length === 0) {\n                onError(null, local.bufferCreate());\n                return;\n            }\n            // init boundary\n            boundary = '--' + Date.now().toString(16) + Math.random().toString(16);\n            // init result\n            result = [];\n            local.onParallelList({\n                list: this.entryList\n            }, function (options, onParallel) {\n                var value;\n                value = options.element.value;\n                if (!(value instanceof local.Blob)) {\n                    result[options.ii] = [boundary +\n                        '\\r\\nContent-Disposition: form-data; name=\"' + options.element.name +\n                        '\"\\r\\n\\r\\n', value, '\\r\\n'];\n                    onParallel.counter += 1;\n                    onParallel();\n                    return;\n                }\n                // read from blob in parallel\n                onParallel.counter += 1;\n                local.blobRead(value, 'binary', function (error, data) {\n                    result[options.ii] = !error && [boundary +\n                        '\\r\\nContent-Disposition: form-data; name=\"' + options.element.name +\n                        '\"' +\n                        // read param filename\n                        (value && value.name\n                            ? '; filename=\"' + value.name + '\"'\n                            : '') +\n                        '\\r\\n' +\n                        // read param Content-Type\n                        (value && value.type\n                            ? 'Content-Type: ' + value.type + '\\r\\n'\n                            : '') +\n                        '\\r\\n', data, '\\r\\n'];\n                    onParallel(error);\n                });\n            }, function (error) {\n                // add closing boundary\n                result.push([boundary + '--\\r\\n']);\n                // concatenate result\n                onError(\n                    error,\n                    // flatten result\n                    !error && local.bufferConcat(Array.prototype.concat.apply([], result))\n                );\n            });\n        };\n\n        // init lib _http\n        local._http = {};\n\n        // init _http.IncomingMessage\n        local._http.IncomingMessage = function (xhr) {\n        /*\n         * https://nodejs.org/api/all.html#all_http_incomingmessage\n         * An IncomingMessage object is created by http.Server or http.ClientRequest\n         * and passed as the first argument to the 'request' and 'response' event respectively\n         */\n            this.headers = {};\n            this.httpVersion = '1.1';\n            this.method = xhr.method;\n            this.onEvent = document.createDocumentFragment();\n            this.readable = true;\n            this.url = xhr.url;\n        };\n\n        local._http.IncomingMessage.prototype.addListener = function (event, onEvent) {\n        /*\n         * https://nodejs.org/api/all.html#all_emitter_addlistener_event_listener\n         * Adds a listener to the end of the listeners array for the specified event\n         */\n            this.onEvent.addEventListener(event, function (event) {\n                onEvent(event.data);\n            });\n            if (this.readable && event === 'end') {\n                this.readable = null;\n                this.emit('data', this.data);\n                this.emit('end');\n            }\n            return this;\n        };\n\n        local._http.IncomingMessage.prototype.emit = function (event, data) {\n        /*\n         * https://nodejs.org/api/all.html#all_emitter_emit_event_arg1_arg2\n         * Calls each of the listeners in order with the supplied arguments\n         */\n            event = new local.global.Event(event);\n            event.data = data;\n            this.onEvent.dispatchEvent(event);\n        };\n\n        // https://nodejs.org/api/all.html#all_emitter_on_event_listener\n        local._http.IncomingMessage.prototype.on =\n            local._http.IncomingMessage.prototype.addListener;\n\n        local._http.IncomingMessage.prototype.pipe = function (writable) {\n        /*\n         * https://nodejs.org/api/all.html#all_readable_pipe_destination_options\n         * This method pulls all the data out of a readable stream, and writes it to the\n         * supplied destination, automatically managing the flow so that the destination is not\n         * overwhelmed by a fast readable stream\n         */\n            this.on('data', function (chunk) {\n                writable.write(chunk);\n            });\n            this.on('end', function () {\n                writable.end();\n            });\n            return writable;\n        };\n\n        local._http.STATUS_CODES = {\n            100: 'Continue',\n            101: 'Switching Protocols',\n            102: 'Processing',\n            200: 'OK',\n            201: 'Created',\n            202: 'Accepted',\n            203: 'Non-Authoritative Information',\n            204: 'No Content',\n            205: 'Reset Content',\n            206: 'Partial Content',\n            207: 'Multi-Status',\n            208: 'Already Reported',\n            226: 'IM Used',\n            300: 'Multiple Choices',\n            301: 'Moved Permanently',\n            302: 'Found',\n            303: 'See Other',\n            304: 'Not Modified',\n            305: 'Use Proxy',\n            307: 'Temporary Redirect',\n            308: 'Permanent Redirect',\n            400: 'Bad Request',\n            401: 'Unauthorized',\n            402: 'Payment Required',\n            403: 'Forbidden',\n            404: 'Not Found',\n            405: 'Method Not Allowed',\n            406: 'Not Acceptable',\n            407: 'Proxy Authentication Required',\n            408: 'Request Timeout',\n            409: 'Conflict',\n            410: 'Gone',\n            411: 'Length Required',\n            412: 'Precondition Failed',\n            413: 'Payload Too Large',\n            414: 'URI Too Long',\n            415: 'Unsupported Media Type',\n            416: 'Range Not Satisfiable',\n            417: 'Expectation Failed',\n            418: 'I\\'m a teapot',\n            421: 'Misdirected Request',\n            422: 'Unprocessable Entity',\n            423: 'Locked',\n            424: 'Failed Dependency',\n            425: 'Unordered Collection',\n            426: 'Upgrade Required',\n            428: 'Precondition Required',\n            429: 'Too Many Requests',\n            431: 'Request Header Fields Too Large',\n            451: 'Unavailable For Legal Reasons',\n            500: 'Internal Server Error',\n            501: 'Not Implemented',\n            502: 'Bad Gateway',\n            503: 'Service Unavailable',\n            504: 'Gateway Timeout',\n            505: 'HTTP Version Not Supported',\n            506: 'Variant Also Negotiates',\n            507: 'Insufficient Storage',\n            508: 'Loop Detected',\n            509: 'Bandwidth Limit Exceeded',\n            510: 'Not Extended',\n            511: 'Network Authentication Required'\n        };\n\n        // init _http.ServerResponse\n        local._http.ServerResponse = function (onResponse) {\n        /*\n         * https://nodejs.org/api/all.html#all_class_http_serverresponse\n         * This object is created internally by a HTTP server--not by the user\n         */\n            this.chunkList = [];\n            this.headers = {};\n            this.onEvent = document.createDocumentFragment();\n            this.onResponse = onResponse;\n            this.statusCode = 200;\n        };\n\n        // https://nodejs.org/api/all.html#all_emitter_addlistener_event_listener\n        local._http.ServerResponse.prototype.addListener =\n            local._http.IncomingMessage.prototype.addListener;\n\n        // https://nodejs.org/api/all.html#all_emitter_emit_event_arg1_arg2\n        local._http.ServerResponse.prototype.emit =\n            local._http.IncomingMessage.prototype.emit;\n\n        local._http.ServerResponse.prototype.end = function (data) {\n        /* https://nodejs.org/api/all.html#all_response_end_data_encoding_callback\n         * This method signals to the server that all of the response headers\n         * and body have been sent\n         */\n            // emit writable events\n            this.chunkList.push(data || '');\n            this.emit('finish');\n            // emit readable events\n            this.onResponse(this);\n            this.emit('data', local.bufferConcat(this.chunkList));\n            this.emit('end');\n        };\n\n        // https://nodejs.org/api/all.html#all_emitter_on_event_listener\n        local._http.ServerResponse.prototype.on =\n            local._http.IncomingMessage.prototype.addListener;\n\n        // https://nodejs.org/api/all.html#all_response_setheader_name_value\n        local._http.ServerResponse.prototype.setHeader = function (key, value) {\n            this.headers[key.toLowerCase()] = value;\n        };\n\n        local._http.ServerResponse.prototype.write = function (data) {\n        /*\n         * https://nodejs.org/api/all.html#all_response_write_chunk_encoding_callback\n         * This sends a chunk of the response body\n         */\n            this.chunkList.push(data);\n        };\n\n        // init _http.XMLHttpRequest\n        local._http.XMLHttpRequest = function () {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#XMLHttpRequest()\n         * The constructor initiates an XMLHttpRequest\n         */\n            var xhr;\n            xhr = this;\n            ['onError', 'onResponse'].forEach(function (key) {\n                xhr[key] = xhr[key].bind(xhr);\n            });\n            xhr.headers = {};\n            xhr.onLoadList = [];\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n            xhr.readyState = 0;\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response\n            xhr.response = null;\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n            xhr.responseText = '';\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\n            xhr.responseType = '';\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status\n            xhr.status = xhr.statusCode = 0;\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText\n            xhr.statusText = '';\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\n            xhr.timeout = local.timeoutDefault;\n        };\n\n        local._http.XMLHttpRequest.prototype.abort = function () {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#abort()\n         * Aborts the request if it has already been sent\n         */\n            this.onError(new Error('abort'));\n        };\n\n        local._http.XMLHttpRequest.prototype.addEventListener = function (event, onError) {\n        /*\n         * this function will add event listeners to the xhr-connection\n         */\n            switch (event) {\n            case 'abort':\n            case 'error':\n            case 'load':\n                this.onLoadList.push(onError);\n                break;\n            }\n        };\n\n        local._http.XMLHttpRequest.prototype.getAllResponseHeaders = function () {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n         * #getAllResponseHeaders()\n         * Returns all the response headers, separated by CRLF, as a string,\n         * or null if no response has been received\n         */\n            var xhr;\n            xhr = this;\n            return Object.keys((xhr.responseStream &&\n                xhr.responseStream.headers) || {}).map(function (key) {\n                return key + ': ' + xhr.responseStream.headers[key] + '\\r\\n';\n            }).join('') + '\\r\\n';\n        };\n\n        local._http.XMLHttpRequest.prototype.getResponseHeader = function (key) {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#getResponseHeader()\n         * Returns the string containing the text of the specified header,\n         * or null if either the response has not yet been received\n         * or the header doesn't exist in the response\n         */\n            return (this.responseStream &&\n                this.responseStream.headers &&\n                this.responseStream.headers[key]) || null;\n        };\n\n        local._http.XMLHttpRequest.prototype.onError = function (error, data) {\n        /*\n         * this function will handle the error and data passed back to the xhr-connection\n         */\n            if (this.done) {\n                return;\n            }\n            this.error = error;\n            this.response = data;\n            // init responseText\n            if (!this.responseType || this.responseType === 'text') {\n                this.responseText = local.bufferToString(data);\n            }\n            // update xhr\n            this.readyState = 4;\n            this.onreadystatechange();\n            // handle data\n            this.onLoadList.forEach(function (onError) {\n                onError({ type: error\n                    ? 'error'\n                    : 'load' });\n            });\n        };\n\n        local._http.XMLHttpRequest.prototype.onResponse = function (responseStream) {\n        /*\n         * this function will handle the responseStream from the xhr-connection\n         */\n            this.responseStream = responseStream;\n            // update xhr\n            this.status = this.statusCode = this.responseStream.statusCode;\n            this.statusText = local.http.STATUS_CODES[this.responseStream.statusCode] || '';\n            this.readyState = 1;\n            this.onreadystatechange();\n            this.readyState = 2;\n            this.onreadystatechange();\n            this.readyState = 3;\n            this.onreadystatechange();\n            if (this.responseType === 'stream') {\n                this.onError(null, this.responseStream);\n                return;\n            }\n            local.streamReadAll(this.responseStream, this.onError);\n        };\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange\n        local._http.XMLHttpRequest.prototype.onreadystatechange = local.nop;\n\n        local._http.XMLHttpRequest.prototype.open = function (method, url) {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#open()\n         * Initializes a request\n         */\n            this.method = method;\n            this.url = url;\n            // parse url\n            this.urlParsed = local.urlParse(String(this.url));\n            this.hostname = this.urlParsed.hostname;\n            this.path = this.urlParsed.pathname + this.urlParsed.search;\n            this.port = this.urlParsed.port;\n            // init requestStream\n            this.requestStream = (this.urlParsed.protocol === 'https:'\n                ? local.https\n                : local.http).request(this, this.onResponse)\n                // handle request-error\n                .on('error', this.onError);\n        };\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#overrideMimeType()\n        local._http.XMLHttpRequest.prototype.overrideMimeType = local.nop;\n\n        local._http.XMLHttpRequest.prototype.send = function (data) {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send()\n         * Sends the request\n         */\n            var self;\n            self = this;\n            self.data = data;\n            // asynchronously send data\n            setTimeout(function () {\n                self.requestStream.end(self.data);\n            });\n        };\n\n        local._http.XMLHttpRequest.prototype.setRequestHeader = function (key, value) {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#setRequestHeader()\n         * Sets the value of an HTTP request header\n         */\n            key = key.toLowerCase();\n            this.headers[key] = value;\n            this.requestStream.setHeader(key, value);\n        };\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload\n        local._http.XMLHttpRequest.prototype.upload = { addEventListener: local.nop };\n\n        local._http.createServer = function () {\n            /*\n             * https://nodejs.org/api/all.html#all_http_createserver_requestlistener\n             * Returns a new instance of http.Server\n             */\n            return { listen: function (port, onError) {\n            /*\n             * https://nodejs.org/api/all.html#all_server_listen_handle_callback\n             * This will cause the server to accept connections on the specified handle,\n             * but it is presumed that the file descriptor or handle has already been bound\n             * to a port or domain socket\n             */\n                // jslint-hack\n                local.nop(port);\n                onError();\n            } };\n        };\n\n        local._http.request = function (xhr, onResponse) {\n            var self;\n            self = {};\n            self.end = function (data) {\n                // do not run more than once\n                if (self.ended) {\n                    return;\n                }\n                self.ended = true;\n                self.serverRequest.data = data;\n                local.serverLocalRequestHandler(self.serverRequest, self.serverResponse);\n            };\n            self.on = function () {\n                return self;\n            };\n            self.serverRequest = new local._http.IncomingMessage(xhr);\n            self.serverResponse = new local._http.ServerResponse(onResponse);\n            self.setHeader = function (key, value) {\n                self.serverRequest.headers[key.toLowerCase()] = value;\n            };\n            return self;\n        };\n\n        local._middlewareError = function (error, request, response) {\n        /*\n         * this function will run the middleware that will handle errors\n         */\n            // if error occurred, then respond with '500 Internal Server Error',\n            // else respond with '404 Not Found'\n            local.serverRespondDefault(request, response, error\n                ? (error.statusCode >= 400 && error.statusCode < 600\n                    ? error.statusCode\n                    : 500)\n                : 404, error);\n        };\n\n        local._middlewareJsonpStateInit = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will\n         * serve the browser-state wrapped in the given jsonp-callback\n         */\n            var state;\n            if (request._stateInit || (request.urlParsed &&\n                    request.urlParsed.pathname === '/jsonp.utility2._stateInit')) {\n                state = { utility2: { assetsDict: {\n                    '/assets.index.template.html':\n                        local.assetsDict['/assets.index.template.html']\n                } } };\n                local.objectSetDefault(state, { utility2: { env: {\n                    NODE_ENV: local.env.NODE_ENV,\n                    npm_config_mode_backend: local.env.npm_config_mode_backend,\n                    npm_package_description: local.env.npm_package_description,\n                    npm_package_homepage: local.env.npm_package_homepage,\n                    npm_package_name: local.env.npm_package_name,\n                    npm_package_nameAlias: local.env.npm_package_nameAlias,\n                    npm_package_version: local.env.npm_package_version\n                } } }, 3);\n                if (request._stateInit) {\n                    return state;\n                }\n                response.end(\n                    request.urlParsed.query.callback + '(' + JSON.stringify(state) + ');'\n                );\n                return;\n            }\n            nextMiddleware();\n        };\n\n        local._serverLocalUrlTest = local.nop;\n\n        local._stateInit = function (options) {\n        /*\n         * this function will init the state-options\n         */\n            local.objectSetOverride(local, options, 10);\n        };\n\n        local._testRunBefore = local.nop;\n\n        local.ajax = function (options, onError) {\n        /*\n         * this function will send an ajax-request with error-handling and timeout\n         */\n            var timerTimeout, tmp, xhr;\n            onError = local.onErrorWithStack(onError);\n            // init modeServerLocal\n            if (!local.env.npm_config_mode_backend && local._serverLocalUrlTest(options.url)) {\n                xhr = new local._http.XMLHttpRequest();\n            }\n            // init xhr\n            xhr = xhr || (local.modeJs === 'browser'\n                ? new local.global.XMLHttpRequest()\n                : new local._http.XMLHttpRequest());\n            // debug xhr\n            local._debugXhr = xhr;\n            // init options\n            local.objectSetOverride(xhr, options);\n            // init headers\n            xhr.headers = {};\n            Object.keys(options.headers || {}).forEach(function (key) {\n                xhr.headers[key.toLowerCase()] = options.headers[key];\n            });\n            // init method\n            xhr.method = xhr.method || 'GET';\n            // init timeout\n            xhr.timeout = xhr.timeout || local.timeoutDefault;\n            // init timerTimeout\n            timerTimeout = local.onTimeout(function (error) {\n                xhr.error = xhr.error || error;\n                xhr.abort();\n                // cleanup requestStream and responseStream\n                local.streamListCleanup([xhr.requestStream, xhr.responseStream]);\n            }, xhr.timeout, 'ajax ' + xhr.method + ' ' + xhr.url);\n            // init event handling\n            xhr.onEvent = function (event) {\n                // init statusCode\n                xhr.statusCode = xhr.status;\n                switch (event.type) {\n                case 'abort':\n                case 'error':\n                case 'load':\n                    // do not run more than once\n                    if (xhr.done) {\n                        return;\n                    }\n                    xhr.done = true;\n                    // cleanup timerTimeout\n                    clearTimeout(timerTimeout);\n                    // cleanup requestStream and responseStream\n                    setTimeout(function () {\n                        local.streamListCleanup([xhr.requestStream, xhr.responseStream]);\n                    });\n                    // decrement ajaxProgressCounter\n                    local.ajaxProgressCounter -= 1;\n                    // handle abort or error event\n                    if (!xhr.error &&\n                            (event.type === 'abort' ||\n                            event.type === 'error' ||\n                            xhr.statusCode >= 400)) {\n                        xhr.error = new Error(event.type);\n                    }\n                    // handle completed xhr request\n                    if (xhr.readyState === 4) {\n                        // debug xhr\n                        if (xhr.modeDebug) {\n                            console.error(new Date().toISOString(\n                            ) + ' ajax-response ' + JSON.stringify({\n                                statusCode: xhr.statusCode,\n                                method: xhr.method,\n                                url: xhr.url,\n                                responseText: local.tryCatchOnError(function () {\n                                    return xhr.responseText.slice(0, 256);\n                                }, local.nop)\n                            }));\n                        }\n                        // handle string data\n                        if (xhr.error) {\n                            // debug statusCode\n                            xhr.error.statusCode = xhr.statusCode;\n                            // debug statusCode / method / url\n                            tmp = local.modeJs + ' - ' + xhr.statusCode + ' ' + xhr.method +\n                                ' ' + xhr.url + '\\n';\n                            // try to debug responseText\n                            local.tryCatchOnError(function () {\n                                tmp += '    ' + JSON.stringify(xhr.responseText.slice(0, 256) +\n                                    '...') + '\\n';\n                            }, local.nop);\n                            local.errorMessagePrepend(xhr.error, tmp);\n                        }\n                    }\n                    onError(xhr.error, xhr);\n                    break;\n                }\n                local.ajaxProgressUpdate();\n            };\n            // increment ajaxProgressCounter\n            local.ajaxProgressCounter += 1;\n            xhr.addEventListener('abort', xhr.onEvent);\n            xhr.addEventListener('error', xhr.onEvent);\n            xhr.addEventListener('load', xhr.onEvent);\n            xhr.addEventListener('loadstart', local.ajaxProgressUpdate);\n            xhr.addEventListener('progress', local.ajaxProgressUpdate);\n            xhr.upload.addEventListener('progress', local.ajaxProgressUpdate);\n            // open url\n            xhr.open(xhr.method, xhr.url);\n            // set request-headers\n            Object.keys(xhr.headers).forEach(function (key) {\n                xhr.setRequestHeader(key, xhr.headers[key]);\n            });\n            // debug xhr\n            if (xhr.modeDebug) {\n                console.error(new Date().toISOString() + ' ajax-request ' + JSON.stringify({\n                    method: xhr.method,\n                    url: xhr.url,\n                    headers: xhr.headers,\n                    data: xhr.data && xhr.data.slice &&\n                        local.bufferToString(xhr.data.slice(0, 256))\n                }));\n            }\n            if (xhr.data instanceof local.FormData) {\n                // handle formData\n                xhr.data.read(function (error, data) {\n                    if (error) {\n                        xhr.error = xhr.error || error;\n                        xhr.onEvent({ type: 'error' });\n                        return;\n                    }\n                    // send data\n                    xhr.send(local.bufferToNodeBuffer(data));\n                });\n            } else {\n                // send data\n                xhr.send(local.bufferToNodeBuffer(xhr.data));\n            }\n            return xhr;\n        };\n\n        local.ajaxProgressUpdate = function () {\n        /*\n         * this function will update ajaxProgress\n         */\n            var ajaxProgressDiv1;\n            ajaxProgressDiv1 = local.modeJs === 'browser' &&\n                document.querySelector('#ajaxProgressDiv1');\n            if (!ajaxProgressDiv1) {\n                return;\n            }\n            // init ajaxProgressDiv1StyleBackground\n            local.ajaxProgressDiv1StyleBackground = local.ajaxProgressDiv1StyleBackground ||\n                ajaxProgressDiv1.style.background;\n            // show ajaxProgress\n            if (ajaxProgressDiv1.style.background === 'transparent') {\n                ajaxProgressDiv1.style.background = local.ajaxProgressDiv1StyleBackground;\n            }\n            // cleanup timerTimeout\n            clearTimeout(local.timerTimeoutAjaxProgressHide);\n            // increment ajaxProgress\n            if (local.ajaxProgressCounter > 0) {\n                // this algorithm will indefinitely increment the ajaxProgressBar\n                // with successively smaller increments without ever reaching 100%\n                local.ajaxProgressState += 1;\n                ajaxProgressDiv1.style.width =\n                    100 - 75 * Math.exp(-0.125 * local.ajaxProgressState) + '%';\n                return;\n            }\n            // finish ajaxProgress\n            ajaxProgressDiv1.style.width = '100%';\n            // hide ajaxProgress\n            local.timerTimeoutAjaxProgressHide = setTimeout(function () {\n                ajaxProgressDiv1.style.background = 'transparent';\n                // reset ajaxProgress\n                setTimeout(function () {\n                    local.ajaxProgressCounter = 0;\n                    local.ajaxProgressState = 0;\n                    ajaxProgressDiv1.style.width = '25%';\n                }, 500);\n            }, 1500);\n        };\n\n        local.assert = function (passed, message) {\n        /*\n         * this function will throw the error message if passed is falsey\n         */\n            var error;\n            if (passed) {\n                return;\n            }\n            error = message && message.message\n                // if message is an error-object, then leave it as is\n                ? message\n                : new Error(typeof message === 'string'\n                    // if message is a string, then leave it as is\n                    ? message\n                    // else JSON.stringify message\n                    : JSON.stringify(message));\n            throw error;\n        };\n\n        local.assertJsonEqual = function (aa, bb) {\n        /*\n         * this function will assert\n         * utility2.jsonStringifyOrdered(aa) === JSON.stringify(bb)\n         */\n            aa = local.jsonStringifyOrdered(aa);\n            bb = JSON.stringify(bb);\n            local.assert(aa === bb, [aa, bb]);\n        };\n\n        local.assertJsonNotEqual = function (aa, bb) {\n        /*\n         * this function will assert\n         * utility2.jsonStringifyOrdered(aa) !== JSON.stringify(bb)\n         */\n            aa = local.jsonStringifyOrdered(aa);\n            bb = JSON.stringify(bb);\n            local.assert(aa !== bb, [aa, bb]);\n        };\n\n        local.base64FromBuffer = function (bff) {\n        /*\n         * https://developer.mozilla.org/en-US/Add-ons/Code_snippets/StringView#The_code\n         * this function will convert the Uint8Array-bff to base64-encoded-text\n         */\n            var ii, mod3, text, uint24, uint6ToB64;\n            text = '';\n            uint24 = 0;\n            uint6ToB64 = function (uint6) {\n                return uint6 < 26\n                    ? uint6 + 65\n                    : uint6 < 52\n                    ? uint6 + 71\n                    : uint6 < 62\n                    ? uint6 - 4\n                    : uint6 === 62\n                    ? 43\n                    : 47;\n            };\n            for (ii = 0; ii < bff.length; ii += 1) {\n                mod3 = ii % 3;\n                uint24 |= bff[ii] << (16 >>> mod3 & 24);\n                if (mod3 === 2 || bff.length - ii === 1) {\n                    text += String.fromCharCode(\n                        uint6ToB64(uint24 >>> 18 & 63),\n                        uint6ToB64(uint24 >>> 12 & 63),\n                        uint6ToB64(uint24 >>> 6 & 63),\n                        uint6ToB64(uint24 & 63)\n                    );\n                    uint24 = 0;\n                }\n            }\n            return text.replace(/A(?=A$|$)/g, '=');\n        };\n\n        local.base64FromHex = function (text) {\n        /*\n         * this function will convert the hex-text to base64-encoded-text\n         */\n            var bff, ii;\n            bff = [];\n            for (ii = 0; ii < text.length; ii += 2) {\n                bff.push(parseInt(text[ii] + text[ii + 1], 16));\n            }\n            return local.base64FromBuffer(bff);\n        };\n\n        local.base64FromString = function (text) {\n        /*\n         * this function will convert the utf8-text to base64-encoded-text\n         */\n            return local.base64FromBuffer(local.bufferCreate(text));\n        };\n\n        /* jslint-ignore-begin */\n        local.base64ToBuffer = function (text) {\n        /*\n         * https://gist.github.com/wang-bin/7332335\n         * this function will convert the base64-encoded text to Uint8Array\n         */\n            var de = new Uint8Array(text.length); //3/4\n            var u = 0, q = '', x = '', c;\n            var map64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n            for (var r=0; c=text[x++]; ~c&&(u=q%4?u*64+c:c,q++%4)?de[r++]=(255&u>>(-2*q&6)):0)\n                c = map64.indexOf(c);\n            return de.subarray(0, r);\n        };\n        /* jslint-ignore-end */\n\n        local.base64ToHex = function (text) {\n        /*\n         * this function will convert the base64-encoded-text to hex-text\n         */\n            var bff, ii;\n            bff = local.base64ToBuffer(text);\n            text = '';\n            for (ii = 0; ii < bff.length; ii += 1) {\n                text += (0x100 + bff[ii]).toString(16).slice(-2);\n            }\n            return text;\n        };\n\n        local.base64ToString = function (text) {\n        /*\n         * this function will convert the base64-encoded text to utf8-text\n         */\n            return local.bufferToString(local.base64ToBuffer(text));\n        };\n\n        local.blobRead = function (blob, encoding, onError) {\n        /*\n         * this function will read from the blob with the given encoding\n         * possible encodings are:\n         * - Uint8Array (default)\n         * - dataURL\n         * - text\n         */\n            var data, done, reader;\n            if (local.modeJs === 'node') {\n                switch (encoding) {\n                // readAsDataURL\n                case 'dataURL':\n                    data = 'data:' + (blob.type || '') + ';base64,' +\n                        local.base64FromBuffer(blob.bff);\n                    break;\n                // readAsText\n                case 'text':\n                    data = local.bufferToString(blob.bff);\n                    break;\n                // readAsArrayBuffer\n                default:\n                    data = local.bufferCreate(blob.bff);\n                }\n                onError(null, data);\n                return;\n            }\n            reader = new local.global.FileReader();\n            reader.onabort = reader.onerror = reader.onload = function (event) {\n                if (done) {\n                    return;\n                }\n                done = true;\n                switch (event.type) {\n                case 'abort':\n                case 'error':\n                    onError(new Error('blobRead - ' + event.type));\n                    break;\n                case 'load':\n                    onError(null, reader.result instanceof local.global.ArrayBuffer\n                        // convert ArrayBuffer to Uint8Array\n                        ? local.bufferCreate(reader.result)\n                        : reader.result);\n                    break;\n                }\n            };\n            switch (encoding) {\n            // readAsDataURL\n            case 'dataURL':\n                reader.readAsDataURL(blob);\n                break;\n            // readAsText\n            case 'text':\n                reader.readAsText(blob);\n                break;\n            // readAsArrayBuffer\n            default:\n                reader.readAsArrayBuffer(blob);\n            }\n        };\n\n        /* istanbul ignore next */\n        local.browserTest = function (options, onError) {\n        /*\n         * this function will spawn an electron process to test options.url\n         */\n            var done, modeNext, onNext, onParallel, timerTimeout;\n            if (typeof local === 'object' && local && local.modeJs === 'node') {\n                local.objectSetDefault(options, local.envSanitize(local.env));\n                options.timeoutDefault = options.timeoutDefault || local.timeoutDefault;\n            }\n            modeNext = Number(options.modeNext || 0);\n            onNext = function (error, data) {\n                modeNext = error instanceof Error\n                    ? Infinity\n                    : modeNext + 1;\n                switch (modeNext) {\n                // run node code\n                case 1:\n                    // init options\n                    if (!(/^\\w+:\\/\\//).test(options.url)) {\n                        options.url = local.path.resolve(process.cwd(), options.url);\n                    }\n                    options.urlParsed = local.urlParse(options.url);\n                    options.testName = options.urlParsed.pathname;\n                    if (local.env.npm_config_modeBrowserTestHostInclude) {\n                        options.testName = options.urlParsed.host + options.testName;\n                    }\n                    options.testName = local.env.MODE_BUILD + '.browser.' +\n                        encodeURIComponent(options.testName\n                            .replace(\n                                '/build..' + local.env.CI_BRANCH + '..' + local.env.CI_HOST,\n                                '/build'\n                            ));\n                    local.objectSetDefault(options, {\n                        fileCoverage: local.env.npm_config_dir_tmp +\n                            '/coverage.' + options.testName + '.json',\n                        fileScreenCapture: (local.env.npm_config_dir_build +\n                            '/screenCapture.' + options.testName + '.png'),\n                        fileTestReport: local.env.npm_config_dir_tmp +\n                            '/test-report.' + options.testName + '.json',\n                        modeBrowserTest: 'test',\n                        timeExit: Date.now() + options.timeoutDefault,\n                        timeoutScreenCapture: Number(options.timeoutScreenCapture || 10000)\n                    }, 1);\n                    // init timerTimeout\n                    timerTimeout = local.onTimeout(\n                        onNext,\n                        options.timeoutDefault,\n                        options.testName\n                    );\n                    // init file fileElectronHtml\n                    options.browserTestScript = local.browserTest\n                        .toString()\n                        .replace((/<\\//g), '<\\\\/')\n                        // coverage-hack - un-instrument\n                        .replace((/\\b__cov_.*?\\+\\+/g), '0');\n                    options.modeNext = 20;\n                    options.fileElectronHtml = local.env.npm_config_dir_tmp + '/electron.' +\n                        Date.now().toString(16) + Math.random().toString(16) + '.html';\n                    local.fsWriteFileWithMkdirpSync(options.fileElectronHtml, '<style>body {' +\n                            'border: 1px solid black;' +\n                            'margin: 0;' +\n                            'padding: 0;' +\n                        '}</style>' +\n                        '<webview id=webview1 preload=\"' + options.fileElectronHtml +\n                        '.preload.js\" src=\"' +\n                        options.url.replace('{{timeExit}}', options.timeExit) +\n                        '\" style=\"' +\n                            'border: none;' +\n                            'height: 100%;' +\n                            'margin: 0;' +\n                            'padding: 0;' +\n                            'width: 100%;' +\n                        '\"></webview>' +\n                        '<script>window.local = {}; (' + options.browserTestScript +\n                        '(' + JSON.stringify(options) + '))</script>');\n                    console.error('\\nbrowserTest - created electron entry-page ' +\n                        options.fileElectronHtml + '\\n');\n                    // init file fileElectronHtml.preload.js\n                    options.modeNext = 30;\n                    local.fsWriteFileWithMkdirpSync(\n                        options.fileElectronHtml + '.preload.js',\n                        '(' + options.browserTestScript + '(' + JSON.stringify(options) +\n                            '))'\n                    );\n                    // spawn an electron process to test a url\n                    options.modeNext = 10;\n                    local.processSpawnWithTimeout('electron', [\n                        __filename,\n                        'browserTest',\n                        '--disable-overlay-scrollbar',\n                        '--enable-logging'\n                    ], {\n                        env: options,\n                        stdio: options.modeSilent\n                            ? 'ignore'\n                            : ['ignore', 1, 2]\n                    }).once('exit', onNext);\n                    break;\n                case 2:\n                    // cleanup fileElectronHtml\n                    try {\n                        local.fs.unlinkSync(options.fileElectronHtml);\n                        local.fs.unlinkSync(options.fileElectronHtml + '.preload.js');\n                    } catch (ignore) {\n                    }\n                    console.error('\\nbrowserTest - exit-code ' + error + ' - ' + options.url +\n                        '\\n');\n                    // merge browser coverage\n                    if (options.modeCoverageMerge) {\n                        // try to JSON.parse the string\n                        local.tryCatchOnError(function () {\n                            data = JSON.parse(\n                                local.fs.readFileSync(options.fileCoverage, 'utf8')\n                            );\n                        }, local.nop);\n                        if (!local._debugTryCatchErrorCaught) {\n                            local.istanbulCoverageMerge(local.global.__coverage__, data);\n                            console.error('\\nbrowserTest - merged coverage from ' +\n                                options.fileCoverage + '\\n');\n                        }\n                    }\n                    if (options.modeBrowserTest !== 'test') {\n                        modeNext = Infinity;\n                        onNext();\n                        return;\n                    }\n                    // try to merge browser test-report\n                    local.tryCatchOnError(function () {\n                        data = JSON.parse(\n                            local.fs.readFileSync(options.fileTestReport, 'utf8')\n                        );\n                    }, local.nop);\n                    if (local._debugTryCatchErrorCaught) {\n                        onNext(local._debugTryCatchErrorCaught);\n                        return;\n                    }\n                    console.error('\\nbrowserTest - merging test-report from ' +\n                        options.fileTestReport + '\\n');\n                    if (!options.modeTestIgnore) {\n                        local.testReportMerge(local.testReport, data);\n                    }\n                    // create test-report.json\n                    local.fs.writeFileSync(\n                        local.env.npm_config_dir_build + '/test-report.json',\n                        JSON.stringify(local.testReport)\n                    );\n                    onNext(data && data.testsFailed && new Error(data.testsFailed));\n                    break;\n                // run electron-node code\n                case 11:\n                    local.electron = require('electron');\n                    // handle uncaughtexception\n                    process.once('uncaughtException', onNext);\n                    // wait for electron to init\n                    local.electron.app.once('ready', onNext);\n                    break;\n                case 12:\n                    options.BrowserWindow = local.electron.BrowserWindow;\n                    local.objectSetDefault(\n                        options,\n                        { frame: false, height: 768, width: 1024, x: 0, y: 0 }\n                    );\n                    // init browserWindow\n                    options.browserWindow = new options.BrowserWindow(options);\n                    onParallel = local.onParallel(onNext);\n                    onParallel.counter += 1;\n                    options.browserWindow.on('page-title-updated', function (event, title) {\n                        if ((!event || title).indexOf(options.fileElectronHtml) === 0) {\n                            onParallel();\n                        }\n                    });\n                    // load url in browserWindow\n                    options.browserWindow.loadURL('file://' + options.fileElectronHtml);\n                    break;\n                case 13:\n                    console.error('\\nbrowserTest - opened url ' + options.url + '\\n');\n                    onParallel.counter += 1;\n                    if (options.modeBrowserTest === 'test') {\n                        onParallel.counter += 1;\n                    }\n                    onParallel.counter += 1;\n                    setTimeout(function () {\n                        options.browserWindow.capturePage(options, function (data) {\n                            local.fs.writeFileSync(options.fileScreenCapture, data.toPng());\n                            console.error('\\nbrowserTest - created screenCapture file://' +\n                                options.fileScreenCapture + '\\n');\n                            onParallel();\n                        });\n                    }, options.timeoutScreenCapture);\n                    break;\n                case 14:\n                    console.error('browserTest - created screenCapture file://' +\n                        options.fileScreenCapture.replace((/\\.\\w+$/), '.html'));\n                    onNext();\n                    break;\n                // run electron-browserWindow code\n                case 21:\n                    options.fs = require('fs');\n                    options.webview1 = document.querySelector('#webview1');\n                    options.webview1.addEventListener('did-get-response-details', function () {\n                        document.title = options.fileElectronHtml + ' url opened';\n                    });\n                    options.webview1.addEventListener('console-message', function (event) {\n                        modeNext = 21;\n                        try {\n                            onNext(null, event);\n                        } catch (errorCaught) {\n                            console.error(errorCaught);\n                        }\n                    });\n                    break;\n                case 22:\n                    data.tmp = data.message\n                        .slice(0, 1024)\n                        .split(options.fileElectronHtml + ' ')\n                        .slice(0, 2);\n                    if (data.tmp.length >= 2) {\n                        data.tmp[1] = data.tmp[1].split(' ')[0];\n                        data.tmp[2] = data.message\n                            .slice(data.tmp.join(options.fileElectronHtml + ' ').length + 1);\n                    }\n                    switch (data.tmp[1]) {\n                    case 'global_test_results':\n                        options.global_test_results =\n                            JSON.parse(data.tmp[2]).global_test_results;\n                        if (options.global_test_results.testReport) {\n                            // merge screenCapture into test-report\n                            options.global_test_results.testReport.testPlatformList[0]\n                                .screenCaptureImg =\n                                options.fileScreenCapture.replace((/.*\\//), '');\n                            // save browser test-report\n                            options.fs.writeFileSync(\n                                options.fileTestReport,\n                                JSON.stringify(options.global_test_results.testReport)\n                            );\n                            // save browser coverage\n                            if (options.global_test_results.coverage) {\n                                require('fs').writeFileSync(\n                                    options.fileCoverage,\n                                    JSON.stringify(options.global_test_results.coverage)\n                                );\n                            }\n                            document.title = options.fileElectronHtml + ' testReport written';\n                        }\n                        break;\n                    case 'html':\n                        options.fs.writeFileSync(\n                            options.fileScreenCapture.replace((/\\.\\w+$/), '.html'),\n                            data.tmp[2]\n                        );\n                        document.title = options.fileElectronHtml + ' html written';\n                        break;\n                    default:\n                        console.error(data.message);\n                    }\n                    break;\n                // run electron-webview code\n                case 31:\n                    window.fileElectronHtml = options.fileElectronHtml;\n                    // message html back to browserWindow\n                    setTimeout(function () {\n                        console.error(options.fileElectronHtml + ' html ' +\n                            document.documentElement.outerHTML);\n                    }, options.timeoutScreenCapture);\n                    break;\n                default:\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    // cleanup timerTimeout\n                    clearTimeout(timerTimeout);\n                    onError(error);\n                }\n            };\n            onNext();\n        };\n\n        local.bufferConcat = function (bufferList) {\n        /*\n         * this function will emulate node's Buffer.concat for Uint8Array in the browser\n         */\n            var ii, jj, length, result;\n            length = 0;\n            bufferList = bufferList\n                .filter(function (element) {\n                    return element || element === 0;\n                })\n                .map(function (element) {\n                    // convert number to string\n                    if (typeof element === 'number') {\n                        element = String(element);\n                    }\n                    // convert non-Uint8Array to Uint8Array\n                    element = local.bufferCreateIfNotBuffer(element);\n                    length += element.length;\n                    return element;\n                });\n            result = local.bufferCreate(length);\n            ii = 0;\n            bufferList.forEach(function (element) {\n                for (jj = 0; jj < element.length; ii += 1, jj += 1) {\n                    result[ii] = element[jj];\n                }\n            });\n            return result;\n        };\n\n        local.bufferCreate = function (text) {\n        /*\n         * this function will create a Uint8Array from the text,\n         * with either 'utf8' (default) or 'base64' encoding\n         */\n            if (typeof text === 'string') {\n                if (local.modeJs === 'node') {\n                    return new Buffer(text);\n                }\n                if (local.global.TextEncoder) {\n                    return new local.global.TextEncoder('utf-8').encode(text);\n                }\n// bug-workaround - TextEncoder.encode polyfill\n/* jslint-ignore-begin */\n// utility2-uglifyjs https://github.com/feross/buffer/blob/v4.9.1/index.js#L1670\n/* istanbul ignore next */\nfunction utf8ToBytes(e,t){t=t||Infinity;var n,r=e.length,i=null,s=[];for(var o=0\n;o<r;++o){n=e.charCodeAt(o);if(n>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&s\n.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&s.push(239,191,189);continue}\ni=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),i=n;continue}n=(i-55296<<10|\nn-56320)+65536}else i&&(t-=3)>-1&&s.push(239,191,189);i=null;if(n<128){if((t-=1)<0\n)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,n&63|128)}else if(\nn<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,n&63|128)}else{if(!(n<1114112\n))throw new Error(\"Invalid code point\");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128\n,n>>6&63|128,n&63|128)}}return s}\nreturn new local.global.Uint8Array(utf8ToBytes(text));\n/* jslint-ignore-end */\n            }\n            return new local.global.Uint8Array(text);\n        };\n\n        local.bufferCreateIfNotBuffer = function (text) {\n        /*\n         * this function will create a Uint8Array from the text with the given encoding,\n         * if it is not already a Uint8Array\n         */\n            return text instanceof local.global.Uint8Array\n                ? text\n                : local.bufferCreate(text);\n        };\n\n        local.bufferIndexOfSubBuffer = function (bff, subBff, fromIndex) {\n        /*\n         * this function will search bff for the indexOf-like position of the subBff\n         */\n            var ii, jj, kk;\n            for (ii = fromIndex || 0; ii < bff.length; ii += 1) {\n                for (jj = 0, kk = ii; jj < subBff.length; jj += 1, kk += 1) {\n                    if (subBff[jj] !== bff[kk]) {\n                        break;\n                    }\n                }\n                if (jj === subBff.length) {\n                    return kk - jj;\n                }\n            }\n            return subBff.length && -1;\n        };\n\n        local.bufferRandomBytes = function (length) {\n        /*\n         * this function will create create a Uint8Array with the given length,\n         * filled with random bytes\n         */\n            var bff, ii;\n            bff = new local.global.Uint8Array(length);\n            for (ii = 0; ii < bff.length; ii += 1) {\n                bff[ii] = Math.random() * 0x100;\n            }\n            return bff;\n        };\n\n        local.bufferToNodeBuffer = function (bff) {\n        /*\n         * this function will convert the Uint8Array instance to a node Buffer instance\n         */\n            if (local.modeJs === 'node' &&\n                    bff instanceof local.global.Uint8Array && (!Buffer.isBuffer(bff))) {\n                Object.setPrototypeOf(bff, Buffer.prototype);\n            }\n            return bff;\n        };\n\n        local.bufferToString = function (bff) {\n        /*\n         * this function will convert the Uint8Array bff to a utf8 string\n         */\n            bff = bff || '';\n            if (typeof bff === 'string') {\n                return bff;\n            }\n            bff = local.bufferCreateIfNotBuffer(bff);\n            if (local.modeJs === 'node') {\n                return new Buffer(bff).toString();\n            }\n            if (local.global.TextDecoder) {\n                return new local.global.TextDecoder('utf-8').decode(bff);\n            }\n// bug-workaround - TextDecoder.decode polyfill\n/* jslint-ignore-begin */\n// http://stackoverflow.com/questions/17191945/conversion-between-utf-8-arraybuffer-and-string\nfunction Utf8ArrayToStr(e){var t,n,r,i,s,o;t=\"\",r=e.length,n=0;while(n<r){i=e[n++\n];switch(i>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:t+=String\n.fromCharCode(i);break;case 12:case 13:s=e[n++],t+=String.fromCharCode((i&31)<<6|\ns&63);break;case 14:s=e[n++],o=e[n++],t+=String.fromCharCode((i&15)<<12|(s&63)<<6|\n(o&63)<<0)}}return t}\nreturn Utf8ArrayToStr(bff);\n/* jslint-ignore-end */\n        };\n\n        local.buildApidoc = function (options, onError) {\n        /*\n         * this function will build the apidoc\n         */\n            if (local.env.npm_package_buildCustomOrg && !options.modeForce) {\n                onError();\n                return;\n            }\n            // optimization - do not run if $npm_config_mode_coverage = all\n            if (local.env.npm_config_mode_coverage === 'all') {\n                onError();\n                return;\n            }\n            local.objectSetDefault(options, { blacklistDict: local });\n            // create apidoc.html\n            local.fsWriteFileWithMkdirpSync(\n                local.env.npm_config_dir_build + '/apidoc.html',\n                local.apidocCreate(options)\n            );\n            console.error('created apidoc file://' + local.env.npm_config_dir_build +\n                '/apidoc.html\\n');\n            onError();\n        };\n\n        local.buildApp = function (options, onError) {\n        /*\n         * this function will build the app\n         */\n            var writeFileSync;\n            local.fsRmrSync(local.env.npm_config_dir_build + '/app');\n            local.onParallelList({ list: options.concat([{\n                file: '/assets.' + local.env.npm_package_nameAlias + '.js',\n                url: '/assets.' + local.env.npm_package_nameAlias + '.js'\n            }, {\n                file: '/assets.' + local.env.npm_package_nameAlias + '.rollup.js',\n                url: '/assets.' + local.env.npm_package_nameAlias + '.rollup.js'\n            }, {\n                file: '/assets.app.js',\n                url: '/assets.app.js'\n            }, {\n                file: '/assets.example.js',\n                url: '/assets.example.js'\n            }, {\n                file: '/assets.test.js',\n                url: '/assets.test.js'\n            }, {\n                file: '/assets.utility2.rollup.js',\n                url: '/assets.utility2.rollup.js'\n            }, {\n                file: '/index.html',\n                url: '/index.html'\n            }, {\n                file: '/jsonp.utility2._stateInit',\n                url: '/jsonp.utility2._stateInit?callback=window.utility2._stateInit'\n            }]) }, function (options, onParallel) {\n                options = options.element;\n                onParallel.counter += 1;\n                local.ajax(options, function (error, xhr) {\n                    // validate no error occurred\n                    local.assert(!error, error);\n                    // jslint file\n                    local.jslintAndPrintConditional(xhr.responseText, options.file);\n                    // validate no error occurred\n                    local.assert(!local.jslint.errorText, local.jslint.errorText);\n                    local.fsWriteFileWithMkdirpSync(\n                        local.env.npm_config_dir_build + '/app' + options.file,\n                        new Buffer(xhr.response)\n                    );\n                    onParallel();\n                });\n            }, function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n                // coverage-hack\n                writeFileSync = local.fs.writeFileSync;\n                local.nop(local.global.__coverage__ && (function () {\n                    writeFileSync = local.nop;\n                }()));\n                writeFileSync(\n                    'assets.' + local.env.npm_package_nameAlias + '.rollup.js',\n                    local.assetsDict['/assets.' + local.env.npm_package_nameAlias +\n                        '.rollup.js']\n                );\n                // test standalone assets.app.js\n                local.fs.writeFileSync('tmp/assets.app.js', local.assetsDict['/assets.app.js']);\n                local.processSpawnWithTimeout(process.argv[0], ['assets.app.js'], {\n                    cwd: 'tmp',\n                    env: {\n                        PORT: (Math.random() * 0x10000) | 0x8000,\n                        npm_config_timeout_exit: 5000\n                    },\n                    stdio: ['ignore', 1, 2]\n                })\n                    .once('error', onError)\n                    .once('exit', function (exitCode) {\n                        // validate exitCode\n                        local.assert(!exitCode, exitCode);\n                        onError();\n                    });\n            });\n        };\n\n        local.buildCustomOrg = function (options, onError) {\n        /*\n         * this function will build the customOrg\n         */\n            var done, onError2, onParallel;\n            if (!local.env.npm_package_buildCustomOrg && !options.modeForce) {\n                onError();\n                return;\n            }\n            // ensure exit after 5 minutes\n            setTimeout(process.exit, 5 * 60 * 1000);\n            onError2 = function (error) {\n                local.onErrorDefault(error);\n                if (done) {\n                    return;\n                }\n                done = true;\n                // try to recover from error\n                setTimeout(onError, error && local.timeoutDefault);\n            };\n            // try to salvage uncaughtException\n            process.on('uncaughtException', onError2);\n            onParallel = local.utility2.onParallel(onError2);\n            onParallel.counter += 1;\n            // build package.json\n            options.packageJson = JSON.parse(local.fs.readFileSync('package.json', 'utf8'));\n            onParallel.counter += 1;\n            local.buildReadme({\n                dataFrom: '\\n# package.json\\n```json\\n' + JSON.stringify(options.packageJson) +\n                    '\\n```\\n',\n                modeForce: true\n            }, onParallel);\n            options.packageJson = JSON.parse(local.fs.readFileSync('package.json', 'utf8'));\n            switch (local.env.GITHUB_ORG) {\n            case 'npmdoc':\n                // update package.json\n                local.objectSetOverride(options.packageJson, local.objectLiteralize({\n                    keywords: ['documentation', local.env.npm_package_buildCustomOrg]\n                }), 2);\n                // build apidoc.html\n                onParallel.counter += 1;\n                local.buildApidoc({\n                    dir: local.env.npm_package_buildCustomOrg,\n                    modeForce: true,\n                    modulePathList: options.modulePathList\n                }, onParallel);\n                // build README.md\n                options.readme = local.apidocCreate({\n                    dir: local.env.npm_package_buildCustomOrg,\n                    header: local.assetsDict['/assets.readmeCustomOrgNpmdocHeader.template.md'],\n                    modulePathList: options.modulePathList,\n                    template: local.apidoc.templateApidocMd\n                });\n                local.fs.writeFileSync('README.md', options.readme);\n                break;\n            case 'npmtest':\n                // update package.json\n                local.objectSetOverride(options.packageJson, local.objectLiteralize({\n                    keywords: ['coverage', 'test', local.env.npm_package_buildCustomOrg]\n                }), 2);\n                // build README.md\n                options.readme = local.apidocCreate({\n                    dir: local.env.npm_package_buildCustomOrg,\n                    modeRenderFast: true,\n                    modulePathList: options.modulePathList,\n                    template: local.assetsDict['/assets.readmeCustomOrgNpmtest.template.md']\n                });\n                local.fs.writeFileSync('README.md', options.readme);\n                break;\n            }\n            // re-build package.json\n            options.packageJson.description = (/\\w.*/).exec(options.readme)[0]\n                .replace((/ {2,}/g), ' ')\n                .trim();\n            local.fs.writeFileSync(\n                'package.json',\n                local.jsonStringifyOrdered(options.packageJson, null, 4) + '\\n'\n            );\n            onParallel();\n        };\n\n        local.buildLib = function (options, onError) {\n        /*\n         * this function will build the lib\n         */\n            local.objectSetDefault(options, {\n                customize: local.nop,\n                dataFrom: local.tryCatchReadFile(\n                    'lib.' + local.env.npm_package_nameAlias + '.js',\n                    'utf8'\n                ),\n                dataTo: local.templateRenderJslintLite(\n                    local.assetsDict['/assets.lib.template.js'],\n                    {}\n                )\n            });\n            // search-and-replace - customize dataTo\n            [\n                // customize body before istanbul\n                (/[\\S\\s]*?^\\/\\* istanbul instrument in package /m),\n                // customize body after init exports\n                (/\\n {12}module.exports.module = module;\\n[\\S\\s]*?$/)\n            ].forEach(function (rgx) {\n                // handle large string-replace\n                options.dataFrom.replace(rgx, function (match0) {\n                    options.dataTo.replace(rgx, function (match1) {\n                        options.dataTo = options.dataTo.split(match1);\n                        options.dataTo[0] += match0;\n                        options.dataTo[0] += options.dataTo.splice(1, 1)[0];\n                        options.dataTo = options.dataTo.join(match1);\n                    });\n                });\n            });\n            options.customize();\n            // save lib.xxx.js\n            local.fs.writeFileSync(\n                'lib.' + local.env.npm_package_nameAlias + '.js',\n                options.dataTo\n            );\n            onError();\n        };\n\n        local.buildReadme = function (options, onError) {\n        /*\n         * this function will build the readme in jslint-lite style\n         */\n            if (local.env.npm_package_buildCustomOrg && !options.modeForce) {\n                onError();\n                return;\n            }\n            local.objectSetDefault(options, {\n                customize: local.nop,\n                dataFrom: local.tryCatchReadFile('README.md', 'utf8')\n            });\n            // init package.json\n            options.rgx = (/\\n# package.json\\n```json\\n([\\S\\s]*?)\\n```\\n/);\n            options.dataFrom.replace(options.rgx, function (match0, match1) {\n                options.packageJson = JSON.parse(match1);\n                options.packageJson.description = options.dataFrom.split('\\n')[1];\n                local.objectSetDefault(options.packageJson, {\n                    nameAlias: options.packageJson.name.replace((/\\W/g), '_'),\n                    nameOriginal: options.packageJson.name\n                });\n                local.objectSetDefault(\n                    options.packageJson,\n                    JSON.parse(local.templateRenderJslintLite(\n                        options.rgx.exec(local.assetsDict['/assets.readme.template.md'])[1],\n                        options\n                    )),\n                    2\n                );\n                // avoid npm-installing self\n                delete options.packageJson.devDependencies[options.packageJson.name];\n                // save package.json\n                local.fs.writeFileSync(\n                    'package.json',\n                    local.jsonStringifyOrdered(options.packageJson, null, 4) + '\\n'\n                );\n                // update dataTo\n                options.dataTo = local.templateRenderJslintLite(\n                    local.assetsDict['/assets.readme.template.md'],\n                    options\n                );\n                options.dataTo = options.dataTo.replace(\n                    options.rgx,\n                    match0.replace(\n                        match1,\n                        local.jsonStringifyOrdered(options.packageJson, null, 4)\n                    )\n                );\n            });\n            // search-and-replace - customize dataTo\n            [\n                // customize header\n                (/.*?\\n.*?\\n/),\n                // customize todo\n                (/\\n#### todo\\n[\\S\\s]*?\\n\\n\\n\\n/),\n                // customize quickstart-header\n                (/\\n```javascript\\n\\/\\*\\nexample\\.js\\n\\n[^`]*?\\n/),\n                (/\\n {8}\\$ npm install [^`]*? &&/),\n                (/\\n {12}: global;\\n[^`]*?\\n {8}local\\.global\\.local = local;\\n/),\n                (/\\n {8}local\\.global\\.local = local;\\n[^`]*?\\n {4}\\/\\/ post-init\\n/),\n                new RegExp('\\\\n {8}local\\\\.testRunBrowser = function \\\\(event\\\\) \\\\{\\\\n' +\n                    '[^`]*?^ {12}if \\\\(!event \\\\|\\\\| \\\\(event &&\\\\n', 'm'),\n                (/\\n {12}\\/\\/ custom-case\\n[^`]*?\\n {12}\\}\\n/),\n                // customize quickstart-html-style\n                (/\\n<\\/style>\\\\n\\\\\\n<style>\\\\n\\\\\\n[^`]*?\\\\n\\\\\\n<\\/style>\\\\n\\\\\\n/),\n                // customize quickstart-html-body\n                (/\\nutility2-comment -->(?:\\\\n\\\\\\n){4}[^`]*?^<!-- utility2-comment\\\\n\\\\\\n/m),\n                // customize build-script\n                (/\\n# internal build-script\\n[\\S\\s]*?^- build_ci\\.sh\\n/m),\n                (/\\nshBuildCiPost\\(\\) \\{\\(set -e\\n[^`]*?\\n\\)\\}\\n/),\n                (/\\nshBuildCiPre\\(\\) \\{\\(set -e\\n[^`]*?\\n\\)\\}\\n/)\n            ].forEach(function (rgx) {\n                // handle large string-replace\n                options.dataFrom.replace(rgx, function (match0) {\n                    options.dataTo.replace(rgx, function (match1) {\n                        options.dataTo = options.dataTo.split(match1);\n                        options.dataTo[0] += match0;\n                        options.dataTo[0] += options.dataTo.splice(1, 1)[0];\n                        options.dataTo = options.dataTo.join(match1);\n                    });\n                });\n            });\n            // customize comment\n            options.dataFrom.replace(\n                (/^( *?)(?:#!! |#\\/\\/ |\\/\\/!!)(.*?)$/gm),\n                function (match0, match1, match2) {\n                    options.dataTo = options.dataTo.replace(match1 + match2, match0);\n                }\n            );\n            options.customize();\n            // save README.md\n            local.fs.writeFileSync('README.md', options.dataTo);\n            onError();\n        };\n\n        local.buildTest = function (options, onError) {\n        /*\n         * this function will build the test\n         */\n            local.objectSetDefault(options, {\n                customize: local.nop,\n                dataFrom: local.tryCatchReadFile('test.js', 'utf8'),\n                dataTo: local.templateRenderJslintLite(\n                    local.assetsDict['/assets.test.template.js'],\n                    {}\n                )\n            });\n            // search-and-replace - customize dataTo\n            [\n                // customize js\\-env code\n                new RegExp('\\\\n {4}\\\\/\\\\/ run shared js\\\\-env code - pre-init\\\\n[\\\\S\\\\s]*?' +\n                    '^ {4}\\\\(function \\\\(\\\\) \\\\{\\\\n', 'm'),\n                (/\\n {8}local.global.local = local;\\n[\\S\\s]*?^ {4}\\}\\(\\)\\);\\n/m),\n                (/\\n {4}\\/\\/ run shared js\\-env code - function\\n[\\S\\s]*?\\n {4}\\}\\(\\)\\);\\n/),\n                (/\\n {4}\\/\\/ run browser js\\-env code - function\\n[\\S\\s]*?\\n {8}break;\\n/),\n                (/\\n {4}\\/\\/ run node js\\-env code - function\\n[\\S\\s]*?\\n {8}break;\\n/),\n                new RegExp('\\\\n {4}\\\\/\\\\/ run browser js\\\\-env code - post-init\\\\n[\\\\S\\\\s]*?' +\n                    '^ {4}case \\'browser\\':\\n', 'm'),\n                (/\\n {4}\\/\\/ run shared js\\-env code - post-init\\n[\\S\\s]*?\\n {4}\\}\\(\\)\\);\\n/)\n            ].forEach(function (rgx) {\n                // handle large string-replace\n                options.dataFrom.replace(rgx, function (match0) {\n                    options.dataTo.replace(rgx, function (match1) {\n                        options.dataTo = options.dataTo.split(match1);\n                        options.dataTo[0] += match0;\n                        options.dataTo[0] += options.dataTo.splice(1, 1)[0];\n                        options.dataTo = options.dataTo.join(match1);\n                    });\n                });\n            });\n            options.customize();\n            // save test.js\n            local.fs.writeFileSync('test.js', options.dataTo);\n            onError();\n        };\n\n        local.cookieDict = function () {\n        /*\n         * this function will return a dict of all cookies\n         */\n            var result;\n            result = {};\n            document.cookie.replace((/(\\w+)=([^;]*)/g), function (match0, match1, match2) {\n                // jslint-hack\n                local.nop(match0);\n                result[match1] = match2;\n            });\n            return result;\n        };\n\n        local.cookieRemove = function (name) {\n        /*\n         * this function will remove the cookie with the given name\n         */\n            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n        };\n\n        local.cookieRemoveAll = function () {\n        /*\n         * this function will remove all cookies\n         */\n            document.cookie.replace((/(\\w+)=/g), function (match0, match1) {\n                // jslint-hack\n                local.nop(match0);\n                document.cookie = match1 + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n            });\n        };\n\n        local.cookieSet = function (name, value, expiresOffset) {\n        /*\n         * this function will set the cookie with the given name, value,\n         * and expiresOffset (in ms)\n         */\n            var tmp;\n            tmp = name + '=' + value + '; expires=' +\n                new Date(Date.now() + expiresOffset).toUTCString();\n            document.cookie = tmp;\n            return tmp;\n        };\n\n        local.dbTableTravisOrgCreate = function (options, onError) {\n        /*\n         * this function will create a persistent dbTableTravisOrg\n         */\n            options = local.objectSetDefault(options, { githubOrg: local.env.GITHUB_ORG });\n            options = local.objectSetDefault(options, {\n                name: 'TravisOrg.' + options.githubOrg,\n                sizeLimit: 1000,\n                sortDefault: [{\n                    fieldName: '_id'\n                }, {\n                    fieldName: 'buildFinishedAt'\n                }, {\n                    fieldName: 'buildState'\n                }, {\n                    fieldName: 'active'\n                }]\n            });\n            local.dbTableTravisOrg = local.db.dbTableCreateOne(options, onError);\n            return local.dbTableTravisOrg;\n        };\n\n        local.dbTableTravisOrgUpdate = function (options, onError) {\n        /*\n         * this function will update dbTableTravisOrg with active, public repos\n         */\n            var dbRowList, self;\n            options = local.objectSetDefault(options, { githubOrg: local.env.GITHUB_ORG });\n            local.onNext(options, function (error, data) {\n                switch (options.modeNext) {\n                case 1:\n                    self = local.dbTableTravisOrg =\n                        local.dbTableTravisOrgCreate(options, options.onNext);\n                    break;\n                case 2:\n                    self = local.dbTableTravisOrg = data;\n                    data = {\n                        headers: {\n                            'Travis-API-Version': '3',\n                            Authorization: 'token ' + local.env.TRAVIS_ACCESS_TOKEN\n                        },\n                        url: 'https://api.travis-ci.org/repos?limit=1'\n                    };\n                    console.error('fetching ' + data.url + ' ...');\n                    local.ajax(data, options.onNext);\n                    break;\n                case 3:\n                    console.error('... fetched ' + data.url);\n                    data = JSON.parse(data.responseText);\n                    dbRowList = [];\n                    local.onParallelList({\n                        list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n                    }, function (options2, onParallel) {\n                        onParallel.counter += 1;\n                        options2 = {\n                            headers: {\n                                'Travis-API-Version': '3',\n                                Authorization: 'token ' + local.env.TRAVIS_ACCESS_TOKEN\n                            },\n                            url: 'https://api.travis-ci.org/repos?' +\n                                'include=repository.current_build&' +\n                                'limit=100&' +\n                                'offset=' +\n                                    (data['@pagination'].count - options2.element * 100) + '&' +\n                                'sort_by=current_build%3Adesc'\n                        };\n                        console.error('fetching ' + options2.url + ' ...');\n                        local.ajax(options2, function (error, data) {\n                            // validate no error occurred\n                            local.assert(!error, error);\n                            dbRowList = dbRowList\n                                .concat(JSON.parse(data.responseText).repositories);\n                            console.error('... fetched ' + options2.url);\n                            onParallel();\n                        });\n                    }, options.onNext);\n                    break;\n                case 4:\n                    self.crudSetManyById(dbRowList\n                        .filter(function (dbRow) {\n                            return dbRow.private === false && dbRow.slug.indexOf(\n                                options.githubOrg + '/node-' + options.githubOrg + '-'\n                            ) === 0;\n                        })\n                        .map(function (dbRow) {\n                            data = dbRow.current_build || {};\n                            return {\n                                _id: dbRow.name,\n                                active: dbRow.active,\n                                buildFinishedAt: data.finished_at,\n                                buildState: data.state\n                            };\n                        }), options.onNext);\n                    break;\n                default:\n                    local.setTimeoutOnError(onError, error, self);\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n            return self;\n        };\n\n        local.domFragmentRender = function (template, dict) {\n        /*\n         * this function will return a dom-fragment rendered from the givent template and dict\n         */\n            var tmp;\n            tmp = document.createElement('template');\n            tmp.innerHTML = local.templateRender(template, dict);\n            return tmp.content;\n        };\n\n        local.echo = function (arg) {\n        /*\n         * this function will return the arg\n         */\n            return arg;\n        };\n\n        local.envKeyIsSensitive = function (key) {\n        /*\n         * this function will try to determine if the env-key is sensitive\n         */\n            return (/(?:\\b|_)(?:decrypt|key|pass|private|secret|token)/)\n                .test(key.toLowerCase()) ||\n                (/Decrypt|Key|Pass|Private|Secret|Token/).test(key);\n        };\n\n        local.envSanitize = function (env) {\n        /*\n         * this function will return a sanitized copy of the env object,\n         * with sensitive env-vars removed\n         */\n            var result;\n            result = {};\n            Object.keys(env).forEach(function (key) {\n                if (!local.envKeyIsSensitive(key) &&\n                        typeof env[key] === 'string' &&\n                        env[key].length <= 4096) {\n                    result[key] = env[key];\n                }\n            });\n            return result;\n        };\n\n        local.errorMessagePrepend = function (error, message) {\n        /*\n         * this function will prepend the message to error.message and error.stack\n         */\n            error.message = message + error.message;\n            error.stack = message + error.stack;\n            return error;\n        };\n\n        local.exit = function (exitCode) {\n        /*\n         * this function will exit the current process with the given exitCode\n         */\n            exitCode = !exitCode || Number(exitCode) === 0\n                ? 0\n                : Number(exitCode) || 1;\n            switch (local.modeJs) {\n            case 'browser':\n                console.error(local.global.fileElectronHtml + ' global_test_results ' +\n                    JSON.stringify({ global_test_results: local.global.global_test_results }));\n                break;\n            case 'node':\n                process.exit(exitCode);\n                break;\n            }\n            // reset modeTest\n            local.modeTest = null;\n        };\n\n        local.fsRmrSync = function (dir) {\n        /*\n         * this function will synchronously 'rm -fr' the dir\n         */\n            local.child_process.spawnSync(\n                'rm',\n                ['-fr', local.path.resolve(process.cwd(), dir)],\n                { stdio: ['ignore', 1, 2] }\n            );\n        };\n\n        local.fsWriteFileWithMkdirpSync = function (file, data) {\n        /*\n         * this function will synchronously 'mkdir -p' and write the data to file\n         */\n            // try to write to file\n            try {\n                require('fs').writeFileSync(file, data);\n            } catch (errorCaught) {\n                // mkdir -p\n                require('child_process').spawnSync(\n                    'mkdir',\n                    ['-p', require('path').dirname(file)],\n                    { stdio: ['ignore', 1, 2] }\n                );\n                // re-write to file\n                require('fs').writeFileSync(file, data);\n            }\n        };\n\n        local.httpRequest = function (options, onError) {\n        /*\n         * this function will request the data from options.url\n         */\n            var chunkList, onError2, timerTimeout, done, request, response, urlParsed;\n            // init onError2\n            onError2 = function (error) {\n                if (done) {\n                    return;\n                }\n                done = true;\n                // cleanup timerTimeout\n                clearTimeout(timerTimeout);\n                // cleanup request and response\n                [request, response].forEach(function (stream) {\n                    // try to end the stream\n                    try {\n                        stream.end();\n                    // else try to destroy the stream\n                    } catch (errorCaught) {\n                        try {\n                            stream.destroy();\n                        } catch (ignore) {\n                        }\n                    }\n                });\n                // debug response\n                console.error(new Date().toISOString() + ' http-response ' + JSON.stringify({\n                    method: options.method,\n                    url: options.url,\n                    statusCode: (response && response.statusCode) || 0\n                }));\n                onError(error, response);\n            };\n            // init timerTimeout\n            timerTimeout = setTimeout(function () {\n                onError2(new Error('http-request timeout'));\n            }, options.timeout || 30000);\n            urlParsed = require('url').parse(options.url);\n            urlParsed.headers = options.headers;\n            urlParsed.method = options.method;\n            // debug request\n            console.error();\n            console.error(new Date().toISOString() + ' http-request ' + JSON.stringify({\n                method: options.method,\n                url: options.url\n            }));\n            request = require(\n                urlParsed.protocol.slice(0, -1)\n            ).request(urlParsed, function (_response) {\n                response = _response;\n                if (response.statusCode < 200 || response.statusCode > 299) {\n                    onError2(new Error(response.statusCode));\n                    return;\n                }\n                chunkList = [];\n                response\n                    .on('data', function (chunk) {\n                        chunkList.push(chunk);\n                    })\n                    .on('end', function () {\n                        response.data = Buffer.concat(chunkList);\n                        onError2();\n                    })\n                    .on('error', onError2);\n            }).on('error', onError2);\n            request.end(options.data);\n        };\n\n        local.isNullOrUndefined = function (arg) {\n        /*\n         * this function will test if the arg is null or undefined\n         */\n            return arg === null || arg === undefined;\n        };\n\n        local.jslintAndPrintConditional = function (script, file, mode) {\n        /*\n         * this function will jslint / csslint the script and print any errors to stderr,\n         * conditionally\n         */\n            var extname;\n            // cleanup errors\n            local.jslint.errorCounter = 0;\n            local.jslint.errorText = '';\n            // optimization - ignore uglified/rollup files\n            if ((/\\bmin\\b|\\brollup\\b/).test(file)) {\n                return script;\n            }\n            extname = (/\\.\\w+$/).exec(file);\n            extname = extname && extname[0];\n            switch (extname) {\n            case '.css':\n                if (script.indexOf('/*csslint') >= 0 || mode === 'force') {\n                    local.jslintAndPrint(script, file);\n                }\n                break;\n            case '.html':\n                // csslint <style> tag\n                script.replace(\n                    (/<style>([\\S\\s]+?)<\\/style>/g),\n                    function (match0, match1, ii, text) {\n                        // jslint-hack\n                        local.nop(match0);\n                        // preserve lineno\n                        match1 = text.slice(0, ii).replace((/.+/g), '') + match1;\n                        local.jslintAndPrintConditional(match1, file + '.css', mode);\n                    }\n                );\n                // jslint <script> tag\n                script.replace(\n                    (/<script>([\\S\\s]+?)<\\/script>/g),\n                    function (match0, match1, ii, text) {\n                        // jslint-hack\n                        local.nop(match0);\n                        // preserve lineno\n                        match1 = text.slice(0, ii).replace((/.+/g), '') + match1;\n                        local.jslintAndPrintConditional(match1, file + '.js', mode);\n                    }\n                );\n                break;\n            case '.js':\n                if ((script.indexOf('/*jslint') >= 0 &&\n                        !local.global.__coverage__) || mode === 'force') {\n                    local.jslintAndPrint(script, file);\n                }\n                break;\n            }\n            return script;\n        };\n\n        local.jsonCopy = function (arg) {\n        /*\n         * this function will return a deep-copy of the JSON-arg\n         */\n            return arg === undefined\n                ? undefined\n                : JSON.parse(JSON.stringify(arg));\n        };\n\n        local.jsonStringifyOrdered = function (element, replacer, space) {\n        /*\n         * this function will JSON.stringify the element,\n         * with object-keys sorted and circular-references removed\n         */\n            var circularList, stringify, tmp;\n            stringify = function (element) {\n            /*\n             * this function will recursively JSON.stringify the element,\n             * with object-keys sorted and circular-references removed\n             */\n                // if element is an object, then recurse its items with object-keys sorted\n                if (element &&\n                        typeof element === 'object' &&\n                        typeof element.toJSON !== 'function') {\n                    // ignore circular-reference\n                    if (circularList.indexOf(element) >= 0) {\n                        return;\n                    }\n                    circularList.push(element);\n                    // if element is an array, then recurse its elements\n                    if (Array.isArray(element)) {\n                        return '[' + element.map(function (element) {\n                            // recurse\n                            tmp = stringify(element);\n                            return typeof tmp === 'string'\n                                ? tmp\n                                : 'null';\n                        }).join(',') + ']';\n                    }\n                    return '{' + Object.keys(element)\n                        // sort object-keys\n                        .sort()\n                        .map(function (key) {\n                            // recurse\n                            tmp = stringify(element[key]);\n                            if (typeof tmp === 'string') {\n                                return JSON.stringify(key) + ':' + tmp;\n                            }\n                        })\n                        .filter(function (element) {\n                            return typeof element === 'string';\n                        })\n                        .join(',') + '}';\n                }\n                // else JSON.stringify as normal\n                return JSON.stringify(element);\n            };\n            circularList = [];\n            return JSON.stringify(element && typeof element === 'object'\n                // recurse\n                ? JSON.parse(stringify(element))\n                : element, replacer, space);\n        };\n\n        local.jwtA256GcmDecrypt = function (token, key) {\n        /*\n         * https://tools.ietf.org/html/rfc7516\n         * this function will use json-web-encryption to\n         * aes-256-gcm-decrypt the token with the given base64url-encoded key\n         */\n            return local.tryCatchOnError(function () {\n                token = token\n                    .replace((/-/g), '+')\n                    .replace((/_/g), '/')\n                    .split('.');\n                token = local.sjcl.decrypt(local.sjcl.codec.base64url.toBits(\n                    local.jwtAes256KeyInit(key)\n                ), JSON.stringify({\n                    adata: token[4],\n                    ct: token[3],\n                    iv: token[2],\n                    ks: 256,\n                    mode: 'gcm'\n                }));\n                return local.jwtHs256Decode(token, key);\n            }, local.nop) || {};\n        };\n\n        local.jwtA256GcmEncrypt = function (data, key) {\n        /*\n         * https://tools.ietf.org/html/rfc7516\n         * this function will use json-web-encryption to\n         * aes-256-gcm-encrypt the data with the given base64url-encoded key\n         */\n            var adata;\n            adata = local.jwtAes256KeyCreate();\n            data = local.jwtHs256Encode(data, key);\n            data = JSON.parse(local.sjcl.encrypt(\n                local.sjcl.codec.base64url.toBits(local.jwtAes256KeyInit(key)),\n                data,\n                { adata: local.sjcl.codec.base64url.toBits(adata), ks: 256, mode: 'gcm' }\n            ));\n            return local.jwtBase64UrlNormalize('eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..' +\n                data.iv + '.' + data.ct + '.' + adata);\n        };\n\n        local.jwtAes256KeyCreate = function () {\n        /*\n         * this function will create a random, aes-256-base64url-jwt-key\n         */\n            return local.jwtBase64UrlNormalize(\n                local.base64FromBuffer(local.bufferRandomBytes(32))\n            );\n        };\n\n        local.jwtAes256KeyInit = function (key) {\n        /*\n         * https://jwt.io/\n         * this function will init the aes-256-base64url-jwt-key\n         */\n            // init npm_config_jwtAes256Key\n            local.env.npm_config_jwtAes256Key = local.env.npm_config_jwtAes256Key ||\n                'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';\n            return key || local.env.npm_config_jwtAes256Key;\n        };\n\n        local.jwtBase64UrlNormalize = function (text) {\n        /*\n         * this function will normlize the text to base64url format\n         */\n            return text\n                .replace((/\\=/g), '')\n                .replace((/\\+/g), '-')\n                .replace((/\\//g), '_');\n        };\n\n        local.jwtHs256Decode = function (token, key) {\n        /*\n         * https://jwt.io/\n         * this function will decode the json-web-token with the given base64-encode key\n         */\n            var timeNow;\n            timeNow = Date.now() / 1000;\n            // try to decode the token\n            return local.tryCatchOnError(function () {\n                token = token.split('.');\n                // validate header\n                local.assert(token[0] === 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', token);\n                // validate signature\n                local.assert(local.sjcl.codec.base64url.fromBits(\n                    new local.sjcl.misc.hmac(local.sjcl.codec.base64url.toBits(\n                        local.jwtAes256KeyInit(key)\n                    )).encrypt(token[0] + '.' + token[1])\n                ) === token[2]);\n                // return decoded data\n                token = JSON.parse(local.base64ToString(token[1]));\n                // https://tools.ietf.org/html/rfc7519#section-4.1\n                // validate jwt-registered-headers\n                local.assert(!token.exp || token.exp >= timeNow);\n                local.assert(!token.nbf || token.nbf <= timeNow);\n                return token;\n            }, local.nop) || {};\n        };\n\n        local.jwtHs256Encode = function (data, key) {\n        /*\n         * https://jwt.io/\n         * this function will encode the data into a json-web-token\n         * with the given base64-encode key\n         */\n            data = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.' +\n                local.jwtBase64UrlNormalize(local.base64FromString(JSON.stringify(data)));\n            return data + '.' + local.sjcl.codec.base64url.fromBits(\n                new local.sjcl.misc.hmac(local.sjcl.codec.base64url.toBits(\n                    local.jwtAes256KeyInit(key)\n                )).encrypt(data)\n            );\n        };\n\n        local.jwtNormalize = function (data) {\n        /*\n         * https://tools.ietf.org/html/rfc7519#section-4.1\n         * this function will normalize the jwt-data with registered-headers\n         */\n            var timeNow;\n            timeNow = Date.now() / 1000;\n            return local.objectSetDefault(data, {\n                exp: timeNow + 5 * 60,\n                iat: timeNow,\n                jti: Math.random().toString(16).slice(2),\n                nbf: timeNow\n            });\n        };\n\n        local.listGetElementRandom = function (list) {\n        /*\n         * this function will return a random element from the list\n         */\n            return list[Math.floor(list.length * Math.random())];\n        };\n\n        local.listShuffle = function (list) {\n        /*\n         * https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n         * this function will inplace shuffle the list, via fisher-yates algorithm\n         */\n            var ii, random, swap;\n            for (ii = list.length - 1; ii > 0; ii -= 1) {\n                // coerce to finite integer\n                random = (Math.random() * (ii + 1)) | 0;\n                swap = list[ii];\n                list[ii] = list[random];\n                list[random] = swap;\n            }\n            return list;\n        };\n\n        local.middlewareAssetsCached = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will serve cached-assets\n         */\n            var options;\n            options = {};\n            local.onNext(options, function (error, data) {\n                options.result = options.result || local.assetsDict[request.urlParsed.pathname];\n                if (options.result === undefined) {\n                    nextMiddleware(error);\n                    return;\n                }\n                switch (options.modeNext) {\n                case 1:\n                    // skip gzip\n                    if (response.headersSent ||\n                            !(/\\bgzip\\b/).test(request.headers['accept-encoding'])) {\n                        options.modeNext += 1;\n                        options.onNext();\n                        return;\n                    }\n                    // gzip and cache result\n                    local.taskCreateCached({\n                        cacheDict: 'middlewareAssetsCachedGzip',\n                        key: request.urlParsed.pathname\n                    }, function (onError) {\n                        local.zlib.gzip(options.result, function (error, data) {\n                            onError(error, !error && data.toString('base64'));\n                        });\n                    }, options.onNext);\n                    break;\n                case 2:\n                    // set gzip header\n                    options.result = local.base64ToBuffer(data);\n                    response.setHeader('Content-Encoding', 'gzip');\n                    response.setHeader('Content-Length', options.result.length);\n                    options.onNext();\n                    break;\n                case 3:\n                    local.middlewareCacheControlLastModified(request, response, options.onNext);\n                    break;\n                case 4:\n                    response.end(options.result);\n                    break;\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.middlewareBodyRead = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will\n         * read and save the request-body to request.bodyRaw\n         */\n            // jslint-hack\n            local.nop(response);\n            // if request is already read, then goto nextMiddleware\n            if (!request.readable) {\n                nextMiddleware();\n                return;\n            }\n            local.streamReadAll(request, function (error, data) {\n                request.bodyRaw = request.bodyRaw || data;\n                nextMiddleware(error);\n            });\n        };\n\n        local.middlewareCacheControlLastModified = function (\n            request,\n            response,\n            nextMiddleware\n        ) {\n        /*\n         * this function will run the middleware that will update the Last-Modified header\n         */\n            // do not cache if headers already sent or url has '?' search indicator\n            if (!(response.headersSent || request.url.indexOf('?') >= 0)) {\n                // init serverResponseHeaderLastModified\n                local.serverResponseHeaderLastModified =\n                    local.serverResponseHeaderLastModified ||\n                    // resolve to 1000 ms\n                    new Date(new Date(Math.floor(Date.now() / 1000) * 1000).toGMTString());\n                // respond with 304 If-Modified-Since serverResponseHeaderLastModified\n                if (new Date(request.headers['if-modified-since']) >=\n                        local.serverResponseHeaderLastModified) {\n                    response.statusCode = 304;\n                    response.end();\n                    return;\n                }\n                response.setHeader('Cache-Control', 'no-cache');\n                response.setHeader(\n                    'Last-Modified',\n                    local.serverResponseHeaderLastModified.toGMTString()\n                );\n            }\n            nextMiddleware();\n        };\n\n        local.middlewareFileServer = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will serve files\n         */\n            if (request.method !== 'GET' || local.modeJs === 'browser') {\n                nextMiddleware();\n                return;\n            }\n            request.urlFile = (process.cwd() + request.urlParsed.pathname\n                // security - disable parent directory lookup\n                .replace((/.*\\/\\.\\.\\//g), '/'))\n                // replace trailing '/' with '/index.html'\n                .replace((/\\/$/), '/index.html');\n            // serve file from cache\n            local.taskCreateCached({\n                cacheDict: 'middlewareFileServer',\n                key: request.urlFile\n            // run background-task to re-cache file\n            }, function (onError) {\n                local.fs.readFile(request.urlFile, function (error, data) {\n                    onError(error, data && local.base64FromBuffer(data));\n                });\n            }, function (error, data) {\n                // default to nextMiddleware\n                if (error) {\n                    nextMiddleware();\n                    return;\n                }\n                // init response-header content-type\n                request.urlParsed.contentType = (/\\.[^\\.]*$/).exec(request.urlParsed.pathname);\n                request.urlParsed.contentType = local.contentTypeDict[\n                    request.urlParsed.contentType && request.urlParsed.contentType[0]\n                ];\n                local.serverRespondHeadSet(request, response, null, {\n                    'Content-Type': request.urlParsed.contentType\n                });\n                // serve file from cache\n                response.end(local.base64ToBuffer(data));\n            });\n        };\n\n        local.middlewareForwardProxy = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will forward-proxy the request\n         * to its destination-host\n         */\n            var onError, options, timerTimeout;\n            // handle preflight-cors\n            if ((request.headers['access-control-request-headers'] || '')\n                    .indexOf('forward-proxy-url') >= 0) {\n                // enable cors\n                // http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n                local.serverRespondHeadSet(request, response, null, {\n                    'Access-Control-Allow-Headers': 'forward-proxy-headers,forward-proxy-url',\n                    'Access-Control-Allow-Methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',\n                    'Access-Control-Allow-Origin': '*'\n                });\n                response.end();\n                return;\n            }\n            if (!request.headers['forward-proxy-url']) {\n                nextMiddleware();\n                return;\n            }\n            // enable cors\n            // http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n            local.serverRespondHeadSet(request, response, null, {\n                'Access-Control-Allow-Headers': 'forward-proxy-headers,forward-proxy-url',\n                'Access-Control-Allow-Methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',\n                'Access-Control-Allow-Origin': '*'\n            });\n            // init onError\n            onError = function (error) {\n                clearTimeout(timerTimeout);\n                if (!error || options.done) {\n                    return;\n                }\n                options.done = true;\n                // cleanup client\n                local.streamListCleanup([options.clientRequest, options.clientResponse]);\n                nextMiddleware(error);\n            };\n            // init options\n            options = local.urlParse(request.headers['forward-proxy-url']);\n            options.method = request.method;\n            options.url = request.headers['forward-proxy-url'];\n            // init timerTimeout\n            timerTimeout = local.onTimeout(\n                onError,\n                local.timeoutDefault,\n                'forward-proxy ' + options.method + ' ' + options.url\n            );\n            // parse headers\n            options.headers = {};\n            local.tryCatchOnError(function () {\n                options.headers = JSON.parse(request.headers['forward-proxy-headers']);\n            }, local.nop);\n            // debug options\n            local._debugForwardProxy = options;\n            console.error(new Date().toISOString() + ' middlewareForwardProxy ' +\n                JSON.stringify({\n                    method: options.method,\n                    url: options.url,\n                    headers: options.headers\n                }));\n            options.clientRequest = (options.protocol === 'https:'\n                ? local.https\n                : local.http).request(options, function (clientResponse) {\n                options.clientResponse = clientResponse.on('error', onError);\n                // pipe clientResponse to serverResponse\n                options.clientResponse.pipe(response);\n            }).on('error', onError);\n            // init event-handling\n            request.on('error', onError);\n            response.on('finish', onError).on('error', onError);\n            // pipe serverRequest to clientRequest\n            request.pipe(options.clientRequest);\n        };\n\n        local.middlewareGroupCreate = function (middlewareList) {\n        /*\n         * this function will create a middleware that will\n         * sequentially run the sub-middlewares in middlewareList\n         */\n            var self;\n            self = function (request, response, nextMiddleware) {\n                var options;\n                options = {};\n                local.onNext(options, function (error) {\n                    // recurse with next middleware in middlewareList\n                    if (options.modeNext < self.middlewareList.length) {\n                        // run the sub-middleware\n                        self.middlewareList[options.modeNext](\n                            request,\n                            response,\n                            options.onNext\n                        );\n                        return;\n                    }\n                    // default to nextMiddleware\n                    nextMiddleware(error);\n                });\n                options.modeNext = -1;\n                options.onNext();\n            };\n            self.middlewareList = middlewareList;\n            return self;\n        };\n\n        local.middlewareInit = function (request, response, nextMiddleware) {\n        /*\n         * this function will run the middleware that will init the request and response\n         */\n            // debug server-request\n            local._debugServerRequest = request;\n            // debug server-response\n            local._debugServerResponse = response;\n            // init timerTimeout\n            local.serverRespondTimeoutDefault(request, response, local.timeoutDefault);\n            // init request.urlParsed\n            request.urlParsed = local.urlParse(request.url);\n            // init response-header content-type\n            request.urlParsed.contentType = (/\\.[^\\.]*$/).exec(request.urlParsed.pathname);\n            request.urlParsed.contentType = local.contentTypeDict[\n                request.urlParsed.contentType && request.urlParsed.contentType[0]\n            ];\n            local.serverRespondHeadSet(request, response, null, {\n                'Content-Type': request.urlParsed.contentType\n            });\n            // set main-page content-type to text/html\n            if (request.urlParsed.pathname === '/') {\n                local.serverRespondHeadSet(request, response, null, {\n                    'Content-Type': 'text/html; charset=UTF-8'\n                });\n            }\n            // init response.end and response.write to accept Uint8Array instance\n            ['end', 'write'].forEach(function (key) {\n                response['_' + key] = response['_' + key] || response[key];\n                response[key] = function () {\n                    var args;\n                    args = Array.from(arguments);\n                    args[0] = local.bufferToNodeBuffer(args[0]);\n                    response['_' + key].apply(response, args);\n                };\n            });\n            // default to nextMiddleware\n            nextMiddleware();\n        };\n\n        local.moduleDirname = function (module, modulePathList) {\n        /*\n         * this function will search modulePathList for the module's __dirname\n         */\n            var result, tmp;\n            // search process.cwd()\n            if (!module || module === '.' || module.indexOf('/') >= 0) {\n                return require('path').resolve(process.cwd(), module || '');\n            }\n            // search builtin\n            if (Object.keys(process.binding('natives')).indexOf(module) >= 0) {\n                return module;\n            }\n            // search modulePathList\n            [\n                ['node_modules'],\n                modulePathList,\n                require('module').globalPaths\n            ].some(function (modulePathList) {\n                modulePathList.some(function (modulePath) {\n                    try {\n                        tmp = require('path').resolve(\n                            process.cwd(),\n                            modulePath + '/' + module\n                        );\n                        result = require('fs').statSync(tmp).isDirectory() && tmp;\n                        return result;\n                    } catch (ignore) {\n                    }\n                });\n                return result;\n            });\n            return result || '';\n        };\n\n        local.normalizeDict = function (dict) {\n        /*\n         * this function will normalize the dict\n         */\n            return dict && typeof dict === 'object' && !Array.isArray(dict)\n                ? dict\n                : {};\n        };\n\n        local.normalizeList = function (list) {\n        /*\n         * this function will normalize the list\n         */\n            return Array.isArray(list)\n                ? list\n                : [];\n        };\n\n        local.normalizeText = function (text) {\n        /*\n         * this function will normalize the text\n         */\n            return typeof text === 'string'\n                ? text\n                : '';\n        };\n\n        local.objectGetElementFirst = function (arg) {\n        /*\n         * this function will get the first element of the arg\n         */\n            var item;\n            item = {};\n            item.key = Object.keys(arg)[0];\n            item.value = arg[item.key];\n            return item;\n        };\n\n        local.objectKeysTypeof = function (arg) {\n        /*\n         * this function will return a list of the arg's keys, sorted by item-type\n         */\n            return Object.keys(arg).map(function (key) {\n                return typeof arg[key] + ' ' + key;\n            }).sort().join('\\n');\n        };\n\n        local.objectLiteralize = function (arg) {\n        /*\n         * this function will traverse arg, and replace every encounter of the magical key '$[]'\n         * with its object literal [key, value]\n         */\n            local.objectTraverse(arg, function (element) {\n                if (element && typeof element === 'object' && !Array.isArray(element)) {\n                    Object.keys(element).forEach(function (key) {\n                        if (key.indexOf('$[]') === 0) {\n                            element[element[key][0]] = element[key][1];\n                            delete element[key];\n                        }\n                    });\n                }\n            });\n            return arg;\n        };\n\n        local.objectSetDefault = function (arg, defaults, depth) {\n        /*\n         * this function will recursively set defaults for undefined-items in the arg\n         */\n            arg = arg || {};\n            defaults = defaults || {};\n            Object.keys(defaults).forEach(function (key) {\n                var arg2, defaults2;\n                arg2 = arg[key];\n                // handle misbehaving getter\n                try {\n                    defaults2 = defaults[key];\n                } catch (ignore) {\n                }\n                if (defaults2 === undefined) {\n                    return;\n                }\n                // init arg[key] to default value defaults[key]\n                if (!arg2) {\n                    arg[key] = defaults2;\n                    return;\n                }\n                // if arg2 and defaults2 are both non-null and non-array objects,\n                // then recurse with arg2 and defaults2\n                if (depth > 1 &&\n                        // arg2 is a non-null and non-array object\n                        arg2 &&\n                        typeof arg2 === 'object' &&\n                        !Array.isArray(arg2) &&\n                        // defaults2 is a non-null and non-array object\n                        defaults2 &&\n                        typeof defaults2 === 'object' &&\n                        !Array.isArray(defaults2)) {\n                    // recurse\n                    local.objectSetDefault(arg2, defaults2, depth - 1);\n                }\n            });\n            return arg;\n        };\n\n        local.objectSetOverride = function (arg, overrides, depth, env) {\n        /*\n         * this function will recursively set overrides for items in the arg\n         */\n            arg = arg || {};\n            env = env || (typeof process === 'object' && process.env) || {};\n            overrides = overrides || {};\n            Object.keys(overrides).forEach(function (key) {\n                var arg2, overrides2;\n                arg2 = arg[key];\n                overrides2 = overrides[key];\n                if (overrides2 === undefined) {\n                    return;\n                }\n                // if both arg2 and overrides2 are non-null and non-array objects,\n                // then recurse with arg2 and overrides2\n                if (depth > 1 &&\n                        // arg2 is a non-null and non-array object\n                        (arg2 &&\n                        typeof arg2 === 'object' &&\n                        !Array.isArray(arg2)) &&\n                        // overrides2 is a non-null and non-array object\n                        (overrides2 &&\n                        typeof overrides2 === 'object' &&\n                        !Array.isArray(overrides2))) {\n                    local.objectSetOverride(arg2, overrides2, depth - 1, env);\n                    return;\n                }\n                // else set arg[key] with overrides[key]\n                arg[key] = arg === env\n                    // if arg is env, then overrides falsey value with empty string\n                    ? overrides2 || ''\n                    : overrides2;\n            });\n            return arg;\n        };\n\n        local.objectTraverse = function (arg, onSelf, circularList) {\n        /*\n         * this function will recursively traverse the arg,\n         * and run onSelf with the arg's properties\n         */\n            onSelf(arg);\n            circularList = circularList || [];\n            if (arg &&\n                    typeof arg === 'object' &&\n                    circularList.indexOf(arg) < 0) {\n                circularList.push(arg);\n                Object.keys(arg).forEach(function (key) {\n                    // recurse with arg[key]\n                    local.objectTraverse(arg[key], onSelf, circularList);\n                });\n            }\n            return arg;\n        };\n\n        local.onErrorDefault = function (error) {\n        /*\n         * this function will if error exists, then print error.stack to stderr\n         */\n            if (error && !local.global.__coverage__) {\n                console.error(error);\n            }\n        };\n\n        local.onErrorThrow = function (error) {\n        /*\n         * this function will assert no error occurred\n         */\n            if (error) {\n                throw error;\n            }\n        };\n\n        local.onErrorWithStack = function (onError) {\n        /*\n         * this function will create a new callback that will call onError,\n         * and append the current stack to any error\n         */\n            var stack;\n            stack = new Error().stack.replace((/(.*?)\\n.*?$/m), '$1');\n            return function (error, data, meta) {\n                if (error &&\n                        error !== local.errorDefault &&\n                        String(error.stack).indexOf(stack.split('\\n')[2]) < 0) {\n                    // append the current stack to error.stack\n                    error.stack += '\\n' + stack;\n                }\n                onError(error, data, meta);\n            };\n        };\n\n        local.onFileModifiedRestart = function (file) {\n        /*\n         * this function will watch the file, and if modified, then restart the process\n         */\n            if (local.env.npm_config_mode_auto_restart &&\n                    local.fs.existsSync(file) &&\n                    local.fs.statSync(file).isFile()) {\n                local.fs.watchFile(file, {\n                    interval: 1000,\n                    persistent: false\n                }, function (stat2, stat1) {\n                    if (stat2.mtime > stat1.mtime) {\n                        console.error('file modified - ' + file);\n                        local.exit(77);\n                    }\n                });\n            }\n        };\n\n        local.onNext = function (options, onError) {\n        /*\n         * this function will wrap onError inside the recursive function options.onNext,\n         * and append the current stack to any error\n         */\n            options.onNext = local.onErrorWithStack(function (error, data, meta) {\n                try {\n                    options.modeNext = error && !options.modeErrorIgnore\n                        ? Infinity\n                        : options.modeNext + 1;\n                    onError(error, data, meta);\n                } catch (errorCaught) {\n                    // throw errorCaught to break infinite recursion-loop\n                    if (options.errorCaught) {\n                        throw options.errorCaught;\n                    }\n                    options.errorCaught = errorCaught;\n                    options.onNext(errorCaught, data, meta);\n                }\n            });\n            return options;\n        };\n\n        local.onParallel = function (onError, onEach, onRetry) {\n        /*\n         * this function will create a function that will\n         * 1. run async tasks in parallel\n         * 2. if counter === 0 or error occurred, then call onError with error\n         */\n            var onParallel;\n            onError = local.onErrorWithStack(onError);\n            onEach = onEach || local.nop;\n            onRetry = onRetry || local.nop;\n            onParallel = function (error, data) {\n                if (onRetry(error, data)) {\n                    return;\n                }\n                // decrement counter\n                onParallel.counter -= 1;\n                // validate counter\n                console.assert(onParallel.counter >= 0 || error || onParallel.error);\n                // ensure onError is run only once\n                if (onParallel.counter < 0) {\n                    return;\n                }\n                // handle error\n                if (error) {\n                    onParallel.error = error;\n                    // ensure counter <= 0\n                    onParallel.counter = -Math.abs(onParallel.counter);\n                }\n                // call onError when done\n                if (onParallel.counter <= 0) {\n                    onError(error, data);\n                    return;\n                }\n                onEach();\n            };\n            // init counter\n            onParallel.counter = 0;\n            // return callback\n            return onParallel;\n        };\n\n        local.onParallelList = function (options, onEach, onError) {\n        /*\n         * this function will\n         * 1. async-run onEach in parallel,\n         *    with the given options.rateLimit and options.retryLimit\n         * 2. call onError when done\n         */\n            var ii, onEach2, onParallel;\n            onEach2 = function () {\n                while (ii + 1 < options.list.length && onParallel.counter < options.rateLimit) {\n                    ii += 1;\n                    onParallel.ii += 1;\n                    onParallel.remaining -= 1;\n                    onEach({\n                        element: options.list[ii],\n                        ii: ii,\n                        list: options.list,\n                        retry: 0\n                    }, onParallel);\n                }\n            };\n            onParallel = local.onParallel(onError, onEach2, function (error, data) {\n                if (error && data && data.retry < options.retryLimit) {\n                    local.onErrorDefault(error);\n                    data.retry += 1;\n                    setTimeout(function () {\n                        onParallel.counter -= 1;\n                        onEach(data, onParallel);\n                    }, 1000);\n                    return true;\n                }\n            });\n            onParallel.counter += 1;\n            ii = -1;\n            onParallel.ii = -1;\n            onParallel.remaining = options.list.length;\n            options.rateLimit = Number(options.rateLimit) || 6;\n            options.rateLimit = Math.max(options.rateLimit, 3);\n            options.retryLimit = Number(options.retryLimit) || 2;\n            onEach2();\n            onParallel();\n        };\n\n        local.onReadyAfter = function (onError) {\n        /*\n         * this function will call onError when onReadyBefore.counter === 0\n         */\n            local.onReadyBefore.counter += 1;\n            local.taskCreate({ key: 'utility2.onReadyAfter' }, null, onError);\n            local.onResetAfter(local.onReadyBefore);\n            return onError;\n        };\n\n        local.onReadyBefore = local.onParallel(function (error) {\n        /*\n         * this function will keep track of onReadyBefore.counter\n         */\n            local.taskCreate({\n                key: 'utility2.onReadyAfter'\n            }, function (onError) {\n                onError(error);\n            }, function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n            });\n        });\n\n        local.onResetAfter = function (onError) {\n        /*\n         * this function will call onError when onResetBefore.counter === 0\n         */\n            local.onResetBefore.counter += 1;\n            // visual notification - onResetAfter\n            local.ajaxProgressUpdate();\n            local.taskCreate({ key: 'utility2.onResetAfter' }, null, onError);\n            setTimeout(local.onResetBefore);\n            return onError;\n        };\n\n        local.onResetBefore = local.onParallel(function (error) {\n        /*\n         * this function will keep track of onResetBefore.counter\n         */\n            local.taskCreate({\n                key: 'utility2.onResetAfter'\n            }, function (onError) {\n                onError(error);\n            }, function (error) {\n                // validate no error occurred\n                local.assert(!error, error);\n            });\n        });\n\n        local.onTimeout = function (onError, timeout, message) {\n        /*\n         * this function will create a timeout-error-handler,\n         * that will append the current stack to any error encountered\n         */\n            onError = local.onErrorWithStack(onError);\n            // create timeout timer\n            return setTimeout(function () {\n                onError(new Error('onTimeout - timeout-error - ' +\n                    timeout + ' ms - ' + (typeof message === 'function'\n                    ? message()\n                    : message)));\n            // coerce to finite integer\n            }, timeout | 0);\n        };\n\n        local.processSpawnWithTimeout = function () {\n        /*\n         * this function will run like child_process.spawn,\n         * but with auto-timeout after timeoutDefault milliseconds\n         */\n            var childProcess;\n            // spawn childProcess\n            childProcess = local.child_process.spawn.apply(local.child_process, arguments)\n                .on('exit', function () {\n                    // try to kill timerTimeout childProcess\n                    local.tryCatchOnError(function () {\n                        process.kill(childProcess.timerTimeout.pid);\n                    }, local.nop);\n                });\n            // init failsafe timerTimeout\n            childProcess.timerTimeout = local.child_process.spawn('/bin/sh', ['-c', 'sleep ' +\n                // coerce to finite integer\n                (((0.001 * local.timeoutDefault) | 0) +\n                // add 2 second delay to failsafe timerTimeout\n                2) + '; kill -9 ' + childProcess.pid + ' 2>/dev/null'], { stdio: 'ignore' });\n            return childProcess;\n        };\n\n        local.profile = function (fnc, onError) {\n        /*\n         * this function will profile the async fnc in milliseconds with the callback onError\n         */\n            var timeStart;\n            timeStart = Date.now();\n            // run async fnc\n            fnc(function (error) {\n                // call onError with difference in milliseconds between Date.now() and timeStart\n                onError(error, Date.now() - timeStart);\n            });\n        };\n\n        local.profileSync = function (fnc) {\n        /*\n         * this function will profile the sync fnc in milliseconds\n         */\n            var timeStart;\n            timeStart = Date.now();\n            // run sync fnc\n            fnc();\n            // return difference in milliseconds between Date.now() and timeStart\n            return Date.now() - timeStart;\n        };\n\n        local.replStart = function () {\n        /*\n         * this function will start the repl-debugger\n         */\n            /*jslint evil: true*/\n            var self;\n            if (global.utility2_serverRepl1) {\n                return;\n            }\n            // start replServer\n            self = global.utility2_serverRepl1 = require('repl').start({ useGlobal: true });\n            self.nop = function () {\n            /*\n             * this function will do nothing\n             */\n                return;\n            };\n            self.onError = function (error) {\n            /*\n             * this function will debug any repl-error\n             */\n                // debug error\n                global.utility2_debugReplError = error;\n                console.error(error);\n            };\n            // save repl eval function\n            self.evalDefault = self.eval;\n            // hook custom repl eval function\n            self.eval = function (script, context, file, onError) {\n                var match, onError2;\n                match = (/^(\\S+)(.*?)\\n/).exec(script);\n                onError2 = function (error, data) {\n                    // debug error\n                    global.utility2_debugReplError = error || global.utility2_debugReplError;\n                    onError(error, data);\n                };\n                switch (match && match[1]) {\n                // syntax sugar to run async shell command\n                case '$':\n                    switch (match[2]) {\n                    // syntax sugar to run git diff\n                    case ' git diff':\n                        match[2] = ' git diff --color | cat';\n                        break;\n                    // syntax sugar to run git log\n                    case ' git log':\n                        match[2] = ' git log -n 4 | cat';\n                        break;\n                    }\n                    // run async shell command\n                    require('child_process').spawn(\n                        '/bin/sh',\n                        ['-c', match[2]],\n                        { stdio: ['ignore', 1, 2] }\n                    )\n                        // on shell exit, print return prompt\n                        .on('exit', function (exitCode) {\n                            console.error('exit-code ' + exitCode);\n                            self.evalDefault(\n                                '\\n',\n                                context,\n                                file,\n                                onError2\n                            );\n                        });\n                    script = '\\n';\n                    break;\n                // syntax sugar to grep current dir\n                case 'grep':\n                    // run async shell command\n                    require('child_process').spawn(\n                        '/bin/sh',\n                        ['-c', 'find . -type f | grep -v ' +\n/* jslint-ignore-begin */\n'\"\\\n/\\\\.\\\\|.*\\\\(\\\\b\\\\|_\\\\)\\\\(\\\\.\\\\d\\\\|\\\narchive\\\\|artifact\\\\|\\\nbower_component\\\\|build\\\\|\\\ncoverage\\\\|\\\ndoc\\\\|\\\nexternal\\\\|\\\nfixture\\\\|\\\ngit_module\\\\|\\\njquery\\\\|\\\nlog\\\\|\\\nmin\\\\|mock\\\\|\\\nnode_module\\\\|\\\nrollup\\\\|\\\nswp\\\\|\\\ntmp\\\\|\\\nvendor\\\\)\\\\(\\\\b\\\\|[_s]\\\\)\\\n\" ' +\n/* jslint-ignore-end */\n                            '| tr \"\\\\n\" \"\\\\000\" | xargs -0 grep -in \"' +\n                            match[2].trim() + '\"'],\n                        { stdio: ['ignore', 1, 2] }\n                    )\n                        // on shell exit, print return prompt\n                        .on('exit', function (exitCode) {\n                            console.error('exit-code ' + exitCode);\n                            self.evalDefault(\n                                '\\n',\n                                context,\n                                file,\n                                onError2\n                            );\n                        });\n                    script = '\\n';\n                    break;\n                // syntax sugar to list object's keys, sorted by item-type\n                case 'keys':\n                    script = 'console.error(Object.keys(' + match[2] +\n                        ').map(function (key) {' +\n                        'return typeof ' + match[2] + '[key] + \" \" + key + \"\\\\n\";' +\n                        '}).sort().join(\"\") + Object.keys(' + match[2] + ').length)\\n';\n                    break;\n                // syntax sugar to print stringified arg\n                case 'print':\n                    script = 'console.error(String(' + match[2] + '))\\n';\n                    break;\n                }\n                // eval the script\n                self.evalDefault(script, context, file, onError2);\n            };\n            self.socket = { end: self.nop, on: self.nop, write: self.nop };\n            // init process.stdout\n            process.stdout._writeDefault = process.stdout._writeDefault ||\n                process.stdout._write;\n            process.stdout._write = function (chunk, encoding, callback) {\n                process.stdout._writeDefault(chunk, encoding, callback);\n                // coverage-hack\n                self.nop(self.socket.readable && (function () {\n                    self.socket.write(chunk, encoding);\n                }()));\n            };\n            // start tcp-server\n            global.utility2_serverReplTcp1 = require('net').createServer(function (socket) {\n                // init socket\n                self.socket = socket;\n                self.socket.on('data', self.write.bind(self));\n                self.socket.on('error', self.onError);\n                self.socket.setKeepAlive(true);\n            });\n            // coverage-hack\n            self.nop(process.env.PORT_REPL && (function () {\n                console.error('repl-server listening on tcp-port ' + process.env.PORT_REPL);\n                global.utility2_serverReplTcp1.listen(process.env.PORT_REPL);\n            }()));\n        };\n\n        local.requireExampleJsFromReadme = function () {\n        /*\n         * this function will require and export example.js embedded in README.md\n         */\n            var module, script, tmp;\n            // start the repl-debugger\n            local.replStart();\n            // debug dir\n            [__dirname, process.cwd()].forEach(function (dir) {\n                local.fs.readdirSync(dir).forEach(function (file) {\n                    if ((/\\brollup\\b/).test(file)) {\n                        return;\n                    }\n                    file = dir + '/' + file;\n                    // if the file is modified, then restart the process\n                    local.onFileModifiedRestart(file);\n                    switch (local.path.extname(file)) {\n                    case '.css':\n                    case '.html':\n                    case '.js':\n                    case '.json':\n                        // jslint file\n                        local.jslintAndPrintConditional(\n                            local.tryCatchReadFile(file, 'utf8'),\n                            file\n                        );\n                        break;\n                    }\n                });\n            });\n            if (local.global.utility2_rollup || local.env.npm_config_mode_start) {\n                // init assets\n                local.assetsDict['/'] = local.assetsDict['/index.html'] = local.templateRender(\n                    // uncomment utility2-comment\n                    local.assetsDict['/assets.index.template.html'].replace(\n                        (/<!-- utility2-comment\\b([\\S\\s]+?)\\butility2-comment -->/g),\n                        '$1'\n                    ),\n                    { env: local.env, isRollup: true }\n                );\n                local.assetsDict['/assets.example.js'] =\n                    local.assetsDict['/assets.example.template.js'];\n                local.assetsDict['/assets.app.js'] =\n                    local.fs.readFileSync(__filename, 'utf8').replace((/^#!/), '//');\n                // coverage-hack\n                local.nop(local.env.npm_config_mode_start && (function () {\n                    local.assetsDict['/assets.app.js'] =\n                        local.assetsDict['/assets.utility2.rollup.begin.js'];\n                    local.assetsDict['/assets.app.js'] += '\\n\\n\\n' +\n                        local.fs.readFileSync(__filename, 'utf8').replace((/^#!/), '//');\n                    local.assetsDict['/assets.app.js'] += '\\n\\n\\n' +\n                        local.assetsDict['/assets.example.js'];\n                    local.assetsDict['/assets.app.js'] += '\\n\\n\\n' +\n                        local.assetsDict['/assets.test.js'];\n                    local.global.local = local;\n                }()));\n                local[local.env.npm_package_nameAlias] = local;\n                return local;\n            }\n            // init file $npm_package_main\n            tmp = process.cwd() + '/' + local.env.npm_package_main;\n            global.utility2_moduleExports = require(tmp);\n            local.assetsDict['/assets.' + local.env.npm_package_nameAlias + '.js'] =\n                local.istanbulInstrumentInPackage(\n                    local.fs.readFileSync(tmp, 'utf8').replace((/^#!/), '//'),\n                    tmp\n                );\n            global.utility2_moduleExports.global = global;\n            // read script from README.md\n            script = local.templateRenderJslintLite(\n                local.assetsDict['/assets.example.template.js'],\n                {}\n            );\n            // coverage-hack\n            local.nop(!local.env.npm_package_buildCustomOrg && (function () {\n                local.fs.readFileSync('README.md', 'utf8').replace(\n                    (/```\\w*?(\\n[\\W\\s]*?example\\.js[\\n\\\"][\\S\\s]+?)\\n```/),\n                    function (match0, match1, ii, text) {\n                        // jslint-hack\n                        local.nop(match0);\n                        // preserve lineno\n                        script = text.slice(0, ii).replace((/.+/g), '') + match1;\n                    }\n                );\n            }()));\n            script = script\n                // alias require($npm_package_name) to utility2_moduleExports;\n                .replace(\n                    \"require('\" + local.env.npm_package_name + \"')\",\n                    'global.utility2_moduleExports'\n                )\n                .replace(\n                    \"require('\" + local.env.npm_package_nameOriginal + \"')\",\n                    'global.utility2_moduleExports'\n                );\n            // init example.js\n            tmp = process.cwd() + '/example.js';\n            // jslint script\n            local.jslintAndPrintConditional(script, tmp);\n            // cover script\n            script = local.istanbulInstrumentInPackage(script, tmp);\n            // init module\n            module = require.cache[tmp] = new local.Module(tmp);\n            // load script into module\n            module._compile(script, tmp);\n            // init exports\n            module.exports.utility2 = local;\n            module.exports[local.env.npm_package_nameAlias] = global.utility2_moduleExports;\n            // init assets\n            local.objectSetOverride(local.assetsDict, module.exports.assetsDict);\n            module.exports.assetsDict = local.assetsDict;\n            local.assetsDict['/assets.example.js'] = script;\n            local.assetsDict['/assets.test.js'] = local.istanbulInstrumentInPackage(\n                local.fs.readFileSync('test.js', 'utf8'),\n                process.cwd() + '/test.js'\n            );\n            // init assets.index.html\n            local.assetsDict['/'] = local.assetsDict['/index.html'] =\n                local.jslintAndPrintConditional(local.templateRender(\n                    // uncomment utility2-comment\n                    local.assetsDict['/assets.index.template.html'].replace(\n                        (/<!-- utility2-comment\\b([\\S\\s]+?)\\butility2-comment -->/g),\n                        '$1'\n                    ),\n                    {\n                        env: local.env,\n                        isRollup: local.global.utility2_rollup ||\n                            local.env.NODE_ENV === 'rollup' ||\n                            local.env.NODE_ENV === 'production'\n                    }\n                ), '/index.html');\n            // init assets.app.js\n            local.assetsDict['/assets.app.js'] = [\n                'header',\n                '/assets.utility2.rollup.js',\n                '/assets.utility2.rollup.begin.js',\n                'local._stateInit',\n                '/assets.lib.js',\n                '/assets.example.js',\n                '/assets.test.js',\n                '/assets.utility2.rollup.end.js'\n            ].map(function (key) {\n                switch (key) {\n/* jslint-ignore-begin */\ncase 'header':\nreturn '\\\n/* this rollup was created with utility2 (https://github.com/kaizhu256/node-utility2) */\\n\\\n\\n\\\n\\n\\\n\\n\\\n/*\\n\\\nassets.app.js\\n\\\n\\n' + local.env.npm_package_description + '\\n\\\n\\n\\\ninstruction\\n\\\n    1. save this script as assets.app.js\\n\\\n    2. run the shell command:\\n\\\n        $ PORT=8081 node assets.app.js\\n\\\n    3. play with the browser-demo on http://127.0.0.1:8081\\n\\\n*/\\n\\\n';\n/* jslint-ignore-end */\n                case 'local._stateInit':\n                    script = local.assetsDict['/assets.utility2.rollup.content.js'].replace(\n                        '/* utility2.rollup.js content */',\n                        key + '(' + JSON.stringify(\n                            local._middlewareJsonpStateInit({ _stateInit: true })\n                        ) + ');'\n                    );\n                    break;\n                case '/assets.lib.js':\n                    script = local.assetsDict[\n                        '/assets.' + local.env.npm_package_nameAlias + '.js'\n                    ];\n                    // coverage-hack\n                    local.nop(local.assetsDict[\n                        '/assets.' + local.env.npm_package_nameAlias + '.rollup.js'\n                    ] && (function () {\n                        script = '';\n                    }()));\n                    break;\n                case '/assets.utility2.rollup.js':\n                    script = local.assetsDict['/assets.utility2.rollup.js'];\n                    // coverage-hack\n                    local.nop(local.assetsDict[\n                        '/assets.' + local.env.npm_package_nameAlias + '.rollup.js'\n                    ] && (function () {\n                        script = local.assetsDict[\n                            '/assets.' + local.env.npm_package_nameAlias + '.rollup.js'\n                        ];\n                    }()));\n                    break;\n                default:\n                    script = local.assetsDict[key];\n                }\n                return '/* script-begin ' + key + ' */\\n' +\n                    script.trim() +\n                    '\\n/* script-end ' + key + ' */\\n';\n            }).join('\\n\\n\\n');\n            // init assets.lib.rollup.js\n            local.objectSetDefault(local.assetsDict, local.objectLiteralize({\n                '$[]': [\n                    '/assets.' + local.env.npm_package_nameAlias + '.rollup.js',\n                    local.assetsDict['/assets.' + local.env.npm_package_nameAlias + '.js']\n                ]\n            }));\n            local.objectSetDefault(module.exports, local);\n            // jslint assetsDict\n            Object.keys(local.assetsDict).sort().forEach(function (key) {\n                local.jslintAndPrintConditional(local.assetsDict[key], key);\n            });\n            return module.exports;\n        };\n\n        local.serverRespondDefault = function (request, response, statusCode, error) {\n        /*\n         * this function will respond with a default message,\n         * or error.stack for the given statusCode\n         */\n            // init statusCode and contentType\n            local.serverRespondHeadSet(\n                request,\n                response,\n                statusCode,\n                { 'Content-Type': 'text/plain; charset=utf-8' }\n            );\n            if (error) {\n                // debug statusCode / method / url\n                local.errorMessagePrepend(\n                    error,\n                    response.statusCode + ' ' + request.method + ' ' + request.url + '\\n'\n                );\n                // print error.stack to stderr\n                local.onErrorDefault(error);\n                // end response with error.stack\n                response.end(error.stack);\n                return;\n            }\n            // end response with default statusCode message\n            response.end(\n                statusCode + ' ' + local.http.STATUS_CODES[statusCode]\n            );\n        };\n\n        local.serverRespondEcho = function (request, response) {\n        /*\n         * this function will respond with debug info\n         */\n            response.write(request.method + ' ' + request.url +\n                ' HTTP/' + request.httpVersion + '\\r\\n' +\n                Object.keys(request.headers).map(function (key) {\n                    return key + ': ' + request.headers[key] + '\\r\\n';\n                }).join('') + '\\r\\n');\n            request.pipe(response);\n        };\n\n        local.serverRespondHeadSet = function (request, response, statusCode, headers) {\n        /*\n         * this function will set the response object's statusCode / headers\n         */\n            // jslint-hack\n            local.nop(request);\n            if (response.headersSent) {\n                return;\n            }\n            // init response.statusCode\n            if (Number(statusCode)) {\n                response.statusCode = Number(statusCode);\n            }\n            Object.keys(headers).forEach(function (key) {\n                if (headers[key]) {\n                    response.setHeader(key, headers[key]);\n                }\n            });\n            return true;\n        };\n\n        local.serverRespondTimeoutDefault = function (request, response, timeout) {\n        /*\n         * this function will create a timeout-error-handler for the server-request\n         */\n            request.onTimeout = request.onTimeout || function (error) {\n                local.serverRespondDefault(request, response, 500, error);\n                setTimeout(function () {\n                    // cleanup request and response\n                    local.streamListCleanup([request, response]);\n                }, 1000);\n            };\n            request.timerTimeout = local.onTimeout(\n                request.onTimeout,\n                timeout || local.timeoutDefault,\n                'server ' + request.method + ' ' + request.url\n            );\n            response.on('finish', function () {\n                // cleanup timerTimeout\n                clearTimeout(request.timerTimeout);\n            });\n        };\n\n        local.setTimeoutOnError = function (onError, error, data) {\n        /*\n         * this function will async-call onError\n         */\n            if (typeof onError === 'function') {\n                setTimeout(function () {\n                    onError(error, data);\n                });\n            }\n            return data;\n        };\n\n        local.sjclHashScryptCreate = function (password, options) {\n        /*\n         * https://github.com/wg/scrypt\n         * this function will create a scrypt-hash of the password\n         * with the given options (default = $s0$10801)\n         * e.g. $s0$e0801$epIxT/h6HbbwHaehFnh/bw==$7H0vsXlY8UxxyW/BWx/9GuY7jEvGjT71GFd6O4SZND0=\n         */\n            // init options\n            options = (options || '$s0$10801').split('$');\n            // init salt\n            if (!options[3]) {\n                options[3] = local.sjcl.codec.base64.fromBits(\n                    local.sjcl.random.randomWords(4, 0)\n                );\n            }\n            // init hash\n            options[4] = local.sjcl.codec.base64.fromBits(\n                local.sjcl.misc.scrypt(\n                    password || '',\n                    local.sjcl.codec.base64.toBits(options[3]),\n                    Math.pow(2, parseInt(options[2].slice(0, 1), 16)),\n                    parseInt(options[2].slice(1, 2), 16),\n                    parseInt(options[2].slice(3, 4), 16)\n                )\n            );\n            return options.slice(0, 5).join('$');\n        };\n\n        local.sjclHashScryptValidate = function (password, hash) {\n        /*\n         * https://github.com/wg/scrypt\n         * this function will validate the password against the scrypt-hash\n         */\n            return local.sjclHashScryptCreate(password, hash) === hash;\n        };\n\n        local.sjclHashSha256Create = function (data) {\n        /*\n         * this function will create a base64-encoded sha-256 hash of the string data\n         */\n            return local.sjcl.codec.base64.fromBits(local.sjcl.hash.sha256.hash(data));\n        };\n\n        local.sjclHmacSha256Create = function (key, data) {\n        /*\n         * this function will create a base64-encoded sha-256 hmac\n         * from the base64-encoded key and string data\n         */\n            return local.sjcl.codec.base64.fromBits(\n                (new local.sjcl.misc.hmac(\n                    local.sjcl.codec.base64.toBits(key),\n                    local.sjcl.hash.sha256\n                )).mac(local.sjcl.codec.utf8String.toBits(data))\n            );\n        };\n\n        local.streamListCleanup = function (streamList) {\n        /*\n         * this function will end or destroy the streams in streamList\n         */\n            streamList.forEach(function (stream) {\n                // try to end the stream\n                local.tryCatchOnError(function () {\n                    stream.end();\n                }, function () {\n                    // if error, then try to destroy the stream\n                    local.tryCatchOnError(function () {\n                        stream.destroy();\n                    }, local.nop);\n                });\n            });\n        };\n\n        local.streamReadAll = function (stream, onError) {\n        /*\n         * this function will concat data from the stream,\n         * and pass it to onError when done reading\n         */\n            var chunkList;\n            chunkList = [];\n            // read data from the stream\n            stream\n                // on data event, push the buffer chunk to chunkList\n                .on('data', function (chunk) {\n                    chunkList.push(chunk);\n                })\n                // on end event, pass concatenated read buffer to onError\n                .on('end', function () {\n                    onError(null, local.modeJs === 'browser'\n                        ? chunkList[0]\n                        : local.bufferConcat(chunkList));\n                })\n                // on error event, pass error to onError\n                .on('error', onError);\n        };\n\n        local.stringHtmlSafe = function (text) {\n        /*\n         * this function will make the text html-safe\n         */\n            // new RegExp('[' + '\"&\\'<>'.split('').sort().join('') + ']', 'g')\n            return text.replace((/[\"&'<>]/g), function (match0) {\n                return '&#x' + match0.charCodeAt(0).toString(16) + ';';\n            });\n        };\n\n        local.taskCreate = function (options, onTask, onError) {\n        /*\n         * this function will create the task onTask named options.key, if it does not exist,\n         * and push onError to its onErrorList\n         */\n            var task;\n            // init task\n            task = local.taskOnTaskDict[options.key] = local.taskOnTaskDict[options.key] ||\n                { onErrorList: [] };\n            // push callback onError to the task\n            if (onError) {\n                onError = local.onErrorWithStack(onError);\n                task.onErrorList.push(onError);\n            }\n            // if task exists, then return it\n            if (!onTask || task.onTask) {\n                return task;\n            }\n            task.onDone = function () {\n                // if already done, then do nothing\n                if (task.done) {\n                    return;\n                }\n                task.done = true;\n                // cleanup timerTimeout\n                clearTimeout(task.timerTimeout);\n                // cleanup task\n                delete local.taskOnTaskDict[options.key];\n                // preserve error.message and error.stack\n                task.result = JSON.stringify(Array.from(arguments)\n                    .map(function (element) {\n                        if (element && element.stack) {\n                            element = local.objectSetDefault(local.jsonCopy(element), {\n                                message: element.message,\n                                name: element.name,\n                                stack: element.stack\n                            });\n                        }\n                        return element;\n                    }));\n                // pass result to callbacks in onErrorList\n                task.onErrorList.forEach(function (onError) {\n                    onError.apply(null, JSON.parse(task.result));\n                });\n            };\n            // init timerTimeout\n            task.timerTimeout = local.onTimeout(\n                task.onDone,\n                options.timeout || local.timeoutDefault,\n                'taskCreate ' + options.key\n            );\n            task.onTask = onTask;\n            // run onTask\n            task.onTask(task.onDone);\n            return task;\n        };\n\n        local.taskCreateCached = function (options, onTask, onError) {\n        /*\n         * this function will\n         * 1. if cache-hit, then call onError with cacheValue\n         * 2. run onTask in background\n         * 3. save onTask's result to cache\n         * 4. if cache-miss, then call onError with onTask's result\n         */\n            local.onNext(options, function (error, data) {\n                switch (options.modeNext) {\n                //  1. if cache-hit, then call onError with cacheValue\n                case 1:\n                    // read cacheValue from memory-cache\n                    local.cacheDict[options.cacheDict] = local.cacheDict[options.cacheDict] ||\n                        {};\n                    options.cacheValue = local.cacheDict[options.cacheDict][options.key];\n                    if (options.cacheValue) {\n                        // call onError with cacheValue\n                        options.modeCacheHit = true;\n                        onError(null, JSON.parse(options.cacheValue));\n                        if (!options.modeCacheUpdate) {\n                            break;\n                        }\n                    }\n                    // run background-task with lower priority for cache-hit\n                    setTimeout(options.onNext, options.modeCacheHit && options.cacheTtl);\n                    break;\n                // 2. run onTask in background\n                case 2:\n                    local.taskCreate(options, onTask, options.onNext);\n                    break;\n                default:\n                    // 3. save onTask's result to cache\n                    // JSON.stringify data to prevent side-effects on cache\n                    options.cacheValue = JSON.stringify(data);\n                    if (!error && options.cacheValue) {\n                        local.cacheDict[options.cacheDict][options.key] = options.cacheValue;\n                    }\n                    // 4. if cache-miss, then call onError with onTask's result\n                    if (!options.modeCacheHit) {\n                        onError(error, options.cacheValue && JSON.parse(options.cacheValue));\n                    }\n                    (options.onCacheWrite || local.nop)();\n                    break;\n                }\n            });\n            options.modeNext = 0;\n            options.onNext();\n        };\n\n        local.templateRender = function (template, dict) {\n        /*\n         * this function will render the template with the given dict\n         */\n            var argList, getValue, match, renderPartial, rgx, value;\n            dict = dict || {};\n            getValue = function (key) {\n                argList = key.split(' ');\n                value = dict;\n                // iteratively lookup nested values in the dict\n                argList[0].split('.').forEach(function (key) {\n                    value = value && value[key];\n                });\n                return value;\n            };\n            renderPartial = function (match0, helper, key, partial) {\n                switch (helper) {\n                case 'each':\n                    value = getValue(key);\n                    return Array.isArray(value)\n                        ? value.map(function (dict) {\n                            // recurse with partial\n                            return local.templateRender(partial, dict);\n                        }).join('')\n                        : '';\n                case 'if':\n                    partial = partial.split('{{#unless ' + key + '}}');\n                    partial = getValue(key)\n                        ? partial[0]\n                        // handle 'unless' case\n                        : partial.slice(1).join('{{#unless ' + key + '}}');\n                    // recurse with partial\n                    return local.templateRender(partial, dict);\n                case 'unless':\n                    return getValue(key)\n                        ? ''\n                        // recurse with partial\n                        : local.templateRender(partial, dict);\n                default:\n                    // recurse with partial\n                    return match0[0] + local.templateRender(match0.slice(1), dict);\n                }\n            };\n            // render partials\n            rgx = (/\\{\\{#(\\w+) ([^}]+?)\\}\\}/g);\n            template = template || '';\n            for (match = rgx.exec(template); match; match = rgx.exec(template)) {\n                rgx.lastIndex += 1 - match[0].length;\n                template = template.replace(\n                    new RegExp('\\\\{\\\\{#(' + match[1] + ') (' + match[2] +\n                        ')\\\\}\\\\}([\\\\S\\\\s]*?)\\\\{\\\\{/' + match[1] + ' ' + match[2] +\n                        '\\\\}\\\\}'),\n                    renderPartial\n                );\n            }\n            // search for keys in the template\n            return template.replace((/\\{\\{[^}]+?\\}\\}/g), function (match0) {\n                getValue(match0.slice(2, -2));\n                if (value === undefined) {\n                    return match0;\n                }\n                argList.slice(1).forEach(function (arg) {\n                    switch (arg) {\n                    case 'alphanumeric':\n                        value = value.replace((/\\W/g), '_');\n                        break;\n                    case 'decodeURIComponent':\n                        value = decodeURIComponent(value);\n                        break;\n                    case 'encodeURIComponent':\n                        value = encodeURIComponent(value);\n                        break;\n                    case 'htmlSafe':\n                        value = value.replace((/[\"&'<>]/g), function (match0) {\n                            return '&#x' + match0.charCodeAt(0).toString(16) + ';';\n                        });\n                        break;\n                    case 'jsonStringify':\n                        value = JSON.stringify(value);\n                        break;\n                    case 'jsonStringify4':\n                        value = JSON.stringify(value, null, 4);\n                        break;\n                    case 'markdownCodeSafe':\n                        value = value.replace((/`/g), '\\'');\n                        break;\n                    default:\n                        value = value[arg]();\n                        break;\n                    }\n                });\n                return String(value);\n            });\n        };\n\n        local.templateRenderJslintLite = function (template, options) {\n        /*\n         * this function will render the jslint-lite template with the given options.packageJson\n         */\n            options.packageJson = options.packageJson ||\n                JSON.parse(local.fs.readFileSync('package.json', 'utf8'));\n            local.objectSetDefault(options.packageJson, {\n                nameAlias: options.packageJson.name.replace((/\\W/g), '_'),\n                repository: { url: 'https://github.com/kaizhu256/node-' +\n                    options.packageJson.name + '.git' }\n            }, 2);\n            options.githubRepo = options.packageJson.repository.url.split('/').slice(-2);\n            options.githubRepo[1] = options.githubRepo[1].replace((/\\.git$/), '');\n            template = template.replace(\n                (/https:\\/\\/kaizhu256\\.github\\.io\\/node-jslint-lite/g),\n                'https://' +  options.githubRepo[0] + '.github.io/' +  options.githubRepo[1]\n            );\n            template = template.replace(\n                (/kaizhu256\\/node-jslint-lite/g),\n                options.githubRepo.join('/')\n            );\n            template = template.replace(\n                (/kaizhu256%252Fnode-jslint-lite/g),\n                options.githubRepo.join('%252F')\n            );\n            template = template.replace(\n                (/node-jslint-lite/g),\n                options.githubRepo[1]\n            );\n            template = template.replace((/^#!/), '//');\n            template = template.replace((/jslint-lite/g), options.packageJson.name);\n            template = template.replace(\n                '/* istanbul instrument in package jslint */',\n                '/* istanbul instrument in package ' + options.packageJson.nameAlias + ' */'\n            );\n            template = template.replace(\n                (/\\b(assets\\.|lib\\.|local\\.|utility2_)jslint\\b/g),\n                '$1' + options.packageJson.nameAlias\n            );\n            template = template.replace(\n                (/\\bh1-jslint\\b/g),\n                'h1-' + options.packageJson.nameAlias.replace((/_/g), '-')\n            );\n            template = template.replace(\n                'assets.{{env.npm_package_nameAlias}}',\n                'assets.' + options.packageJson.nameAlias\n            );\n            return template;\n        };\n\n        local.testMock = function (mockList, onTestCase, onError) {\n        /*\n         * this function will mock the objects in mockList while running the onTestCase\n         */\n            var onError2;\n            onError2 = function (error) {\n                // restore mock[0] from mock[2]\n                mockList.reverse().forEach(function (mock) {\n                    Object.keys(mock[2]).forEach(function (key) {\n                        mock[0][key] = mock[2][key];\n                    });\n                });\n                onError(error);\n            };\n            // try to call onError with mock-objects\n            local.tryCatchOnError(function () {\n                // mock-objects\n                mockList.forEach(function (mock) {\n                    mock[2] = {};\n                    // backup mock[0] into mock[2]\n                    Object.keys(mock[1]).forEach(function (key) {\n                        if (typeof process === 'object' &&\n                                process.env === mock[0] &&\n                                mock[0][key] === undefined) {\n                            mock[0][key] = '';\n                        }\n                        mock[2][key] = mock[0][key];\n                    });\n                    // override mock[0] with mock[1]\n                    Object.keys(mock[1]).forEach(function (key) {\n                        mock[0][key] = mock[1][key];\n                    });\n                });\n                // run onTestCase\n                onTestCase(onError2);\n            }, onError2);\n        };\n\n        local.testReportCreate = function (testReport) {\n        /*\n         * this function will create test-report artifacts\n         */\n            // print test-report summary\n            console.error('\\n' + new Array(56).join('-') + '\\n' + testReport.testPlatformList\n                .filter(function (testPlatform) {\n                    // if testPlatform has no tests, then filter it out\n                    return testPlatform.testCaseList.length;\n                })\n                .map(function (testPlatform) {\n                    return '| test-report - ' + testPlatform.name + '\\n|' +\n                        ('        ' + testPlatform.timeElapsed + ' ms     ')\n                        .slice(-16) +\n                        ('        ' + testPlatform.testsFailed + ' failed ')\n                        .slice(-16) +\n                        ('        ' + testPlatform.testsPassed + ' passed ')\n                        .slice(-16) + '     |\\n' + new Array(56).join('-');\n                })\n                .join('\\n') + '\\n');\n            // create test-report.html\n            local.fs.writeFileSync(\n                local.env.npm_config_dir_build + '/test-report.html',\n                local.testReportMerge(testReport, {})\n            );\n            // create build.badge.svg\n            local.fs.writeFileSync(local.env.npm_config_dir_build +\n                '/build.badge.svg', local.assetsDict['/assets.buildBadge.template.svg']\n                // edit branch name\n                .replace((/0000-00-00 00:00:00/g),\n                    new Date().toISOString().slice(0, 19).replace('T', ' '))\n                // edit branch name\n                .replace((/- master -/g), '| ' + local.env.CI_BRANCH + ' |')\n                // edit commit id\n                .replace(\n                    (/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/g),\n                    local.env.CI_COMMIT_ID\n                ));\n            // create test-report.badge.svg\n            local.fs.writeFileSync(\n                local.env.npm_config_dir_build + '/test-report.badge.svg',\n                local.assetsDict['/assets.testReportBadge.template.svg']\n                    // edit number of tests failed\n                    .replace((/999/g), testReport.testsFailed)\n                    // edit badge color\n                    .replace(\n                        (/d00/g),\n                        // coverage-hack - cover both fail and pass cases\n                        '0d00'.slice(!!testReport.testsFailed).slice(0, 3)\n                    )\n            );\n            console.error('created test-report file://' + local.env.npm_config_dir_build +\n                '/test-report.html\\n');\n            // if any test failed, then exit with non-zero exit-code\n            console.error('\\n' + local.env.MODE_BUILD +\n                ' - ' + testReport.testsFailed + ' failed tests\\n');\n            // exit with number of tests failed\n            local.exit(testReport.testsFailed);\n        };\n\n        local.testReportMerge = function (testReport1, testReport2) {\n        /*\n         * this function will\n         * 1. merge testReport2 into testReport1\n         * 2. return testReport1 in html-format\n         */\n            var errorStackList, testCaseNumber, testReport;\n            // 1. merge testReport2 into testReport1\n            [testReport1, testReport2].forEach(function (testReport, ii) {\n                ii += 1;\n                local.objectSetDefault(testReport, {\n                    date: new Date().toISOString(),\n                    errorStackList: [],\n                    testPlatformList: [],\n                    timeElapsed: 0\n                }, 8);\n                // security - handle malformed testReport\n                local.assert(\n                    testReport && typeof testReport === 'object',\n                    ii + ' invalid testReport ' + typeof testReport\n                );\n                // validate timeElapsed\n                local.assert(\n                    typeof testReport.timeElapsed === 'number',\n                    ii + ' invalid testReport.timeElapsed ' + typeof testReport.timeElapsed\n                );\n                // security - handle malformed testReport.testPlatformList\n                testReport.testPlatformList.forEach(function (testPlatform) {\n                    local.objectSetDefault(testPlatform, {\n                        name: 'undefined',\n                        testCaseList: [],\n                        timeElapsed: 0\n                    }, 8);\n                    local.assert(\n                        typeof testPlatform.name === 'string',\n                        ii + ' invalid testPlatform.name ' + typeof testPlatform.name\n                    );\n                    // insert $MODE_BUILD into testPlatform.name\n                    if (local.env.MODE_BUILD) {\n                        testPlatform.name = testPlatform.name.replace(\n                            (/^(browser|node)\\b/),\n                            local.env.MODE_BUILD + ' - $1'\n                        );\n                    }\n                    // validate timeElapsed\n                    local.assert(\n                        typeof testPlatform.timeElapsed === 'number',\n                        ii + ' invalid testPlatform.timeElapsed ' +\n                            typeof testPlatform.timeElapsed\n                    );\n                    // security - handle malformed testPlatform.testCaseList\n                    testPlatform.testCaseList.forEach(function (testCase) {\n                        local.objectSetDefault(testCase, {\n                            errorStack: '',\n                            name: 'undefined',\n                            timeElapsed: 0\n                        }, 8);\n                        local.assert(\n                            typeof testCase.errorStack === 'string',\n                            ii + ' invalid testCase.errorStack ' + typeof testCase.errorStack\n                        );\n                        local.assert(\n                            typeof testCase.name === 'string',\n                            ii + ' invalid testCase.name ' + typeof testCase.name\n                        );\n                        // validate timeElapsed\n                        local.assert(\n                            typeof testCase.timeElapsed === 'number',\n                            ii + ' invalid testCase.timeElapsed ' + typeof testCase.timeElapsed\n                        );\n                    });\n                });\n            });\n            // merge testReport2.testPlatformList into testReport1.testPlatformList\n            testReport2.testPlatformList.forEach(function (testPlatform2) {\n                // add testPlatform2 to testReport1.testPlatformList\n                testReport1.testPlatformList.push(testPlatform2);\n            });\n            // update testReport1.timeElapsed\n            testReport1.timeElapsed += testReport2.timeElapsed;\n            testReport = testReport1;\n            testReport.testsFailed = 0;\n            testReport.testsPassed = 0;\n            testReport.testsPending = 0;\n            testReport.testPlatformList.forEach(function (testPlatform) {\n                testPlatform.testsFailed = 0;\n                testPlatform.testsPassed = 0;\n                testPlatform.testsPending = 0;\n                testPlatform.testCaseList.forEach(function (testCase) {\n                    switch (testCase.status) {\n                    // update failed tests\n                    case 'failed':\n                        testPlatform.testsFailed += 1;\n                        testReport.testsFailed += 1;\n                        break;\n                    // update passed tests\n                    case 'passed':\n                        testPlatform.testsPassed += 1;\n                        testReport.testsPassed += 1;\n                        break;\n                    // update pending tests\n                    default:\n                        testPlatform.testsPending += 1;\n                        testReport.testsPending += 1;\n                    }\n                });\n                // update testPlatform.status\n                testPlatform.status = testPlatform.testsFailed\n                    ? 'failed'\n                    : testPlatform.testsPending\n                    ? 'pending'\n                    : 'passed';\n                // sort testCaseList by status and name\n                testPlatform.testCaseList.sort(function (arg1, arg2) {\n                    return arg1.status.replace('passed', 'z') + arg1.name >\n                        arg2.status.replace('passed', 'z') + arg2.name\n                        ? 1\n                        : -1;\n                });\n            });\n            // sort testPlatformList by status and name\n            testReport.testPlatformList.sort(function (arg1, arg2) {\n                return arg1.status.replace('passed', 'z') + arg1.name >\n                    arg2.status.replace('passed', 'z') + arg2.name\n                    ? 1\n                    : -1;\n            });\n            // stop testReport timer\n            if (testReport.testsPending === 0) {\n                local.timeElapsedPoll(testReport);\n            }\n            // 2. return testReport1 in html-format\n            // json-copy testReport that will be modified for html templating\n            testReport = local.jsonCopy(testReport1);\n            // update timeElapsed\n            local.timeElapsedPoll(testReport);\n            testReport.testPlatformList.forEach(function (testPlatform) {\n                local.timeElapsedPoll(testPlatform);\n                testPlatform.testCaseList.forEach(function (testCase) {\n                    if (!testCase.done) {\n                        local.timeElapsedPoll(testCase);\n                    }\n                    testPlatform.timeElapsed = Math.max(\n                        testPlatform.timeElapsed,\n                        testCase.timeElapsed\n                    );\n                });\n                // update testReport.timeElapsed with testPlatform.timeElapsed\n                testReport.timeElapsed =\n                    Math.max(testReport.timeElapsed, testPlatform.timeElapsed);\n            });\n            // create html test-report\n            testCaseNumber = 0;\n            return local.templateRender(\n                local.assetsDict['/assets.testReport.template.html'],\n                local.objectSetOverride(testReport, {\n                    env: local.env,\n                    // map testPlatformList\n                    testPlatformList: testReport.testPlatformList\n                        .filter(function (testPlatform) {\n                            // if testPlatform has no tests, then filter it out\n                            return testPlatform.testCaseList.length;\n                        })\n                        .map(function (testPlatform, ii) {\n                            errorStackList = [];\n                            return local.objectSetOverride(testPlatform, {\n                                errorStackList: errorStackList,\n                                name: testPlatform.name,\n                                screenCaptureImg: testPlatform.screenCaptureImg,\n                                // map testCaseList\n                                testCaseList: testPlatform.testCaseList.map(function (\n                                    testCase\n                                ) {\n                                    testCaseNumber += 1;\n                                    if (testCase.errorStack) {\n                                        errorStackList.push({\n                                            errorStack: testCaseNumber + '. ' + testCase.name +\n                                                '\\n' + testCase.errorStack\n                                        });\n                                    }\n                                    return local.objectSetOverride(testCase, {\n                                        testCaseNumber: testCaseNumber,\n                                        testReportTestStatusClass: 'test' +\n                                            testCase.status[0].toUpperCase() +\n                                            testCase.status.slice(1)\n                                    }, 8);\n                                }),\n                                preClass: errorStackList.length\n                                    ? ''\n                                    : 'displayNone',\n                                testPlatformNumber: ii + 1\n                            });\n                        }, 8),\n                    testStatusClass: testReport.testsFailed\n                        ? 'testFailed'\n                        : 'testPassed'\n                }, 8)\n            );\n        };\n\n        local.testRunDefault = function (options) {\n        /*\n         * this function will run all tests in testPlatform.testCaseList\n         */\n            var exit, testPlatform, testReport, testReportDiv1, timerInterval;\n            // init modeTest\n            local.modeTest = local.modeTest || local.env.npm_config_mode_test;\n            if (!(local.modeTest || options.modeTest)) {\n                return;\n            }\n            if (!options.testRunBeforeDone) {\n                options.testRunBeforeTimer = options.testRunBeforeTimer ||\n                    setTimeout(function () {\n                        local._testRunBefore();\n                        local.onReadyAfter(function () {\n                            options.testRunBeforeDone = true;\n                            local.testRunDefault(options);\n                        });\n                    });\n                return;\n            }\n            // reset _testRunBefore\n            options.testRunBeforeDone = options.testRunBeforeTimer = null;\n            // visual notification - testRun\n            local.ajaxProgressUpdate();\n            switch (local.modeJs) {\n            case 'node':\n                // mock proces.exit\n                exit = process.exit;\n                process.exit = local.nop;\n                /* istanbul ignore next */\n                if (local.env.npm_package_buildCustomOrg &&\n                        local.fs.existsSync(local.env.npm_package_buildCustomOrg)) {\n                    local.exportsCustomOrg =\n                        require(process.cwd() + '/' + local.env.npm_package_buildCustomOrg);\n                }\n                break;\n            }\n            // init modeTestCase\n            local.modeTestCase = local.modeTestCase || local.env.npm_config_mode_test_case;\n            // init testReport\n            testReport = local.testReport;\n            // init testReport timer\n            local.timeElapsedStart(testReport);\n            // init testPlatform\n            testPlatform = local.testReport.testPlatformList[0];\n            // init testPlatform timer\n            local.timeElapsedStart(testPlatform);\n            // reset testPlatform.testCaseList\n            testPlatform.testCaseList.length = 0;\n            // add tests into testPlatform.testCaseList\n            Object.keys(options).forEach(function (key) {\n                // add testCase options[key] to testPlatform.testCaseList\n                if ((local.modeTestCase && local.modeTestCase.split(',').indexOf(key) >= 0) ||\n                        (!local.modeTestCase && key.indexOf('testCase_') === 0)) {\n                    testPlatform.testCaseList.push({\n                        name: key,\n                        status: 'pending',\n                        onTestCase: options[key]\n                    });\n                }\n            });\n            // visual notification - update test-progress until done\n            // init testReportDiv1 element\n            if (local.modeJs === 'browser') {\n                testReportDiv1 = document.querySelector('#testReportDiv1');\n            }\n            testReportDiv1 = testReportDiv1 || { style: {} };\n            testReportDiv1.style.display = 'block';\n            testReportDiv1.innerHTML = local.testReportMerge(testReport, {});\n            // update test-report status every 1000 ms until done\n            timerInterval = setInterval(function () {\n                // update testReportDiv1 in browser\n                testReportDiv1.innerHTML = local.testReportMerge(testReport, {});\n                if (testReport.testsPending === 0) {\n                    // cleanup timerInterval\n                    clearInterval(timerInterval);\n                }\n            }, 1000);\n            // shallow-copy testPlatform.testCaseList to prevent side-effects\n            // from in-place sort from testReportMerge\n            local.onParallelList({\n                list: testPlatform.testCaseList.slice(),\n                rateLimit: Infinity\n            }, function (testCase, onParallel) {\n                var onError, timerTimeout;\n                onError = function (error) {\n                    // cleanup timerTimeout\n                    clearTimeout(timerTimeout);\n                    // if testCase already done, then fail testCase with error for ending again\n                    if (testCase.done) {\n                        error = error || new Error('callback in testCase ' +\n                            testCase.name + ' called multiple times');\n                    }\n                    // if error occurred, then fail testCase\n                    if (error) {\n                        testCase.status = 'failed';\n                        console.error('\\ntestCase ' + testCase.name + ' failed\\n' +\n                            error.message + '\\n' + error.stack);\n                        testCase.errorStack = testCase.errorStack ||\n                            error.message + '\\n' + error.stack;\n                        // validate errorStack is non-empty\n                        local.assert(\n                            testCase.errorStack,\n                            'invalid errorStack ' + testCase.errorStack\n                        );\n                    }\n                    // if already done, then do nothing\n                    if (testCase.done) {\n                        return;\n                    }\n                    testCase.done = true;\n                    if (testCase.status === 'pending') {\n                        testCase.status = 'passed';\n                    }\n                    // stop testCase timer\n                    local.timeElapsedPoll(testCase);\n                    console.error('[' + local.modeJs + ' test-case ' +\n                        testPlatform.testCaseList.filter(function (testCase) {\n                            return testCase.done;\n                        }).length + ' of ' + testPlatform.testCaseList.length + ' ' +\n                        testCase.status + '] - ' + testCase.name);\n                    // if all tests are done, then create test-report\n                    onParallel();\n                };\n                testCase = testCase.element;\n                // init timerTimeout\n                timerTimeout = local.onTimeout(onError, local.timeoutDefault, testCase.name);\n                // increment number of tests remaining\n                onParallel.counter += 1;\n                // try to run testCase\n                local.tryCatchOnError(function () {\n                    // start testCase timer\n                    local.timeElapsedStart(testCase);\n                    testCase.onTestCase(null, onError);\n                }, onError);\n            }, function () {\n            /*\n             * this function will create the test-report after all tests are done\n             */\n                local.ajaxProgressUpdate();\n                // stop testPlatform timer\n                local.timeElapsedPoll(testPlatform);\n                // finalize testReport\n                local.testReportMerge(testReport, {});\n                switch (local.modeJs) {\n                case 'browser':\n                    // notify saucelabs of test results\n                    // https://docs.saucelabs.com/reference/rest-api/\n                    // #js-unit-testing\n                    local.global.global_test_results = {\n                        coverage: local.global.__coverage__,\n                        failed: testReport.testsFailed,\n                        testReport: testReport\n                    };\n                    break;\n                case 'node':\n                    // create test-report.json\n                    local.fs.writeFileSync(\n                        local.env.npm_config_dir_build + '/test-report.json',\n                        JSON.stringify(testReport)\n                    );\n                    break;\n                }\n                setTimeout(function () {\n                    switch (local.modeJs) {\n                    case 'browser':\n                        // update coverageReport\n                        local.istanbulCoverageReportCreate({\n                            coverage: local.global.__coverage__\n                        });\n                        if (document.querySelector('#coverageReportDiv1')) {\n                            document.querySelector('#coverageReportDiv1').innerHTML =\n                                local.istanbul.coverageReportCreate({\n                                    coverage: window.__coverage__\n                                });\n                        }\n                        break;\n                    case 'node':\n                        // restore process.exit\n                        process.exit = exit;\n                        break;\n                    }\n                    // exit with number of tests failed\n                    local.exit(testReport.testsFailed);\n                // coverage-hack - wait 1000 ms for timerInterval\n                }, 1000);\n            });\n        };\n\n        local.testRunServer = function (options) {\n        /*\n         * this function will\n         * 1. create server from local._middleware\n         * 2. start server on local.env.PORT\n         * 3. run tests\n         */\n            if (local.global.utility2_serverHttp1) {\n                return;\n            }\n            local.onReadyBefore.counter += 1;\n            local._middleware = local._middleware || local.middlewareGroupCreate([\n                local.middlewareInit,\n                local.middlewareForwardProxy,\n                local.middlewareAssetsCached,\n                local._middlewareJsonpStateInit\n            ]);\n            // 1. create server from local._middleware\n            local.serverLocalRequestHandler = function (request, response) {\n                local._middleware(request, response, function (error) {\n                    local._middlewareError(error, request, response);\n                });\n            };\n            local.global.utility2_serverHttp1 = local.http.createServer(\n                local.serverLocalRequestHandler\n            );\n            // 2. start server on local.env.PORT\n            console.error('server listening on http-port ' + local.env.PORT);\n            local.onReadyBefore.counter += 1;\n            local.global.utility2_serverHttp1.listen(local.env.PORT, local.onReadyBefore);\n            // 3. run tests\n            local.testRunDefault(options);\n            local.onReadyBefore();\n        };\n\n        local.timeElapsedPoll = function (options) {\n        /*\n         * this function will poll options.timeElapsed\n         */\n            options = local.timeElapsedStart(options);\n            options.timeElapsed = Date.now() - options.timeStart;\n            return options;\n        };\n\n        local.timeElapsedStart = function (options, timeStart) {\n        /*\n         * this function will start options.timeElapsed\n         */\n            options = options || {};\n            options.timeStart = timeStart || options.timeStart || Date.now();\n            return options;\n        };\n\n        local.tryCatchOnError = function (fnc, onError) {\n        /*\n         * this function will try to run the fnc in a try-catch block,\n         * else call onError with the errorCaught\n         */\n            // validate onError\n            local.assert(typeof onError === 'function', typeof onError);\n            try {\n                // reset errorCaught\n                local._debugTryCatchErrorCaught = null;\n                return fnc();\n            } catch (errorCaught) {\n                // debug errorCaught\n                local._debugTryCatchErrorCaught = errorCaught;\n                return onError(errorCaught);\n            }\n        };\n\n        local.tryCatchReadFile = function (file, options) {\n        /*\n         * this function will try to read the file or return an empty string\n         */\n            var data;\n            data = '';\n            try {\n                data = local.fs.readFileSync(file, options);\n            } catch (ignore) {\n            }\n            return data;\n        };\n\n        local.urlParse = function (url) {\n        /*\n         * https://developer.mozilla.org/en-US/docs/Web/API/URL\n         * this function will parse the url according to the above spec, plus a query param\n         */\n            var urlParsed;\n            urlParsed = {};\n            // try to parse the url\n            local.tryCatchOnError(function () {\n                // resolve host-less url\n                switch (local.modeJs) {\n                case 'browser':\n                    local.serverLocalHost = local.serverLocalHost ||\n                        location.protocol + '//' + location.host;\n                    // resolve absolute path\n                    if (url[0] === '/') {\n                        url = local.serverLocalHost + url;\n                    // resolve relative path\n                    } else if (!(/^\\w+?:\\/\\//).test(url)) {\n                        url = local.serverLocalHost +\n                            location.pathname.replace((/\\/[^\\/]*?$/), '') + '/' + url;\n                    }\n                    urlParsed = new local.global.URL(url);\n                    urlParsed.path = '/' + urlParsed.href\n                        .split('/')\n                        .slice(3)\n                        .join('/')\n                        .split('#')[0];\n                    break;\n                case 'node':\n                    local.env.PORT = local.env.PORT || '8081';\n                    local.serverLocalHost = local.serverLocalHost ||\n                        ('http://127.0.0.1:' + local.env.PORT);\n                    // resolve absolute path\n                    if (url[0] === '/') {\n                        url = local.serverLocalHost + url;\n                    // resolve relative path\n                    } else if (!(/^\\w+?:\\/\\//).test(url)) {\n                        url = local.serverLocalHost + '/' + url;\n                    }\n                    urlParsed = local.url.parse(url);\n                    break;\n                }\n                // init query\n                urlParsed.query = {};\n                urlParsed.search.slice(1).replace((/[^&]+/g), function (item) {\n                    item = item.split('=');\n                    item[0] = decodeURIComponent(item[0]);\n                    item[1] = decodeURIComponent(item.slice(1).join('='));\n                    // parse repeating query-param as an array\n                    if (urlParsed.query[item[0]]) {\n                        if (!Array.isArray(urlParsed.query[item[0]])) {\n                            urlParsed.query[item[0]] = [urlParsed.query[item[0]]];\n                        }\n                        urlParsed.query[item[0]].push(item[1]);\n                    } else {\n                        urlParsed.query[item[0]] = item[1];\n                    }\n                });\n            }, local.nop);\n            // https://developer.mozilla.org/en/docs/Web/API/URL#Properties\n            return {\n                hash: urlParsed.hash || '',\n                host: urlParsed.host || '',\n                hostname: urlParsed.hostname || '',\n                href: urlParsed.href || '',\n                path: urlParsed.path || '',\n                pathname: urlParsed.pathname || '',\n                port: urlParsed.port || '',\n                protocol: urlParsed.protocol || '',\n                query: urlParsed.query || {},\n                search: urlParsed.search || ''\n            };\n        };\n\n        local.uuid4Create = function () {\n        /*\n         * this function will create a random uuid,\n         * with format 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n         */\n            // code derived from http://jsperf.com/uuid4\n            var id, ii;\n            id = '';\n            for (ii = 0; ii < 32; ii += 1) {\n                switch (ii) {\n                case 8:\n                case 20:\n                    id += '-';\n                    // coerce to finite integer\n                    id += (Math.random() * 16 | 0).toString(16);\n                    break;\n                case 12:\n                    id += '-';\n                    id += '4';\n                    break;\n                case 16:\n                    id += '-';\n                    id += (Math.random() * 4 | 8).toString(16);\n                    break;\n                default:\n                    // coerce to finite integer\n                    id += (Math.random() * 16 | 0).toString(16);\n                }\n            }\n            return id;\n        };\n    }());\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        local.ajaxProgressCounter = 0;\n        local.ajaxProgressState = 0;\n        local.apidocCreate = local.apidoc.apidocCreate || local.normalizeText;\n        local.cacheDict = {};\n        local.contentTypeDict = {\n            // application\n            '.js': 'application/javascript; charset=UTF-8',\n            '.json': 'application/json; charset=UTF-8',\n            '.pdf': 'application/pdf',\n            '.xml': 'application/xml; charset=UTF-8',\n            // image\n            '.bmp': 'image/bmp',\n            '.gif': 'image/gif',\n            '.jpeg': 'image/jpeg',\n            '.jpg': 'image/jpeg',\n            '.png': 'image/png',\n            '.svg': 'image/svg+xml; charset=UTF-8',\n            // text\n            '.css': 'text/css; charset=UTF-8',\n            '.htm': 'text/html; charset=UTF-8',\n            '.html': 'text/html; charset=UTF-8',\n            '.md': 'text/markdown; charset=UTF-8',\n            '.txt': 'text/plain; charset=UTF-8'\n        };\n        // init env\n        local.env = local.modeJs === 'browser'\n            ? {}\n            : process.env;\n        local.objectSetDefault(local.env, {\n            npm_package_nameAlias: (local.env.npm_package_name || '').replace((/\\W/g), '_')\n        });\n        local.objectSetDefault(local.env, {\n            npm_package_description: 'the greatest app in the world!',\n            npm_package_name: 'my-app',\n            npm_package_nameAlias: 'my_app',\n            npm_package_version: '0.0.1'\n        });\n        local.errorDefault = new Error('default error');\n        local.istanbulCoverageMerge = local.istanbul.coverageMerge || local.echo;\n        local.istanbulCoverageMerge = local.istanbul.coverageMerge || local.echo;\n        local.istanbulCoverageReportCreate = local.istanbul.coverageReportCreate || local.echo;\n        local.istanbulInstrumentInPackage = local.istanbul.instrumentInPackage || local.echo;\n        local.istanbulInstrumentSync = local.istanbul.instrumentSync || local.echo;\n        local.jslintAndPrint = local.jslint.jslintAndPrint || local.echo;\n        local.regexpEmailValidate = new RegExp(\n            '^[a-zA-Z0-9.!#$%&\\'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' +\n                '[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'\n        );\n        // https://en.wikipedia.org/wiki/E.164\n        local.regexpPhoneValidate =\n            (/^(?:\\+\\d{1,3}[ \\-]{0,1}){0,1}(?:\\(\\d{1,4}\\)[ \\-]{0,1}){0,1}\\d[\\d \\-]{7,16}$/);\n        local.regexpUriComponentCharset = (/[\\w\\!\\%\\'\\(\\)\\*\\-\\.\\~]/);\n        local.regexpUuidValidate =\n            (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        local.stringAsciiCharset =\n            '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\b\\t\\n\\x0b\\f\\r\\x0e\\x0f' +\n            '\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f' +\n            ' !\"#$%&\\'()*+,-./0123456789:;<=>?' +\n            '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_' +\n            '`abcdefghijklmnopqrstuvwxyz{|}~\\x7f';\n        local.stringUriComponentCharset = '!%\\'()*-.' +\n            '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~';\n        local.taskOnTaskDict = {};\n        local.testReport = { testPlatformList: [{\n            name: local.modeJs === 'browser'\n                ? 'browser - ' + location.pathname + ' - ' + navigator.userAgent + ' - ' +\n                    new Date().toISOString()\n                : 'node - ' + process.platform + ' ' + process.version + ' - ' +\n                    new Date().toISOString(),\n            screenCaptureImg: local.env.MODE_BUILD_SCREEN_CAPTURE,\n            testCaseList: []\n        }] };\n        local.uglify = local.uglifyjs.uglify || local.echo;\n        // init serverLocalHost\n        local.urlParse('');\n        // init timeoutDefault\n        switch (local.modeJs) {\n        case 'browser':\n            location.search.replace(\n                (/\\b(NODE_ENV|mode[A-Z]\\w+|timeExit|timeoutDefault)=([^#&]+)/g),\n                function (match0, key, value) {\n                    // jslint-hack\n                    local.nop(match0);\n                    local[key] = local.env[key] = value;\n                    // try to JSON.parse the string\n                    local.tryCatchOnError(function () {\n                        local[key] = JSON.parse(value);\n                    }, local.nop);\n                }\n            );\n            break;\n        case 'node':\n            local.timeoutDefault = local.env.npm_config_timeout_default;\n            break;\n        }\n        // init timeExit\n        local.timeExit = Number(local.timeExit) ||\n            Number(Date.now() + Number(local.env.npm_config_timeout_exit)) ||\n            Number(local.env.npm_config_time_exit);\n        if (local.timeExit) {\n            local.timeoutDefault = local.timeExit - Date.now();\n            setTimeout(local.exit, local.timeoutDefault);\n        }\n        // re-init timeoutDefault\n        local.timeoutDefault = Number(local.timeoutDefault || 30000);\n        local.onReadyAfter(local.nop);\n        // init state\n        local._stateInit({});\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // require modules\n        local.http = local._http;\n        local.https = local._http;\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // require modules\n        local.Module = require('module');\n        local.__require = require;\n        local.child_process = require('child_process');\n        local.fs = require('fs');\n        local.http = require('http');\n        local.https = require('https');\n        local.net = require('net');\n        local.path = require('path');\n        local.repl = require('repl');\n        local.stream = require('stream');\n        local.url = require('url');\n        local.vm = require('vm');\n        local.zlib = require('zlib');\n        // init env\n        local.objectSetDefault(local.env, {\n            npm_config_dir_build: process.cwd() + '/tmp/build',\n            npm_config_dir_tmp: process.cwd() + '/tmp'\n        });\n        if (local.global.utility2_rollup) {\n            local.assetsDict['/assets.utility2.rollup.js'] =\n                local.fs.readFileSync(__filename, 'utf8')\n                .split('\\n/* script-end /assets.utility2.rollup.end.js */')[0] +\n                '\\n/* script-end /assets.utility2.rollup.end.js */\\n';\n            break;\n        }\n        // init assets\n        [\n            'lib.apidoc.js',\n            'lib.db.js',\n            'lib.github_crud.js',\n            'lib.istanbul.js',\n            'lib.jslint.js',\n            'lib.sjcl.js',\n            'lib.swgg.js',\n            'lib.uglifyjs.js',\n            'lib.utility2.js',\n            'lib.utility2.sh'\n        ].forEach(function (key) {\n            switch (key) {\n            case 'lib.apidoc.js':\n            case 'lib.db.js':\n            case 'lib.github_crud.js':\n            case 'lib.istanbul.js':\n            case 'lib.jslint.js':\n            case 'lib.sjcl.js':\n            case 'lib.uglifyjs.js':\n                local.assetsDict['/assets.utility2.' + key] =\n                    local.tryCatchReadFile(__dirname + '/' + key, 'utf8')\n                        .replace((/^#!/), '//');\n                break;\n            case 'lib.swgg.js':\n            case 'lib.utility2.js':\n                key = key.replace('lib.', '');\n                local.assetsDict['/assets.' + key] =\n                    local.tryCatchReadFile(__dirname + '/lib.' + key, 'utf8')\n                        .replace((/^#!/), '//');\n                break;\n            case 'lib.utility2.sh':\n                local.jslintAndPrintConditional(\n                    local.tryCatchReadFile(__dirname + '/' + key, 'utf8')\n                        .replace((/^ *?#!! .*$/gm), ''),\n                    __dirname + '/' + key + '.html'\n                );\n                break;\n            }\n        });\n        local.assetsDict['/assets.utility2.rollup.js'] = [\n            'header',\n            '/assets.utility2.rollup.begin.js',\n            'lib.apidoc.js',\n            'lib.db.js',\n            'lib.github_crud.js',\n            'lib.istanbul.js',\n            'lib.jslint.js',\n            'lib.sjcl.js',\n            'lib.uglifyjs.js',\n            'lib.utility2.js',\n            'lib.swgg.js',\n            '/assets.utility2.rollup.end.js'\n        ].map(function (key) {\n            var script;\n            switch (key) {\n            case 'header':\n                return '/* this rollup was created with utility2 ' +\n                    '(https://github.com/kaizhu256/node-utility2) */\\n';\n            case '/assets.utility2.rollup.begin.js':\n            case '/assets.utility2.rollup.end.js':\n                script = local.assetsDict[key];\n                break;\n            case 'lib.apidoc.js':\n            case 'lib.db.js':\n            case 'lib.github_crud.js':\n            case 'lib.istanbul.js':\n            case 'lib.jslint.js':\n            case 'lib.sjcl.js':\n            case 'lib.uglifyjs.js':\n                key = '/assets.utility2.' + key;\n                script = local.assetsDict[key];\n                break;\n            case 'lib.swgg.js':\n            case 'lib.utility2.js':\n                key = '/assets.' + key.replace('lib.', '');\n                script = local.assetsDict[key];\n                break;\n            }\n            return '/* script-begin ' + key + ' */\\n' +\n                script.trim() +\n                '\\n/* script-end ' + key + ' */\\n';\n        }).join('\\n\\n\\n');\n        // init assets.lib.rollup.js\n        local.assetsDict['/assets.swgg.rollup.js'] =\n            local.assetsDict['/assets.utility2.rollup.js'];\n        // merge previous test-report\n        if (local.env.npm_config_file_test_report_merge) {\n            console.error('merging file://' + local.env.npm_config_file_test_report_merge +\n                ' to test-report');\n            local.testReportMerge(\n                local.testReport,\n                JSON.parse(local.tryCatchReadFile(\n                    local.env.npm_config_file_test_report_merge,\n                    'utf8'\n                ) || '{}')\n            );\n        }\n        break;\n    }\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - cli\n    /* istanbul ignore next */\n    case 'node':\n        switch (process.argv[2]) {\n        case '--eval':\n        case '-e':\n            local.global.local = local;\n            local.vm.runInThisContext(process.argv[3]);\n            return;\n        case '--interactive':\n        case '-i':\n            local.replStart();\n            local.global.local = local;\n            break;\n        case 'ajax':\n            local.ajax(JSON.parse(process.argv[3]), function (error, data) {\n                // validate no error occurred\n                local.assert(!error, error);\n                process.stdout.write(new Buffer((data && data.response) || ''));\n            });\n            return;\n        case 'browserTest':\n            local.browserTest({}, local.exit);\n            return;\n        case 'dbTableTravisOrgCrudGetManyByQuery':\n            local.dbTableTravisOrgCreate(JSON.parse(process.argv[3]), function (error, data) {\n                // validate no error occurred\n                local.assert(!error, error);\n                console.log(data.crudGetManyByQuery(JSON.parse(process.argv[3]))\n                    .map(function (element) {\n                        return element._id;\n                    })\n                    .join('\\n'));\n            });\n            return;\n        case 'dbTableTravisOrgUpdate':\n            local.dbTableTravisOrgUpdate(\n                JSON.parse(process.argv[3]),\n                local.onErrorThrow\n            );\n            return;\n        case 'onParallelListSpawn':\n            local.onParallelList({\n                list: process.argv[3].split('\\n').filter(function (element) {\n                    return element.trim();\n                }),\n                rateLimit: process.argv[4],\n                retryLimit: process.argv[5]\n            }, function (options, onParallel) {\n                onParallel.counter += 1;\n                local.child_process.spawn(\n                    '/bin/sh',\n                    ['-c', '. ' + local.__dirname + '/lib.utility2.sh; ' + options.element],\n                    { stdio: ['ignore', 1, 2] }\n                ).on('exit', function (exitCode) {\n                    console.error('onParallelListSpawn - [' + (onParallel.ii + 1) +\n                        ' of ' + options.list.length + '] exitCode ' + exitCode);\n                    onParallel(exitCode && new Error(exitCode), options);\n                });\n            }, local.onErrorThrow);\n            return;\n        }\n        // init lib\n        [\n            'lib.swgg.js'\n        ].forEach(function (file) {\n            file = __dirname + '/' + file;\n            if (!local.global.utility2_rollup && local.fs.existsSync(file)) {\n                require(file);\n            }\n        });\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-utility2/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will demo automated browser-tests with coverage (via electron and istanbul)\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install electron-lite utility2 && \\\n            PATH=\"$(pwd)/node_modules/.bin:$PATH\" \\\n            PORT=8081 \\\n            npm_config_mode_coverage=utility2 \\\n            node_modules/.bin/utility2 test example.js\n    3. view test-report in ./tmp/build/test-report.html\n    4. view coverage in ./tmp/build/coverage.html/index.html\n*/\n\n\n\n/* istanbul instrument in package utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? window.utility2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n        // run test-server\n        local.testRunServer(local);\n        // init assets\n        local.assetsDict['/assets.hello'] = 'hello';\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        local.testCase_ajax_200 = function (options, onError) {\n        /*\n         * this function will test ajax's \"200 ok\" handling-behavior\n         */\n            options = {};\n            // test ajax-path 'assets.hello'\n            local.ajax({ url: 'assets.hello' }, function (error, xhr) {\n                local.tryCatchOnError(function () {\n                    // validate no error occurred\n                    local.assert(!error, error);\n                    // validate data\n                    options.data = xhr.responseText;\n                    local.assert(options.data === 'hello', options.data);\n                    onError();\n                }, onError);\n            });\n        };\n        local.testCase_ajax_404 = function (options, onError) {\n        /*\n         * this function will test ajax's \"404 not found\" handling-behavior\n         */\n            options = {};\n            // test ajax-path '/undefined'\n            local.ajax({ url: '/undefined' }, function (error) {\n                local.tryCatchOnError(function () {\n                    // validate error occurred\n                    local.assert(error, error);\n                    options.statusCode = error.statusCode;\n                    // validate 404 http statusCode\n                    local.assert(options.statusCode === 404, options.statusCode);\n                    onError();\n                }, onError);\n            });\n        };\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        local.testCase_webpage_default = function (options, onError) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n        break;\n    }\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            case 'testRunButton2':\n                // run tests\n                local.modeTest = true;\n                local.testRunDefault(local);\n                break;\n            default:\n                if (location.href.indexOf(\"modeTest=\") >= 0) {\n                    return;\n                }\n                // try to JSON.stringify #inputTextareaEval1\n                try {\n                    document.querySelector('#outputPreJsonStringify1').textContent = '';\n                    document.querySelector('#outputPreJsonStringify1').textContent =\n                        local.jsonStringifyOrdered(\n                            JSON.parse(document.querySelector('#inputTextareaEval1').value),\n                            null,\n                            4\n                        );\n                } catch (ignore) {\n                }\n                // jslint #inputTextareaEval1\n                local.jslint.errorText = '';\n                if (document.querySelector('#inputTextareaEval1').value\n                        .indexOf('/*jslint') >= 0) {\n                    local.jslint.jslintAndPrint(\n                        document.querySelector('#inputTextareaEval1').value,\n                        'inputTextareaEval1.js'\n                    );\n                }\n                document.querySelector('#outputPreJslint1').textContent =\n                    local.jslint.errorText\n                    .replace((/\\u001b\\[\\d+m/g), '')\n                    .trim();\n                // try to cleanup __coverage__\n                try {\n                    delete local.global.__coverage__['/inputTextareaEval1.js'];\n                } catch (ignore) {\n                }\n                // try to cover and eval input-code\n                try {\n                    /*jslint evil: true*/\n                    document.querySelector('#outputTextarea1').value =\n                        local.istanbul.instrumentSync(\n                            document.querySelector('#inputTextareaEval1').value,\n                            '/inputTextareaEval1.js'\n                        );\n                    eval(document.querySelector('#outputTextarea1').value);\n                    document.querySelector('#coverageReportDiv1').innerHTML =\n                        local.istanbul.coverageReportCreate({\n                            coverage: window.__coverage__\n                        });\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    ids: false,\\n\\\n*/\\n\\\n#outputPreJslint1 {\\n\\\n    color: #d00;\\n\\\n}\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>edit or paste script below to cover and test</label>\\n\\\n<textarea class=\"oneval onkeyup onreset\" id=\"inputTextareaEval1\">\\n\\\n// remove comment below to disable jslint\\n\\\n/*jslint\\n\\\n    browser: true,\\n\\\n    es6: true\\n\\\n*/\\n\\\n/*global window*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var testCaseDict;\\n\\\n    testCaseDict = {};\\n\\\n    testCaseDict.modeTest = true;\\n\\\n\\n\\\n    // comment this testCase to disable the failed assertion demo\\n\\\n    testCaseDict.testCase_failed_assertion_demo = function (\\n\\\n        options,\\n\\\n        onError\\n\\\n    ) {\\n\\\n    /*\\n\\\n     * this function will demo a failed assertion test\\n\\\n     */\\n\\\n        // jslint-hack\\n\\\n        window.utility2.nop(options);\\n\\\n        window.utility2.assert(false, \"this is a failed assertion demo\");\\n\\\n        onError();\\n\\\n    };\\n\\\n\\n\\\n    testCaseDict.testCase_passed_ajax_demo = function (options, onError) {\\n\\\n    /*\\n\\\n     * this function will demo a passed ajax test\\n\\\n     */\\n\\\n        var data;\\n\\\n        options = {url: \"/\"};\\n\\\n        // test ajax request for main-page \"/\"\\n\\\n        window.utility2.ajax(options, function (error, xhr) {\\n\\\n            try {\\n\\\n                // validate no error occurred\\n\\\n                window.utility2.assert(!error, error);\\n\\\n                // validate \"200 ok\" status\\n\\\n                window.utility2.assert(xhr.statusCode === 200, xhr.statusCode);\\n\\\n                // validate non-empty data\\n\\\n                data = xhr.responseText;\\n\\\n                window.utility2.assert(data && data.length > 0, data);\\n\\\n                onError();\\n\\\n            } catch (errorCaught) {\\n\\\n                onError(errorCaught);\\n\\\n            }\\n\\\n        });\\n\\\n    };\\n\\\n\\n\\\n    window.utility2.testRunDefault(testCaseDict);\\n\\\n}());\\n\\\n</textarea>\\n\\\n<pre id=\"outputPreJsonStringify1\"></pre>\\n\\\n<pre id=\"outputPreJslint1\"></pre>\\n\\\n<label>instrumented-code</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextarea1\" readonly></textarea>\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton2\">run internal test</button><br>\\n\\\n<div class=\"resettable\" id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\n<div id=\"coverageReportDiv1\" class=\"resettable\"></div>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.lib.istanbul.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.jslint.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.db.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.sjcl.js\"></script>\\n\\\n<script src=\"assets.utility2.lib.uglifyjs.js\"></script>\\n\\\n<script src=\"assets.utility2.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script>window.utility2.onResetBefore.counter += 1;</script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2.onResetBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.utility2.rollup.js'] =\n            local.assetsDict['/assets.utility2.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.utility2.__dirname +\n                    '/lib.utility2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}